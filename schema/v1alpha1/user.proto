// SPDX-License-Identifier: BSD-3-Clause

syntax = "proto3";

package schema.v1alpha1;

import "buf/validate/validate.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/field_mask.proto";

enum UserSource {
  USER_SOURCE_UNSPECIFIED = 0;
  USER_SOURCE_LOCAL = 1;
  USER_SOURCE_LDAP = 2;
  USER_SOURCE_AD = 3;
  USER_SOURCE_IPMI = 4;
  USER_SOURCE_REDFISH = 5;
  USER_SOURCE_NATS = 6;
  USER_SOURCE_UNIX = 7;
  USER_SOURCE_EXTERNAL_API = 8;
}

enum UserCreationInterface {
  USER_CREATION_INTERFACE_UNSPECIFIED = 0;
  USER_CREATION_INTERFACE_SCHEMA_API = 1;
  USER_CREATION_INTERFACE_UNIX_USERADD = 2;
  USER_CREATION_INTERFACE_LDAP_ADMIN = 3;
  USER_CREATION_INTERFACE_AD_ADMIN = 4;
  USER_CREATION_INTERFACE_REDFISH_API = 5;
  USER_CREATION_INTERFACE_NATS_CONFIG = 6;
  USER_CREATION_INTERFACE_IPMI_USER_MGMT = 7;
}

enum PasswordHashAlgorithm {
  PASSWORD_HASH_ALGORITHM_UNSPECIFIED = 0;
  PASSWORD_HASH_ALGORITHM_BCRYPT = 1;
  PASSWORD_HASH_ALGORITHM_ARGON2ID = 2;
  PASSWORD_HASH_ALGORITHM_SCRYPT = 3;
  PASSWORD_HASH_ALGORITHM_PBKDF2_SHA256 = 4;
  PASSWORD_HASH_ALGORITHM_PBKDF2_SHA512 = 5;
}

enum LockoutReason {
  LOCKOUT_REASON_UNSPECIFIED = 0;
  LOCKOUT_REASON_FAILED_LOGIN_ATTEMPTS = 1;
  LOCKOUT_REASON_ADMINISTRATIVE = 2;
  LOCKOUT_REASON_PASSWORD_EXPIRED = 3;
  LOCKOUT_REASON_ACCOUNT_EXPIRED = 4;
  LOCKOUT_REASON_SECURITY_POLICY = 5;
}

enum UserLinkAction {
  USER_LINK_ACTION_UNSPECIFIED = 0;
  USER_LINK_ACTION_LINK_EXISTING = 1;
  USER_LINK_ACTION_CREATE_NEW = 2;
  USER_LINK_ACTION_NO_ACTION = 3;
}

message User {
  option (buf.validate.message).cel = {
    id : "user_source_system_info_consistency",
    message : "user must have corresponding info for source system",
    expression : "(this.source_system == 1 && has(this.auth_data)) || "
                 "(this.source_system == 2 && has(this.ldap_info)) || "
                 "(this.source_system == 3 && has(this.ldap_info)) || "
                 "(this.source_system == 4) || "
                 "(this.source_system == 5 && has(this.redfish_info)) || "
                 "(this.source_system == 6 && has(this.nats_info)) || "
                 "(this.source_system == 7 && has(this.unix_info)) || "
                 "this.source_system == 0"
  };
  option (buf.validate.message).cel = {
    id : "user_timestamps_ordering",
    message : "created_at must be before or equal to updated_at",
    expression : "!has(this.created_at) || !has(this.updated_at) || "
                 "this.created_at <= this.updated_at"
  };
  option (buf.validate.message).cel = {
    id : "user_last_login_after_creation",
    message : "last_login must be after created_at",
    expression : "!has(this.created_at) || !has(this.last_login) || "
                 "this.created_at <= this.last_login"
  };

  string id = 1 [ (buf.validate.field).string.min_len = 1 ];
  string username = 2 [
    (buf.validate.field).string.min_len = 1,
    (buf.validate.field).string.max_len = 64,
    (buf.validate.field).string.pattern = "^[a-zA-Z0-9._-]+$"
  ];
  optional string full_name = 3 [
    (buf.validate.field).string.min_len = 1,
    (buf.validate.field).string.max_len = 256
  ];
  optional string email = 4 [
    (buf.validate.field).string.email = true,
    (buf.validate.field).string.max_len = 320
  ];
  bool enabled = 5 [ (buf.validate.field).required = true ];
  google.protobuf.Timestamp created_at = 6
      [ (buf.validate.field).required = true ];
  google.protobuf.Timestamp updated_at = 7
      [ (buf.validate.field).required = true ];
  optional google.protobuf.Timestamp last_login = 8;
  UserSource source_system = 9
      [ (buf.validate.field).enum.defined_only = true ];
  UserCreationInterface creation_interface = 10
      [ (buf.validate.field).enum.defined_only = true ];
  optional AuthenticationData auth_data = 11;
  optional UnixUserInfo unix_info = 12;
  optional LdapUserInfo ldap_info = 13;
  optional RedfishAccountInfo redfish_info = 14;
  optional NatsAccountInfo nats_info = 15;
  map<string, string> custom_attributes = 16;
}

message AuthenticationData {
  option (buf.validate.message).cel = {
    id : "auth_data_password_expiry_after_change",
    message : "password_expires_at must be after password_last_changed",
    expression : "!has(this.password_last_changed) || "
                 "!has(this.password_expires_at) || "
                 "this.password_last_changed < this.password_expires_at"
  };
  option (buf.validate.message).cel = {
    id : "auth_data_iterations_for_algorithm",
    message : "iterations must be appropriate for hash algorithm",
    expression : "(this.hash_algorithm == 1 && this.iterations >= 10 && "
                 "this.iterations <= 15) || "
                 "(this.hash_algorithm == 2 && this.iterations >= 1 && "
                 "this.iterations <= 10) || "
                 "(this.hash_algorithm == 3 && this.iterations >= 14 && "
                 "this.iterations <= 20) || "
                 "(this.hash_algorithm == 4 && this.iterations >= 100000) || "
                 "(this.hash_algorithm == 5 && this.iterations >= 100000) || "
                 "this.hash_algorithm == 0"
  };

  string password_hash = 1 [ (buf.validate.field).string.min_len = 1 ];
  optional string password_salt = 2 [ (buf.validate.field).string.min_len = 1 ];
  PasswordHashAlgorithm hash_algorithm = 3
      [ (buf.validate.field).enum.defined_only = true ];
  int32 iterations = 4 [ (buf.validate.field).int32.gte = 1 ];
  optional google.protobuf.Timestamp password_last_changed = 5;
  optional google.protobuf.Timestamp password_expires_at = 6;
  optional AccountLockoutInfo lockout_info = 7;
}

message AccountLockoutInfo {
  option (buf.validate.message).cel = {
    id : "lockout_info_consistency",
    message : "lockout_time must be set when locked is true",
    expression : "!this.locked || has(this.lockout_time)"
  };
  option (buf.validate.message).cel = {
    id : "lockout_failed_attempts_reset_time",
    message : "attempts_reset_time should be after lockout_time when both are "
              "set",
    expression : "!has(this.lockout_time) || !has(this.attempts_reset_time) || "
                 "this.lockout_time <= this.attempts_reset_time"
  };

  bool locked = 1;
  optional LockoutReason reason = 2
      [ (buf.validate.field).enum.defined_only = true ];
  optional google.protobuf.Timestamp lockout_time = 3;
  int32 failed_attempts = 4 [ (buf.validate.field).int32.gte = 0 ];
  optional google.protobuf.Timestamp attempts_reset_time = 5;
  optional int32 max_failed_attempts = 6 [ (buf.validate.field).int32.gte = 1 ];
}

message UnixUserInfo {
  int32 uid = 1 [
    (buf.validate.field).int32.gte = 0,
    (buf.validate.field).int32.lte = 65535
  ];
  int32 gid = 2 [
    (buf.validate.field).int32.gte = 0,
    (buf.validate.field).int32.lte = 65535
  ];
  string home_directory = 3 [
    (buf.validate.field).string.min_len = 1,
    (buf.validate.field).string.pattern = "^/.*"
  ];
  optional string shell = 4 [ (buf.validate.field).string.pattern = "^/.*" ];
  optional string gecos = 5 [ (buf.validate.field).string.max_len = 256 ];
  repeated int32 supplementary_groups = 6
      [ (buf.validate.field).repeated.items.int32.gte = 0 ];
}

message LdapUserInfo {
  string ldap_dn = 1 [ (buf.validate.field).string.min_len = 1 ];
  optional string object_guid = 2 [ (buf.validate.field).string.min_len = 1 ];
  optional string sam_account_name = 3 [
    (buf.validate.field).string.min_len = 1,
    (buf.validate.field).string.max_len = 20
  ];
  optional string user_principal_name = 4
      [ (buf.validate.field).string.min_len = 1 ];
  repeated string member_of = 5;
  optional google.protobuf.Timestamp account_expires = 6;
  optional google.protobuf.Timestamp pwd_last_set = 7;
  optional string domain = 8 [ (buf.validate.field).string.min_len = 1 ];
  optional string organizational_unit = 9;
}

message RedfishAccountInfo {
  optional string account_id = 1 [ (buf.validate.field).string.min_len = 1 ];
  string role_id = 2 [ (buf.validate.field).string.min_len = 1 ];
  optional RedfishLockoutPolicy lockout_policy = 3;
  repeated string oem_account_types = 4;
  optional bool password_change_required = 5;
}

message RedfishLockoutPolicy {
  int32 threshold = 1 [
    (buf.validate.field).int32.gte = 0,
    (buf.validate.field).int32.lte = 999
  ];
  optional string duration = 2
      [ (buf.validate.field).string.pattern = "^PT[0-9]+[HMS]$" ];
  optional string reset_after = 3
      [ (buf.validate.field).string.pattern = "^PT[0-9]+[HMS]$" ];
}

message NatsAccountInfo {
  string account = 1 [ (buf.validate.field).string.min_len = 1 ];
  optional NatsPermissions permissions = 2;
  optional NatsLimits limits = 3;
  optional string user_jwt = 4 [ (buf.validate.field).string.min_len = 1 ];
  optional string user_key = 5 [ (buf.validate.field).string.min_len = 1 ];
  optional string user_cred = 6 [ (buf.validate.field).string.min_len = 1 ];
  optional google.protobuf.Timestamp jwt_expires_at = 7;
}

message NatsPermissions {
  repeated string publish = 1;
  repeated string subscribe = 2;
  repeated string allow_responses = 3;
  repeated string deny = 4;
}

message NatsLimits {
  int64 data = 1 [ (buf.validate.field).int64.gte = -1 ];
  int64 payload = 2 [ (buf.validate.field).int64.gte = -1 ];
  int64 subs = 3 [ (buf.validate.field).int64.gte = -1 ];
  optional int64 conn = 4 [ (buf.validate.field).int64.gte = -1 ];
  optional int64 leaf = 5 [ (buf.validate.field).int64.gte = -1 ];
}

message UserLinkingOptions {
  UserLinkAction unix_action = 1
      [ (buf.validate.field).enum.defined_only = true ];
  UserLinkAction ldap_action = 2
      [ (buf.validate.field).enum.defined_only = true ];
  UserLinkAction redfish_action = 3
      [ (buf.validate.field).enum.defined_only = true ];
  UserLinkAction nats_action = 4
      [ (buf.validate.field).enum.defined_only = true ];
  optional string existing_unix_username = 5;
  optional string existing_ldap_dn = 6;
  optional string existing_redfish_account_id = 7;
  optional string existing_nats_account = 8;
}

message CreateUserRequest {
  option (buf.validate.message).cel = {
    id : "create_user_password_requirement",
    message : "password is required for local users",
    expression : "this.user.source_system != 1 || size(this.password) >= 8"
  };

  User user = 1 [ (buf.validate.field).required = true ];
  optional string password = 2 [ (buf.validate.field).string.min_len = 8 ];
  optional UserLinkingOptions linking_options = 3;
  optional bool dry_run = 4;
}

message CreateUserResponse {
  User user = 1;
  repeated string warnings = 2;
  repeated string created_accounts = 3;
}

message GetUserRequest {
  oneof identifier {
    option (buf.validate.oneof).required = true;
    string id = 1;
    string username = 2;
    string email = 3;
  }
  optional google.protobuf.FieldMask field_mask = 4;
}

message GetUserResponse { User user = 1; }

message UpdateUserRequest {
  User user = 1 [ (buf.validate.field).required = true ];
  google.protobuf.FieldMask field_mask = 2;
  optional UserLinkingOptions linking_options = 3;
}

message UpdateUserResponse {
  User user = 1;
  repeated string warnings = 2;
}

message DeleteUserRequest {
  string id = 1 [ (buf.validate.field).string.min_len = 1 ];
  optional bool cascade_delete = 2;
  optional bool backup_data = 3;
}

message DeleteUserResponse {
  bool success = 1;
  repeated string deleted_accounts = 2;
  optional string backup_location = 3;
}

message ListUsersRequest {
  optional UserSource source = 1
      [ (buf.validate.field).enum.defined_only = true ];
  optional bool enabled = 2;
  optional string username_prefix = 3;
  optional google.protobuf.FieldMask field_mask = 4;
  optional int32 page_size = 5 [ (buf.validate.field).int32.gte = 1 ];
  optional string page_token = 6;
}

message ListUsersResponse {
  repeated User users = 1;
  optional string next_page_token = 2;
}

message ChangePasswordRequest {
  string id = 1 [ (buf.validate.field).string.min_len = 1 ];
  string current_password = 2 [ (buf.validate.field).string.min_len = 1 ];
  string new_password = 3 [
    (buf.validate.field).string.min_len = 8,
    (buf.validate.field).string.max_len = 128
  ];
}

message ChangePasswordResponse {
  bool success = 1;
  optional string failure_reason = 2;
}

message ResetPasswordRequest {
  string id = 1 [ (buf.validate.field).string.min_len = 1 ];
  optional string new_password = 2 [
    (buf.validate.field).string.min_len = 8,
    (buf.validate.field).string.max_len = 128
  ];
  optional bool force = 3;
  optional bool generate_password = 4;
}

message ResetPasswordResponse {
  string new_password = 1;
  bool success = 2;
  optional string failure_reason = 3;
}

message AuthenticateUserRequest {
  string username = 1 [ (buf.validate.field).string.min_len = 1 ];
  string password = 2 [ (buf.validate.field).string.min_len = 1 ];
  optional string source_ip = 3;
  optional string user_agent = 4;
}

message AuthenticateUserResponse {
  bool success = 1;
  optional string user_id = 2;
  optional string token = 3;
  optional string failure_reason = 4;
  optional google.protobuf.Timestamp token_expires_at = 5;
}
