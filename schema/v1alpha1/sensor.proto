// SPDX-License-Identifier: BSD-3-Clause

syntax = "proto3";

package schema.v1alpha1;

import "buf/validate/validate.proto";
import "google/protobuf/field_mask.proto";
import "google/protobuf/timestamp.proto";
import "schema/v1alpha1/location.proto";

enum SensorContext {
  SENSOR_CONTEXT_UNSPECIFIED = 0;
  SENSOR_CONTEXT_TEMPERATURE = 1;
  SENSOR_CONTEXT_VOLTAGE = 2;
  SENSOR_CONTEXT_CURRENT = 3;
  SENSOR_CONTEXT_TACH = 4;
  SENSOR_CONTEXT_POWER = 5;
  SENSOR_CONTEXT_ENERGY = 6;
  SENSOR_CONTEXT_PRESSURE = 7;
  SENSOR_CONTEXT_HUMIDITY = 8;
  SENSOR_CONTEXT_ALTITUDE = 9;
  SENSOR_CONTEXT_FLOW_RATE = 10;
}

enum SensorStatus {
  SENSOR_STATUS_UNSPECIFIED = 0;
  SENSOR_STATUS_ENABLED = 1;
  SENSOR_STATUS_DISABLED = 2;
  SENSOR_STATUS_NOT_PRESENT = 3;
  SENSOR_STATUS_WARNING = 4;
  SENSOR_STATUS_CRITICAL = 5;
  SENSOR_STATUS_ERROR = 6;
  SENSOR_STATUS_UNKNOWN = 7;
}

enum SensorUnit {
  SENSOR_UNIT_UNSPECIFIED = 0;
  SENSOR_UNIT_CELSIUS = 1;
  SENSOR_UNIT_FAHRENHEIT = 2;
  SENSOR_UNIT_KELVIN = 3;
  SENSOR_UNIT_VOLTS = 4;
  SENSOR_UNIT_AMPS = 5;
  SENSOR_UNIT_WATTS = 6;
  SENSOR_UNIT_JOULES = 7;
  SENSOR_UNIT_PASCALS = 8;
  SENSOR_UNIT_PERCENT = 9;
  SENSOR_UNIT_RPM = 10;
  SENSOR_UNIT_HERTZ = 11;
  SENSOR_UNIT_METERS = 12;
  SENSOR_UNIT_LITERS_PER_MINUTE = 13;
}

message Sensor {
  option (buf.validate.message).cel = {
    id : "sensor_context_unit_compatibility",
    message : "sensor unit must be compatible with sensor context",
    // Temperature context allows Celsius, Fahrenheit, or Kelvin units
    expression : "(this.context == 1 && (this.unit == 1 || this.unit == 2 || "
                 "this.unit == 3)) || "
                 // Voltage context allows Volts unit
                 "(this.context == 2 && this.unit == 4) || "
                 // Current context allows Amps unit
                 "(this.context == 3 && this.unit == 5) || "
                 // Tach context allows RPM or Percent units
                 "(this.context == 4 && (this.unit == 10 || this.unit == "
                 "9)) || "
                 // Power context allows Watts unit
                 "(this.context == 5 && this.unit == 6) || "
                 // Energy context allows Joules unit
                 "(this.context == 6 && this.unit == 7) || "
                 // Pressure context allows Pascals unit
                 "(this.context == 7 && this.unit == 8) || "
                 // Humidity context allows Percent unit
                 "(this.context == 8 && this.unit == 9) || "
                 // Altitude context allows Meters unit
                 "(this.context == 9 && this.unit == 12) || "
                 // Flow rate context allows Liters per minute unit
                 "(this.context == 10 && this.unit == 13) || "
                 // Allow unspecified context or unit
                 "this.context == 0 || this.unit == 0"
  };
  string id = 1 [ (buf.validate.field).string.min_len = 1 ];
  string name = 2 [ (buf.validate.field).string.min_len = 1 ];
  optional SensorContext context = 3
      [ (buf.validate.field).enum.defined_only = true ];
  optional SensorStatus status = 4
      [ (buf.validate.field).enum.defined_only = true ];
  optional SensorUnit unit = 5
      [ (buf.validate.field).enum.defined_only = true ];
  oneof reading {
    option (buf.validate.oneof).required = true;
    AnalogSensorReading analog_reading = 6;
    DiscreteSensorReading discrete_reading = 7;
  }
  optional Location location = 8;
  optional google.protobuf.Timestamp last_reading_timestamp = 9;
  map<string, string> custom_attributes = 10;
}

message AnalogSensorReading {
  option (buf.validate.message).cel = {
    id : "analog_sensor_upper_thresholds",
    message : "upper warning threshold must be less than upper critical "
              "threshold",
    expression : "!has(this.upper_thresholds) || "
                 "!has(this.upper_thresholds.warning) || "
                 "!has(this.upper_thresholds.critical) || "
                 "this.upper_thresholds.warning < "
                 "this.upper_thresholds.critical"
  };
  option (buf.validate.message).cel = {
    id : "analog_sensor_lower_thresholds",
    message : "lower critical threshold must be less than lower warning "
              "threshold",
    expression : "!has(this.lower_thresholds) || "
                 "!has(this.lower_thresholds.warning) || "
                 "!has(this.lower_thresholds.critical) || "
                 "this.lower_thresholds.critical < "
                 "this.lower_thresholds.warning"
  };
  option (buf.validate.message).cel = {
    id : "analog_sensor_threshold_bounds",
    message : "lower thresholds must be less than upper thresholds",
    expression : "(!has(this.lower_thresholds) || "
                 "!has(this.upper_thresholds)) || "
                 "(!has(this.lower_thresholds.warning) || "
                 "!has(this.upper_thresholds.warning) || "
                 "this.lower_thresholds.warning < "
                 "this.upper_thresholds.warning) && "
                 "(!has(this.lower_thresholds.critical) || "
                 "!has(this.upper_thresholds.critical) || "
                 "this.lower_thresholds.critical < "
                 "this.upper_thresholds.critical)"
  };
  option (buf.validate.message).cel = {
    id : "analog_sensor_min_max_bounds",
    message : "min_value must be less than or equal to max_value",
    expression : "!has(this.min_max_recorded) || "
                 "this.min_max_recorded.min_value <= "
                 "this.min_max_recorded.max_value"
  };
  double value = 1 [ (buf.validate.field).required = true ];
  optional Threshold upper_thresholds = 2;
  optional Threshold lower_thresholds = 3;
  optional MinMaxRecorded min_max_recorded = 4;
}

message DiscreteSensorReading {
  string state = 1 [ (buf.validate.field).string.min_len = 1 ];
  optional string state_description = 2;
}

message Threshold {
  option (buf.validate.message).cel = {
    id : "threshold_ordering",
    message : "warning threshold must not equal critical threshold",
    expression : "!has(this.warning) || "
                 "!has(this.critical) || "
                 "this.warning != this.critical"
  };
  option (buf.validate.message).oneof = {
    fields : [ "warning", "critical" ],
    required : true
  };
  optional double warning = 1;
  optional double critical = 2;
}

message MinMaxRecorded {
  option (buf.validate.message).cel = {
    id : "min_max_values",
    message : "min_value must be less than or equal to max_value",
    expression : "this.min_value <= this.max_value"
  };
  double min_value = 1;
  double max_value = 2;
  optional google.protobuf.Timestamp min_timestamp = 3;
  optional google.protobuf.Timestamp max_timestamp = 4;
}

message ListSensorsRequest { google.protobuf.FieldMask field_mask = 1; }

message ListSensorsResponse { repeated Sensor sensor = 1; }

message GetSensorRequest {
  oneof identifier {
    option (buf.validate.oneof).required = true;
    string id = 1;
    string name = 2;
    SensorContext context = 3;
    SensorStatus status = 4;
    Location location = 5;
  }
  google.protobuf.FieldMask field_mask = 6;
}

message GetSensorResponse { repeated Sensor sensors = 1; }
