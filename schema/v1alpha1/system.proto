// SPDX-License-Identifier: BSD-3-Clause

syntax = "proto3";

package schema.v1alpha1;

import "buf/validate/validate.proto";
import "google/protobuf/field_mask.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/duration.proto";
import "schema/v1alpha1/asset.proto";
import "schema/v1alpha1/chassis.proto";
import "schema/v1alpha1/contact.proto";
import "schema/v1alpha1/host.proto";
import "schema/v1alpha1/managementcontroller.proto";
import "schema/v1alpha1/sensor.proto";
import "schema/v1alpha1/thermal.proto";
import "schema/v1alpha1/user.proto";

enum HealthStatus {
  HEALTH_STATUS_UNSPECIFIED = 0;
  HEALTH_STATUS_OK = 1;
  HEALTH_STATUS_WARNING = 2;
  HEALTH_STATUS_CRITICAL = 3;
  HEALTH_STATUS_UNKNOWN = 4;
}

enum SystemState {
  SYSTEM_STATE_UNSPECIFIED = 0;
  SYSTEM_STATE_STARTING = 1;
  SYSTEM_STATE_ENABLED = 2;
  SYSTEM_STATE_DISABLED = 3;
  SYSTEM_STATE_STANDBY = 4;
  SYSTEM_STATE_QUIESCED = 5;
  SYSTEM_STATE_IN_TEST = 6;
  SYSTEM_STATE_UPDATING = 7;
}

message Health {
  HealthStatus status = 1 [ (buf.validate.field).enum.defined_only = true ];
  optional string status_description = 2;
  repeated HealthDetail details = 3;
  optional google.protobuf.Timestamp last_updated = 4;
  optional google.protobuf.Duration uptime = 5;
}

message HealthDetail {
  string component = 1 [ (buf.validate.field).string.min_len = 1 ];
  HealthStatus status = 2 [ (buf.validate.field).enum.defined_only = true ];
  optional string message = 3;
  optional google.protobuf.Timestamp timestamp = 4;
}

message SystemInfo {
  string name = 1 [ (buf.validate.field).string.min_len = 1 ];
  optional string description = 2;
  SystemState state = 3 [ (buf.validate.field).enum.defined_only = true ];
  Health health = 4 [ (buf.validate.field).required = true ];
  optional string version = 5;
  optional google.protobuf.Timestamp boot_time = 6;
  optional google.protobuf.Duration uptime = 7;
  optional ContactInfo contact_info = 8;
  map<string, string> metadata = 9;
}

message GetSystemInfoRequest {
  optional google.protobuf.FieldMask field_mask = 1;
}

message GetSystemInfoResponse { SystemInfo system_info = 1; }

message GetHealthRequest { optional google.protobuf.FieldMask field_mask = 1; }

message GetHealthResponse { Health health = 1; }

service BMCService {
  rpc GetSystemInfo(GetSystemInfoRequest) returns (GetSystemInfoResponse);
  rpc GetHealth(GetHealthRequest) returns (GetHealthResponse);

  rpc GetAssetInfo(GetAssetInfoRequest) returns (GetAssetInfoResponse);
  rpc SetAssetInfo(SetAssetInfoRequest) returns (SetAssetInfoResponse);

  rpc GetChassis(GetChassisRequest) returns (GetChassisResponse);
  rpc ListChassis(ListChassisRequest) returns (ListChassisResponse);
  rpc UpdateChassis(UpdateChassisRequest) returns (UpdateChassisResponse);
  rpc ChassisChangeState(ChassisChangeStateRequest)
      returns (ChassisChangeStateResponse);
  rpc ChassisControl(ChassisControlRequest) returns (ChassisControlResponse);

  rpc GetHost(GetHostRequest) returns (GetHostResponse);
  rpc ListHosts(ListHostsRequest) returns (ListHostsResponse);
  rpc UpdateHost(UpdateHostRequest) returns (UpdateHostResponse);
  rpc HostChangeState(HostChangeStateRequest) returns (HostChangeStateResponse);

  rpc GetManagementController(GetManagementControllerRequest)
      returns (GetManagementControllerResponse);
  rpc ListManagementControllers(ListManagementControllersRequest)
      returns (ListManagementControllersResponse);
  rpc UpdateManagementController(UpdateManagementControllerRequest)
      returns (UpdateManagementControllerResponse);
  rpc ManagementControllerControl(ManagementControllerControlRequest)
      returns (ManagementControllerControlResponse);

  rpc ListSensors(ListSensorsRequest) returns (ListSensorsResponse);
  rpc GetSensor(GetSensorRequest) returns (GetSensorResponse);

  rpc GetThermalZone(GetThermalZoneRequest) returns (GetThermalZoneResponse);
  rpc SetThermalZone(SetThermalZoneRequest) returns (SetThermalZoneResponse);
  rpc ListThermalZones(ListThermalZonesRequest)
      returns (ListThermalZonesResponse);

  rpc CreateUser(CreateUserRequest) returns (CreateUserResponse);
  rpc GetUser(GetUserRequest) returns (GetUserResponse);
  rpc UpdateUser(UpdateUserRequest) returns (UpdateUserResponse);
  rpc DeleteUser(DeleteUserRequest) returns (DeleteUserResponse);
  rpc ListUsers(ListUsersRequest) returns (ListUsersResponse);
  rpc ChangePassword(ChangePasswordRequest) returns (ChangePasswordResponse);
  rpc ResetPassword(ResetPasswordRequest) returns (ResetPasswordResponse);
  rpc AuthenticateUser(AuthenticateUserRequest)
      returns (AuthenticateUserResponse);
}
