// SPDX-License-Identifier: BSD-3-Clause

syntax = "proto3";

package schema.v1alpha1;

import "buf/validate/validate.proto";
import "google/api/annotations.proto";
import "google/protobuf/field_mask.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/duration.proto";
import "schema/v1alpha1/asset.proto";
import "schema/v1alpha1/chassis.proto";
import "schema/v1alpha1/contact.proto";
import "schema/v1alpha1/host.proto";
import "schema/v1alpha1/managementcontroller.proto";
import "schema/v1alpha1/sensor.proto";
import "schema/v1alpha1/thermal.proto";
import "schema/v1alpha1/user.proto";

enum HealthStatus {
  HEALTH_STATUS_UNSPECIFIED = 0;
  HEALTH_STATUS_OK = 1;
  HEALTH_STATUS_WARNING = 2;
  HEALTH_STATUS_CRITICAL = 3;
  HEALTH_STATUS_UNKNOWN = 4;
}

enum SystemState {
  SYSTEM_STATE_UNSPECIFIED = 0;
  SYSTEM_STATE_STARTING = 1;
  SYSTEM_STATE_ENABLED = 2;
  SYSTEM_STATE_DISABLED = 3;
  SYSTEM_STATE_STANDBY = 4;
  SYSTEM_STATE_QUIESCED = 5;
  SYSTEM_STATE_IN_TEST = 6;
  SYSTEM_STATE_UPDATING = 7;
}

message Health {
  HealthStatus status = 1 [ (buf.validate.field).enum.defined_only = true ];
  optional string status_description = 2;
  repeated HealthDetail details = 3;
  optional google.protobuf.Timestamp last_updated = 4;
  optional google.protobuf.Duration uptime = 5;
}

message HealthDetail {
  string component = 1 [ (buf.validate.field).string.min_len = 1 ];
  HealthStatus status = 2 [ (buf.validate.field).enum.defined_only = true ];
  optional string message = 3;
  optional google.protobuf.Timestamp timestamp = 4;
}

message SystemInfo {
  string name = 1 [ (buf.validate.field).string.min_len = 1 ];
  optional string description = 2;
  SystemState state = 3 [ (buf.validate.field).enum.defined_only = true ];
  Health health = 4 [ (buf.validate.field).required = true ];
  optional string version = 5;
  optional google.protobuf.Timestamp boot_time = 6;
  optional google.protobuf.Duration uptime = 7;
  optional ContactInfo contact_info = 8;
  map<string, string> metadata = 9;
}

message GetSystemInfoRequest {
  optional google.protobuf.FieldMask field_mask = 1;
}

message GetSystemInfoResponse { SystemInfo system_info = 1; }

message GetHealthRequest { optional google.protobuf.FieldMask field_mask = 1; }

message GetHealthResponse { Health health = 1; }

service BMCService {
  rpc GetSystemInfo(GetSystemInfoRequest) returns (GetSystemInfoResponse) {
    option (google.api.http) = {
      get : "/api/v1alpha1/system/info"
    };
  }
  rpc GetHealth(GetHealthRequest) returns (GetHealthResponse) {
    option (google.api.http) = {
      get : "/api/v1alpha1/system/health"
    };
  }

  rpc GetAssetInfo(GetAssetInfoRequest) returns (GetAssetInfoResponse) {
    option (google.api.http) = {
      get : "/api/v1alpha1/asset"
    };
  }
  rpc SetAssetInfo(SetAssetInfoRequest) returns (SetAssetInfoResponse) {
    option (google.api.http) = {
      put : "/api/v1alpha1/asset"
      body : "*"
    };
  }

  rpc GetChassis(GetChassisRequest) returns (GetChassisResponse) {
    option (google.api.http) = {
      get : "/api/v1alpha1/chassis/{name}"
    };
  }
  rpc ListChassis(ListChassisRequest) returns (ListChassisResponse) {
    option (google.api.http) = {
      get : "/api/v1alpha1/chassis"
    };
  }
  rpc UpdateChassis(UpdateChassisRequest) returns (UpdateChassisResponse) {
    option (google.api.http) = {
      patch : "/api/v1alpha1/chassis/{chassis_name}"
      body : "*"
    };
  }
  rpc ChangeChassisState(ChangeChassisStateRequest)
      returns (ChangeChassisStateResponse) {
    option (google.api.http) = {
      post : "/api/v1alpha1/chassis/{chassis_name}/state"
      body : "*"
    };
  }

  rpc GetHost(GetHostRequest) returns (GetHostResponse) {
    option (google.api.http) = {
      get : "/api/v1alpha1/hosts/{name}"
    };
  }
  rpc ListHosts(ListHostsRequest) returns (ListHostsResponse) {
    option (google.api.http) = {
      get : "/api/v1alpha1/hosts"
    };
  }
  rpc UpdateHost(UpdateHostRequest) returns (UpdateHostResponse) {
    option (google.api.http) = {
      patch : "/api/v1alpha1/hosts/{host_name}"
      body : "*"
    };
  }
  rpc ChangeHostState(ChangeHostStateRequest)
      returns (ChangeHostStateResponse) {
    option (google.api.http) = {
      post : "/api/v1alpha1/hosts/{host_name}/state"
      body : "*"
    };
  }

  rpc GetManagementController(GetManagementControllerRequest)
      returns (GetManagementControllerResponse) {
    option (google.api.http) = {
      get : "/api/v1alpha1/management-controllers/{name}"
    };
  }
  rpc ListManagementControllers(ListManagementControllersRequest)
      returns (ListManagementControllersResponse) {
    option (google.api.http) = {
      get : "/api/v1alpha1/management-controllers"
    };
  }
  rpc UpdateManagementController(UpdateManagementControllerRequest)
      returns (UpdateManagementControllerResponse) {
    option (google.api.http) = {
      patch : "/api/v1alpha1/management-controllers/{controller_name}"
      body : "*"
    };
  }
  rpc ChangeManagementControllerState(ChangeManagementControllerStateRequest)
      returns (ChangeManagementControllerStateResponse) {
    option (google.api.http) = {
      post : "/api/v1alpha1/management-controllers/{controller_name}/state"
      body : "*"
    };
  }

  rpc ListSensors(ListSensorsRequest) returns (ListSensorsResponse) {
    option (google.api.http) = {
      get : "/api/v1alpha1/sensors"
    };
  }
  rpc GetSensor(GetSensorRequest) returns (GetSensorResponse) {
    option (google.api.http) = {
      get : "/api/v1alpha1/sensors/{id}"
    };
  }

  rpc GetThermalZone(GetThermalZoneRequest) returns (GetThermalZoneResponse) {
    option (google.api.http) = {
      get : "/api/v1alpha1/thermal-zones/{name}"
    };
  }
  rpc SetThermalZone(SetThermalZoneRequest) returns (SetThermalZoneResponse) {
    option (google.api.http) = {
      put : "/api/v1alpha1/thermal-zones/{name}"
      body : "*"
    };
  }
  rpc ListThermalZones(ListThermalZonesRequest)
      returns (ListThermalZonesResponse) {
    option (google.api.http) = {
      get : "/api/v1alpha1/thermal-zones"
    };
  }

  rpc CreateUser(CreateUserRequest) returns (CreateUserResponse) {
    option (google.api.http) = {
      post : "/api/v1alpha1/users"
      body : "*"
    };
  }
  rpc GetUser(GetUserRequest) returns (GetUserResponse) {
    option (google.api.http) = {
      get : "/api/v1alpha1/users/{id}"
    };
  }
  rpc UpdateUser(UpdateUserRequest) returns (UpdateUserResponse) {
    option (google.api.http) = {
      patch : "/api/v1alpha1/users/{user.id}"
      body : "*"
    };
  }
  rpc DeleteUser(DeleteUserRequest) returns (DeleteUserResponse) {
    option (google.api.http) = {
      delete : "/api/v1alpha1/users/{id}"
    };
  }
  rpc ListUsers(ListUsersRequest) returns (ListUsersResponse) {
    option (google.api.http) = {
      get : "/api/v1alpha1/users"
    };
  }
  rpc ChangePassword(ChangePasswordRequest) returns (ChangePasswordResponse) {
    option (google.api.http) = {
      post : "/api/v1alpha1/users/{id}/change-password"
      body : "*"
    };
  }
  rpc ResetPassword(ResetPasswordRequest) returns (ResetPasswordResponse) {
    option (google.api.http) = {
      post : "/api/v1alpha1/users/{id}/reset-password"
      body : "*"
    };
  }
  rpc AuthenticateUser(AuthenticateUserRequest)
      returns (AuthenticateUserResponse) {
    option (google.api.http) = {
      post : "/api/v1alpha1/auth/authenticate"
      body : "*"
    };
  }
}
