// SPDX-License-Identifier: BSD-3-Clause

// @generated by protoc-gen-es v2.6.3 with parameter "target=ts"
// @generated from file schema/v1alpha1/thermal.proto (package proto.v1alpha1, syntax proto3)
/* eslint-disable */

import type { GenEnum, GenFile, GenMessage, GenService } from "@bufbuild/protobuf/codegenv2";
import { enumDesc, fileDesc, messageDesc, serviceDesc } from "@bufbuild/protobuf/codegenv2";
import { file_buf_validate_validate } from "../../buf/validate/validate_pb";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file schema/v1alpha1/thermal.proto.
 */
export const file_schema_v1alpha1_thermal: GenFile = /*@__PURE__*/
  fileDesc("Ch1zY2hlbWEvdjFhbHBoYTEvdGhlcm1hbC5wcm90bxIOcHJvdG8udjFhbHBoYTEixQEKEVRoZXJtYWxNYW5hZ2VtZW50EhMKAmlkGAEgASgJQge6SARyAhABEhUKBG5hbWUYAiABKAlCB7pIBHICEAESNAoFem9uZXMYAyADKAsyGy5wcm90by52MWFscGhhMS5UaGVybWFsWm9uZUIIukgFkgECCAESLwoHcHJvZmlsZRgEIAEoCzIeLnByb3RvLnYxYWxwaGExLlRoZXJtYWxQcm9maWxlEh0KFWxhc3RfdXBkYXRlX3RpbWVzdGFtcBgFIAEoAyLLAgoLVGhlcm1hbFpvbmUSEwoCaWQYASABKAlCB7pIBHICEAESFQoEbmFtZRgCIAEoCUIHukgEcgIQARIcCgpzZW5zb3JfaWRzGAMgAygJQgi6SAWSAQIIARIkChJjb29saW5nX2RldmljZV9pZHMYBCADKAlCCLpIBZIBAggBEhsKE2N1cnJlbnRfdGVtcGVyYXR1cmUYBSABKAESKgoSdGFyZ2V0X3RlbXBlcmF0dXJlGAYgASgBQg66SAsSCSEAAAAAAAAAABIxCgxwaWRfc2V0dGluZ3MYByABKAsyGy5wcm90by52MWFscGhhMS5QSURTZXR0aW5ncxIxCgZzdGF0dXMYCCABKA4yIS5wcm90by52MWFscGhhMS5UaGVybWFsWm9uZVN0YXR1cxIdChVsYXN0X3VwZGF0ZV90aW1lc3RhbXAYCSABKAMi8wIKDUNvb2xpbmdEZXZpY2USEwoCaWQYASABKAlCB7pIBHICEAESFQoEbmFtZRgCIAEoCUIHukgEcgIQARIvCgR0eXBlGAMgASgOMiEucHJvdG8udjFhbHBoYTEuQ29vbGluZ0RldmljZVR5cGUSLgoNc3BlZWRfcGVyY2VudBgEIAEoAUIXukgUEhIZAAAAAAAAWUApAAAAAAAAAAASMgoRbWluX3NwZWVkX3BlcmNlbnQYBSABKAFCF7pIFBISGQAAAAAAAFlAKQAAAAAAAAAAEjIKEW1heF9zcGVlZF9wZXJjZW50GAYgASgBQhe6SBQSEhkAAAAAAABZQCkAAAAAAAAAABIzCgZzdGF0dXMYByABKA4yIy5wcm90by52MWFscGhhMS5Db29saW5nRGV2aWNlU3RhdHVzEhkKEXBoeXNpY2FsX2xvY2F0aW9uGAggASgJEh0KFWxhc3RfdXBkYXRlX3RpbWVzdGFtcBgJIAEoAyLgAQoLUElEU2V0dGluZ3MSGgoCa3AYASABKAFCDrpICxIJKQAAAAAAAAAAEhoKAmtpGAIgASgBQg66SAsSCSkAAAAAAAAAABIaCgJrZBgDIAEoAUIOukgLEgkpAAAAAAAAAAASIwoLc2FtcGxlX3RpbWUYBCABKAFCDrpICxIJIQAAAAAAAAAAEisKCm91dHB1dF9taW4YBSABKAFCF7pIFBISGQAAAAAAAFlAKQAAAAAAAAAAEisKCm91dHB1dF9tYXgYBiABKAFCF7pIFBISGQAAAAAAAFlAKQAAAAAAAAAAIo0BCg5UaGVybWFsUHJvZmlsZRIwCgR0eXBlGAEgASgOMiIucHJvdG8udjFhbHBoYTEuVGhlcm1hbFByb2ZpbGVUeXBlEjQKD2N1c3RvbV9zZXR0aW5ncxgCIAEoCzIbLnByb3RvLnYxYWxwaGExLlBJRFNldHRpbmdzEhMKC2Rlc2NyaXB0aW9uGAMgASgJIjIKG0dldFRoZXJtYWxNYW5hZ2VtZW50UmVxdWVzdBITCgJpZBgBIAEoCUIHukgEcgIQASJdChxHZXRUaGVybWFsTWFuYWdlbWVudFJlc3BvbnNlEj0KEnRoZXJtYWxfbWFuYWdlbWVudBgBIAEoCzIhLnByb3RvLnYxYWxwaGExLlRoZXJtYWxNYW5hZ2VtZW50Ih4KHExpc3RUaGVybWFsTWFuYWdlbWVudFJlcXVlc3QiXwodTGlzdFRoZXJtYWxNYW5hZ2VtZW50UmVzcG9uc2USPgoTdGhlcm1hbF9tYW5hZ2VtZW50cxgBIAMoCzIhLnByb3RvLnYxYWxwaGExLlRoZXJtYWxNYW5hZ2VtZW50IiwKFUdldFRoZXJtYWxab25lUmVxdWVzdBITCgJpZBgBIAEoCUIHukgEcgIQASJLChZHZXRUaGVybWFsWm9uZVJlc3BvbnNlEjEKDHRoZXJtYWxfem9uZRgBIAEoCzIbLnByb3RvLnYxYWxwaGExLlRoZXJtYWxab25lIkwKF0xpc3RUaGVybWFsWm9uZXNSZXF1ZXN0EjEKBnN0YXR1cxgBIAEoDjIhLnByb3RvLnYxYWxwaGExLlRoZXJtYWxab25lU3RhdHVzIk4KGExpc3RUaGVybWFsWm9uZXNSZXNwb25zZRIyCg10aGVybWFsX3pvbmVzGAEgAygLMhsucHJvdG8udjFhbHBoYTEuVGhlcm1hbFpvbmUiLgoXR2V0Q29vbGluZ0RldmljZVJlcXVlc3QSEwoCaWQYASABKAlCB7pIBHICEAEiUQoYR2V0Q29vbGluZ0RldmljZVJlc3BvbnNlEjUKDmNvb2xpbmdfZGV2aWNlGAEgASgLMh0ucHJvdG8udjFhbHBoYTEuQ29vbGluZ0RldmljZSKBAQoZTGlzdENvb2xpbmdEZXZpY2VzUmVxdWVzdBIvCgR0eXBlGAEgASgOMiEucHJvdG8udjFhbHBoYTEuQ29vbGluZ0RldmljZVR5cGUSMwoGc3RhdHVzGAIgASgOMiMucHJvdG8udjFhbHBoYTEuQ29vbGluZ0RldmljZVN0YXR1cyJUChpMaXN0Q29vbGluZ0RldmljZXNSZXNwb25zZRI2Cg9jb29saW5nX2RldmljZXMYASADKAsyHS5wcm90by52MWFscGhhMS5Db29saW5nRGV2aWNlKroBChFUaGVybWFsWm9uZVN0YXR1cxIjCh9USEVSTUFMX1pPTkVfU1RBVFVTX1VOU1BFQ0lGSUVEEAASHgoaVEhFUk1BTF9aT05FX1NUQVRVU19OT1JNQUwQARIfChtUSEVSTUFMX1pPTkVfU1RBVFVTX1dBUk5JTkcQAhIgChxUSEVSTUFMX1pPTkVfU1RBVFVTX0NSSVRJQ0FMEAMSHQoZVEhFUk1BTF9aT05FX1NUQVRVU19FUlJPUhAEKqEBChFDb29saW5nRGV2aWNlVHlwZRIjCh9DT09MSU5HX0RFVklDRV9UWVBFX1VOU1BFQ0lGSUVEEAASGwoXQ09PTElOR19ERVZJQ0VfVFlQRV9GQU4QARIiCh5DT09MSU5HX0RFVklDRV9UWVBFX1dBVEVSX1BVTVAQAhImCiJDT09MSU5HX0RFVklDRV9UWVBFX0hFQVRfRVhDSEFOR0VSEAMqywEKE0Nvb2xpbmdEZXZpY2VTdGF0dXMSJQohQ09PTElOR19ERVZJQ0VfU1RBVFVTX1VOU1BFQ0lGSUVEEAASIQodQ09PTElOR19ERVZJQ0VfU1RBVFVTX0VOQUJMRUQQARIiCh5DT09MSU5HX0RFVklDRV9TVEFUVVNfRElTQUJMRUQQAhIfChtDT09MSU5HX0RFVklDRV9TVEFUVVNfRVJST1IQAxIlCiFDT09MSU5HX0RFVklDRV9TVEFUVVNfTk9UX1BSRVNFTlQQBCrDAQoSVGhlcm1hbFByb2ZpbGVUeXBlEiQKIFRIRVJNQUxfUFJPRklMRV9UWVBFX1VOU1BFQ0lGSUVEEAASHgoaVEhFUk1BTF9QUk9GSUxFX1RZUEVfUVVJRVQQARIhCh1USEVSTUFMX1BST0ZJTEVfVFlQRV9CQUxBTkNFRBACEiMKH1RIRVJNQUxfUFJPRklMRV9UWVBFX0FHR1JFU1NJVkUQAxIfChtUSEVSTUFMX1BST0ZJTEVfVFlQRV9DVVNUT00QBDKHAgoYVGhlcm1hbE1hbmFnZW1lbnRTZXJ2aWNlEnMKFEdldFRoZXJtYWxNYW5hZ2VtZW50EisucHJvdG8udjFhbHBoYTEuR2V0VGhlcm1hbE1hbmFnZW1lbnRSZXF1ZXN0GiwucHJvdG8udjFhbHBoYTEuR2V0VGhlcm1hbE1hbmFnZW1lbnRSZXNwb25zZSIAEnYKFUxpc3RUaGVybWFsTWFuYWdlbWVudBIsLnByb3RvLnYxYWxwaGExLkxpc3RUaGVybWFsTWFuYWdlbWVudFJlcXVlc3QaLS5wcm90by52MWFscGhhMS5MaXN0VGhlcm1hbE1hbmFnZW1lbnRSZXNwb25zZSIAMuABChJUaGVybWFsWm9uZVNlcnZpY2USYQoOR2V0VGhlcm1hbFpvbmUSJS5wcm90by52MWFscGhhMS5HZXRUaGVybWFsWm9uZVJlcXVlc3QaJi5wcm90by52MWFscGhhMS5HZXRUaGVybWFsWm9uZVJlc3BvbnNlIgASZwoQTGlzdFRoZXJtYWxab25lcxInLnByb3RvLnYxYWxwaGExLkxpc3RUaGVybWFsWm9uZXNSZXF1ZXN0GigucHJvdG8udjFhbHBoYTEuTGlzdFRoZXJtYWxab25lc1Jlc3BvbnNlIgAy7gEKFENvb2xpbmdEZXZpY2VTZXJ2aWNlEmcKEEdldENvb2xpbmdEZXZpY2USJy5wcm90by52MWFscGhhMS5HZXRDb29saW5nRGV2aWNlUmVxdWVzdBooLnByb3RvLnYxYWxwaGExLkdldENvb2xpbmdEZXZpY2VSZXNwb25zZSIAEm0KEkxpc3RDb29saW5nRGV2aWNlcxIpLnByb3RvLnYxYWxwaGExLkxpc3RDb29saW5nRGV2aWNlc1JlcXVlc3QaKi5wcm90by52MWFscGhhMS5MaXN0Q29vbGluZ0RldmljZXNSZXNwb25zZSIAQrIBChJjb20ucHJvdG8udjFhbHBoYTFCDFRoZXJtYWxQcm90b1ABWjV1LWJtYy5vcmcvdS1ibWMvYXBpL2dlbi9zY2hlbWEvdjFhbHBoYTE7cHJvdG92MWFscGhhMaICA1BYWKoCDlByb3RvLlYxYWxwaGExygIOUHJvdG9cVjFhbHBoYTHiAhpQcm90b1xWMWFscGhhMVxHUEJNZXRhZGF0YeoCD1Byb3RvOjpWMWFscGhhMWIGcHJvdG8z", [file_buf_validate_validate]);

/**
 * ThermalManagement represents the overall thermal management configuration for a server chassis
 *
 * @generated from message proto.v1alpha1.ThermalManagement
 */
export type ThermalManagement = Message<"proto.v1alpha1.ThermalManagement"> & {
  /**
   * Unique identifier for the thermal management instance
   *
   * @generated from field: string id = 1;
   */
  id: string;

  /**
   * Human-readable name for the thermal management instance
   *
   * @generated from field: string name = 2;
   */
  name: string;

  /**
   * List of thermal zones within the chassis
   *
   * @generated from field: repeated proto.v1alpha1.ThermalZone zones = 3;
   */
  zones: ThermalZone[];

  /**
   * Global thermal profile settings
   *
   * @generated from field: proto.v1alpha1.ThermalProfile profile = 4;
   */
  profile?: ThermalProfile;

  /**
   * Timestamp of the last update
   *
   * @generated from field: int64 last_update_timestamp = 5;
   */
  lastUpdateTimestamp: bigint;
};

/**
 * Describes the message proto.v1alpha1.ThermalManagement.
 * Use `create(ThermalManagementSchema)` to create a new message.
 */
export const ThermalManagementSchema: GenMessage<ThermalManagement> = /*@__PURE__*/
  messageDesc(file_schema_v1alpha1_thermal, 0);

/**
 * ThermalZone represents a specific zone within the chassis that has its own thermal control
 *
 * @generated from message proto.v1alpha1.ThermalZone
 */
export type ThermalZone = Message<"proto.v1alpha1.ThermalZone"> & {
  /**
   * Unique identifier for the thermal zone
   *
   * @generated from field: string id = 1;
   */
  id: string;

  /**
   * Human-readable name for the thermal zone
   *
   * @generated from field: string name = 2;
   */
  name: string;

  /**
   * List of sensors associated with this zone
   *
   * @generated from field: repeated string sensor_ids = 3;
   */
  sensorIds: string[];

  /**
   * List of cooling devices (fans, pumps) associated with this zone
   *
   * @generated from field: repeated string cooling_device_ids = 4;
   */
  coolingDeviceIds: string[];

  /**
   * Current temperature in the zone (aggregated from sensors)
   *
   * @generated from field: double current_temperature = 5;
   */
  currentTemperature: number;

  /**
   * Target temperature for the zone
   *
   * @generated from field: double target_temperature = 6;
   */
  targetTemperature: number;

  /**
   * PID controller settings for this zone
   *
   * @generated from field: proto.v1alpha1.PIDSettings pid_settings = 7;
   */
  pidSettings?: PIDSettings;

  /**
   * Status of the thermal zone
   *
   * @generated from field: proto.v1alpha1.ThermalZoneStatus status = 8;
   */
  status: ThermalZoneStatus;

  /**
   * Timestamp of the last update
   *
   * @generated from field: int64 last_update_timestamp = 9;
   */
  lastUpdateTimestamp: bigint;
};

/**
 * Describes the message proto.v1alpha1.ThermalZone.
 * Use `create(ThermalZoneSchema)` to create a new message.
 */
export const ThermalZoneSchema: GenMessage<ThermalZone> = /*@__PURE__*/
  messageDesc(file_schema_v1alpha1_thermal, 1);

/**
 * CoolingDevice represents a physical device used for thermal management
 *
 * @generated from message proto.v1alpha1.CoolingDevice
 */
export type CoolingDevice = Message<"proto.v1alpha1.CoolingDevice"> & {
  /**
   * Unique identifier for the cooling device
   *
   * @generated from field: string id = 1;
   */
  id: string;

  /**
   * Human-readable name for the cooling device
   *
   * @generated from field: string name = 2;
   */
  name: string;

  /**
   * Type of cooling device
   *
   * @generated from field: proto.v1alpha1.CoolingDeviceType type = 3;
   */
  type: CoolingDeviceType;

  /**
   * Current speed or power level (0-100%)
   *
   * @generated from field: double speed_percent = 4;
   */
  speedPercent: number;

  /**
   * Minimum allowed speed
   *
   * @generated from field: double min_speed_percent = 5;
   */
  minSpeedPercent: number;

  /**
   * Maximum allowed speed
   *
   * @generated from field: double max_speed_percent = 6;
   */
  maxSpeedPercent: number;

  /**
   * Status of the cooling device
   *
   * @generated from field: proto.v1alpha1.CoolingDeviceStatus status = 7;
   */
  status: CoolingDeviceStatus;

  /**
   * Physical location of the device
   *
   * @generated from field: string physical_location = 8;
   */
  physicalLocation: string;

  /**
   * Timestamp of the last update
   *
   * @generated from field: int64 last_update_timestamp = 9;
   */
  lastUpdateTimestamp: bigint;
};

/**
 * Describes the message proto.v1alpha1.CoolingDevice.
 * Use `create(CoolingDeviceSchema)` to create a new message.
 */
export const CoolingDeviceSchema: GenMessage<CoolingDevice> = /*@__PURE__*/
  messageDesc(file_schema_v1alpha1_thermal, 2);

/**
 * PIDSettings represents the parameters for PID control
 *
 * @generated from message proto.v1alpha1.PIDSettings
 */
export type PIDSettings = Message<"proto.v1alpha1.PIDSettings"> & {
  /**
   * Proportional gain
   *
   * @generated from field: double kp = 1;
   */
  kp: number;

  /**
   * Integral gain
   *
   * @generated from field: double ki = 2;
   */
  ki: number;

  /**
   * Derivative gain
   *
   * @generated from field: double kd = 3;
   */
  kd: number;

  /**
   * Sample time in seconds
   *
   * @generated from field: double sample_time = 4;
   */
  sampleTime: number;

  /**
   * Output limits (0-100% for fan speeds)
   *
   * @generated from field: double output_min = 5;
   */
  outputMin: number;

  /**
   * @generated from field: double output_max = 6;
   */
  outputMax: number;
};

/**
 * Describes the message proto.v1alpha1.PIDSettings.
 * Use `create(PIDSettingsSchema)` to create a new message.
 */
export const PIDSettingsSchema: GenMessage<PIDSettings> = /*@__PURE__*/
  messageDesc(file_schema_v1alpha1_thermal, 3);

/**
 * ThermalProfile represents predefined thermal management profiles
 *
 * @generated from message proto.v1alpha1.ThermalProfile
 */
export type ThermalProfile = Message<"proto.v1alpha1.ThermalProfile"> & {
  /**
   * Profile type
   *
   * @generated from field: proto.v1alpha1.ThermalProfileType type = 1;
   */
  type: ThermalProfileType;

  /**
   * Custom PID settings (only used when type is CUSTOM)
   *
   * @generated from field: proto.v1alpha1.PIDSettings custom_settings = 2;
   */
  customSettings?: PIDSettings;

  /**
   * Description of the profile
   *
   * @generated from field: string description = 3;
   */
  description: string;
};

/**
 * Describes the message proto.v1alpha1.ThermalProfile.
 * Use `create(ThermalProfileSchema)` to create a new message.
 */
export const ThermalProfileSchema: GenMessage<ThermalProfile> = /*@__PURE__*/
  messageDesc(file_schema_v1alpha1_thermal, 4);

/**
 * Request message for getting a thermal management configuration by ID
 *
 * @generated from message proto.v1alpha1.GetThermalManagementRequest
 */
export type GetThermalManagementRequest = Message<"proto.v1alpha1.GetThermalManagementRequest"> & {
  /**
   * @generated from field: string id = 1;
   */
  id: string;
};

/**
 * Describes the message proto.v1alpha1.GetThermalManagementRequest.
 * Use `create(GetThermalManagementRequestSchema)` to create a new message.
 */
export const GetThermalManagementRequestSchema: GenMessage<GetThermalManagementRequest> = /*@__PURE__*/
  messageDesc(file_schema_v1alpha1_thermal, 5);

/**
 * Response message for getting a thermal management configuration
 *
 * @generated from message proto.v1alpha1.GetThermalManagementResponse
 */
export type GetThermalManagementResponse = Message<"proto.v1alpha1.GetThermalManagementResponse"> & {
  /**
   * @generated from field: proto.v1alpha1.ThermalManagement thermal_management = 1;
   */
  thermalManagement?: ThermalManagement;
};

/**
 * Describes the message proto.v1alpha1.GetThermalManagementResponse.
 * Use `create(GetThermalManagementResponseSchema)` to create a new message.
 */
export const GetThermalManagementResponseSchema: GenMessage<GetThermalManagementResponse> = /*@__PURE__*/
  messageDesc(file_schema_v1alpha1_thermal, 6);

/**
 * Request message for listing thermal management configurations
 *
 * @generated from message proto.v1alpha1.ListThermalManagementRequest
 */
export type ListThermalManagementRequest = Message<"proto.v1alpha1.ListThermalManagementRequest"> & {
};

/**
 * Describes the message proto.v1alpha1.ListThermalManagementRequest.
 * Use `create(ListThermalManagementRequestSchema)` to create a new message.
 */
export const ListThermalManagementRequestSchema: GenMessage<ListThermalManagementRequest> = /*@__PURE__*/
  messageDesc(file_schema_v1alpha1_thermal, 7);

/**
 * Response message for listing thermal management configurations
 *
 * @generated from message proto.v1alpha1.ListThermalManagementResponse
 */
export type ListThermalManagementResponse = Message<"proto.v1alpha1.ListThermalManagementResponse"> & {
  /**
   * @generated from field: repeated proto.v1alpha1.ThermalManagement thermal_managements = 1;
   */
  thermalManagements: ThermalManagement[];
};

/**
 * Describes the message proto.v1alpha1.ListThermalManagementResponse.
 * Use `create(ListThermalManagementResponseSchema)` to create a new message.
 */
export const ListThermalManagementResponseSchema: GenMessage<ListThermalManagementResponse> = /*@__PURE__*/
  messageDesc(file_schema_v1alpha1_thermal, 8);

/**
 * Request message for getting a thermal zone by ID
 *
 * @generated from message proto.v1alpha1.GetThermalZoneRequest
 */
export type GetThermalZoneRequest = Message<"proto.v1alpha1.GetThermalZoneRequest"> & {
  /**
   * @generated from field: string id = 1;
   */
  id: string;
};

/**
 * Describes the message proto.v1alpha1.GetThermalZoneRequest.
 * Use `create(GetThermalZoneRequestSchema)` to create a new message.
 */
export const GetThermalZoneRequestSchema: GenMessage<GetThermalZoneRequest> = /*@__PURE__*/
  messageDesc(file_schema_v1alpha1_thermal, 9);

/**
 * Response message for getting a thermal zone
 *
 * @generated from message proto.v1alpha1.GetThermalZoneResponse
 */
export type GetThermalZoneResponse = Message<"proto.v1alpha1.GetThermalZoneResponse"> & {
  /**
   * @generated from field: proto.v1alpha1.ThermalZone thermal_zone = 1;
   */
  thermalZone?: ThermalZone;
};

/**
 * Describes the message proto.v1alpha1.GetThermalZoneResponse.
 * Use `create(GetThermalZoneResponseSchema)` to create a new message.
 */
export const GetThermalZoneResponseSchema: GenMessage<GetThermalZoneResponse> = /*@__PURE__*/
  messageDesc(file_schema_v1alpha1_thermal, 10);

/**
 * Request message for listing thermal zones with optional filtering
 *
 * @generated from message proto.v1alpha1.ListThermalZonesRequest
 */
export type ListThermalZonesRequest = Message<"proto.v1alpha1.ListThermalZonesRequest"> & {
  /**
   * @generated from field: proto.v1alpha1.ThermalZoneStatus status = 1;
   */
  status: ThermalZoneStatus;
};

/**
 * Describes the message proto.v1alpha1.ListThermalZonesRequest.
 * Use `create(ListThermalZonesRequestSchema)` to create a new message.
 */
export const ListThermalZonesRequestSchema: GenMessage<ListThermalZonesRequest> = /*@__PURE__*/
  messageDesc(file_schema_v1alpha1_thermal, 11);

/**
 * Response message for listing thermal zones
 *
 * @generated from message proto.v1alpha1.ListThermalZonesResponse
 */
export type ListThermalZonesResponse = Message<"proto.v1alpha1.ListThermalZonesResponse"> & {
  /**
   * @generated from field: repeated proto.v1alpha1.ThermalZone thermal_zones = 1;
   */
  thermalZones: ThermalZone[];
};

/**
 * Describes the message proto.v1alpha1.ListThermalZonesResponse.
 * Use `create(ListThermalZonesResponseSchema)` to create a new message.
 */
export const ListThermalZonesResponseSchema: GenMessage<ListThermalZonesResponse> = /*@__PURE__*/
  messageDesc(file_schema_v1alpha1_thermal, 12);

/**
 * Request message for getting a cooling device by ID
 *
 * @generated from message proto.v1alpha1.GetCoolingDeviceRequest
 */
export type GetCoolingDeviceRequest = Message<"proto.v1alpha1.GetCoolingDeviceRequest"> & {
  /**
   * @generated from field: string id = 1;
   */
  id: string;
};

/**
 * Describes the message proto.v1alpha1.GetCoolingDeviceRequest.
 * Use `create(GetCoolingDeviceRequestSchema)` to create a new message.
 */
export const GetCoolingDeviceRequestSchema: GenMessage<GetCoolingDeviceRequest> = /*@__PURE__*/
  messageDesc(file_schema_v1alpha1_thermal, 13);

/**
 * Response message for getting a cooling device
 *
 * @generated from message proto.v1alpha1.GetCoolingDeviceResponse
 */
export type GetCoolingDeviceResponse = Message<"proto.v1alpha1.GetCoolingDeviceResponse"> & {
  /**
   * @generated from field: proto.v1alpha1.CoolingDevice cooling_device = 1;
   */
  coolingDevice?: CoolingDevice;
};

/**
 * Describes the message proto.v1alpha1.GetCoolingDeviceResponse.
 * Use `create(GetCoolingDeviceResponseSchema)` to create a new message.
 */
export const GetCoolingDeviceResponseSchema: GenMessage<GetCoolingDeviceResponse> = /*@__PURE__*/
  messageDesc(file_schema_v1alpha1_thermal, 14);

/**
 * Request message for listing cooling devices with optional filtering
 *
 * @generated from message proto.v1alpha1.ListCoolingDevicesRequest
 */
export type ListCoolingDevicesRequest = Message<"proto.v1alpha1.ListCoolingDevicesRequest"> & {
  /**
   * @generated from field: proto.v1alpha1.CoolingDeviceType type = 1;
   */
  type: CoolingDeviceType;

  /**
   * @generated from field: proto.v1alpha1.CoolingDeviceStatus status = 2;
   */
  status: CoolingDeviceStatus;
};

/**
 * Describes the message proto.v1alpha1.ListCoolingDevicesRequest.
 * Use `create(ListCoolingDevicesRequestSchema)` to create a new message.
 */
export const ListCoolingDevicesRequestSchema: GenMessage<ListCoolingDevicesRequest> = /*@__PURE__*/
  messageDesc(file_schema_v1alpha1_thermal, 15);

/**
 * Response message for listing cooling devices
 *
 * @generated from message proto.v1alpha1.ListCoolingDevicesResponse
 */
export type ListCoolingDevicesResponse = Message<"proto.v1alpha1.ListCoolingDevicesResponse"> & {
  /**
   * @generated from field: repeated proto.v1alpha1.CoolingDevice cooling_devices = 1;
   */
  coolingDevices: CoolingDevice[];
};

/**
 * Describes the message proto.v1alpha1.ListCoolingDevicesResponse.
 * Use `create(ListCoolingDevicesResponseSchema)` to create a new message.
 */
export const ListCoolingDevicesResponseSchema: GenMessage<ListCoolingDevicesResponse> = /*@__PURE__*/
  messageDesc(file_schema_v1alpha1_thermal, 16);

/**
 * Enumerations
 *
 * @generated from enum proto.v1alpha1.ThermalZoneStatus
 */
export enum ThermalZoneStatus {
  /**
   * @generated from enum value: THERMAL_ZONE_STATUS_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: THERMAL_ZONE_STATUS_NORMAL = 1;
   */
  NORMAL = 1,

  /**
   * @generated from enum value: THERMAL_ZONE_STATUS_WARNING = 2;
   */
  WARNING = 2,

  /**
   * @generated from enum value: THERMAL_ZONE_STATUS_CRITICAL = 3;
   */
  CRITICAL = 3,

  /**
   * @generated from enum value: THERMAL_ZONE_STATUS_ERROR = 4;
   */
  ERROR = 4,
}

/**
 * Describes the enum proto.v1alpha1.ThermalZoneStatus.
 */
export const ThermalZoneStatusSchema: GenEnum<ThermalZoneStatus> = /*@__PURE__*/
  enumDesc(file_schema_v1alpha1_thermal, 0);

/**
 * @generated from enum proto.v1alpha1.CoolingDeviceType
 */
export enum CoolingDeviceType {
  /**
   * @generated from enum value: COOLING_DEVICE_TYPE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: COOLING_DEVICE_TYPE_FAN = 1;
   */
  FAN = 1,

  /**
   * @generated from enum value: COOLING_DEVICE_TYPE_WATER_PUMP = 2;
   */
  WATER_PUMP = 2,

  /**
   * @generated from enum value: COOLING_DEVICE_TYPE_HEAT_EXCHANGER = 3;
   */
  HEAT_EXCHANGER = 3,
}

/**
 * Describes the enum proto.v1alpha1.CoolingDeviceType.
 */
export const CoolingDeviceTypeSchema: GenEnum<CoolingDeviceType> = /*@__PURE__*/
  enumDesc(file_schema_v1alpha1_thermal, 1);

/**
 * @generated from enum proto.v1alpha1.CoolingDeviceStatus
 */
export enum CoolingDeviceStatus {
  /**
   * @generated from enum value: COOLING_DEVICE_STATUS_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: COOLING_DEVICE_STATUS_ENABLED = 1;
   */
  ENABLED = 1,

  /**
   * @generated from enum value: COOLING_DEVICE_STATUS_DISABLED = 2;
   */
  DISABLED = 2,

  /**
   * @generated from enum value: COOLING_DEVICE_STATUS_ERROR = 3;
   */
  ERROR = 3,

  /**
   * @generated from enum value: COOLING_DEVICE_STATUS_NOT_PRESENT = 4;
   */
  NOT_PRESENT = 4,
}

/**
 * Describes the enum proto.v1alpha1.CoolingDeviceStatus.
 */
export const CoolingDeviceStatusSchema: GenEnum<CoolingDeviceStatus> = /*@__PURE__*/
  enumDesc(file_schema_v1alpha1_thermal, 2);

/**
 * @generated from enum proto.v1alpha1.ThermalProfileType
 */
export enum ThermalProfileType {
  /**
   * @generated from enum value: THERMAL_PROFILE_TYPE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: THERMAL_PROFILE_TYPE_QUIET = 1;
   */
  QUIET = 1,

  /**
   * @generated from enum value: THERMAL_PROFILE_TYPE_BALANCED = 2;
   */
  BALANCED = 2,

  /**
   * @generated from enum value: THERMAL_PROFILE_TYPE_AGGRESSIVE = 3;
   */
  AGGRESSIVE = 3,

  /**
   * @generated from enum value: THERMAL_PROFILE_TYPE_CUSTOM = 4;
   */
  CUSTOM = 4,
}

/**
 * Describes the enum proto.v1alpha1.ThermalProfileType.
 */
export const ThermalProfileTypeSchema: GenEnum<ThermalProfileType> = /*@__PURE__*/
  enumDesc(file_schema_v1alpha1_thermal, 3);

/**
 * Service definition for thermal management operations
 *
 * @generated from service proto.v1alpha1.ThermalManagementService
 */
export const ThermalManagementService: GenService<{
  /**
   * Get a thermal management configuration by ID
   *
   * @generated from rpc proto.v1alpha1.ThermalManagementService.GetThermalManagement
   */
  getThermalManagement: {
    methodKind: "unary";
    input: typeof GetThermalManagementRequestSchema;
    output: typeof GetThermalManagementResponseSchema;
  },
  /**
   * List all thermal management configurations
   *
   * @generated from rpc proto.v1alpha1.ThermalManagementService.ListThermalManagement
   */
  listThermalManagement: {
    methodKind: "unary";
    input: typeof ListThermalManagementRequestSchema;
    output: typeof ListThermalManagementResponseSchema;
  },
}> = /*@__PURE__*/
  serviceDesc(file_schema_v1alpha1_thermal, 0);

/**
 * Service definition for thermal zone operations
 *
 * @generated from service proto.v1alpha1.ThermalZoneService
 */
export const ThermalZoneService: GenService<{
  /**
   * Get a thermal zone by ID
   *
   * @generated from rpc proto.v1alpha1.ThermalZoneService.GetThermalZone
   */
  getThermalZone: {
    methodKind: "unary";
    input: typeof GetThermalZoneRequestSchema;
    output: typeof GetThermalZoneResponseSchema;
  },
  /**
   * List all thermal zones with optional filtering
   *
   * @generated from rpc proto.v1alpha1.ThermalZoneService.ListThermalZones
   */
  listThermalZones: {
    methodKind: "unary";
    input: typeof ListThermalZonesRequestSchema;
    output: typeof ListThermalZonesResponseSchema;
  },
}> = /*@__PURE__*/
  serviceDesc(file_schema_v1alpha1_thermal, 1);

/**
 * Service definition for cooling device operations
 *
 * @generated from service proto.v1alpha1.CoolingDeviceService
 */
export const CoolingDeviceService: GenService<{
  /**
   * Get a cooling device by ID
   *
   * @generated from rpc proto.v1alpha1.CoolingDeviceService.GetCoolingDevice
   */
  getCoolingDevice: {
    methodKind: "unary";
    input: typeof GetCoolingDeviceRequestSchema;
    output: typeof GetCoolingDeviceResponseSchema;
  },
  /**
   * List all cooling devices with optional filtering
   *
   * @generated from rpc proto.v1alpha1.CoolingDeviceService.ListCoolingDevices
   */
  listCoolingDevices: {
    methodKind: "unary";
    input: typeof ListCoolingDevicesRequestSchema;
    output: typeof ListCoolingDevicesResponseSchema;
  },
}> = /*@__PURE__*/
  serviceDesc(file_schema_v1alpha1_thermal, 2);

