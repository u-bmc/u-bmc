// SPDX-License-Identifier: BSD-3-Clause

// @generated by protoc-gen-es v2.6.3 with parameter "target=ts"
// @generated from file schema/v1alpha1/thermal.proto (package schema.v1alpha1, syntax proto3)
/* eslint-disable */

import type { GenEnum, GenFile, GenMessage } from "@bufbuild/protobuf/codegenv2";
import { enumDesc, fileDesc, messageDesc } from "@bufbuild/protobuf/codegenv2";
import { file_buf_validate_validate } from "../../buf/validate/validate_pb";
import type { FieldMask, Timestamp } from "@bufbuild/protobuf/wkt";
import { file_google_protobuf_field_mask, file_google_protobuf_timestamp } from "@bufbuild/protobuf/wkt";
import type { Location } from "./location_pb";
import { file_schema_v1alpha1_location } from "./location_pb";
import type { Sensor } from "./sensor_pb";
import { file_schema_v1alpha1_sensor } from "./sensor_pb";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file schema/v1alpha1/thermal.proto.
 */
export const file_schema_v1alpha1_thermal: GenFile = /*@__PURE__*/
  fileDesc("", [file_buf_validate_validate, file_google_protobuf_field_mask, file_google_protobuf_timestamp, file_schema_v1alpha1_location, file_schema_v1alpha1_sensor]);

/**
 * @generated from message schema.v1alpha1.ThermalZone
 */
export type ThermalZone = Message<"schema.v1alpha1.ThermalZone"> & {
  /**
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * @generated from field: repeated string sensor_names = 2;
   */
  sensorNames: string[];

  /**
   * @generated from field: repeated string cooling_device_names = 3;
   */
  coolingDeviceNames: string[];

  /**
   * @generated from field: double current_temperature = 4;
   */
  currentTemperature: number;

  /**
   * @generated from field: optional double target_temperature = 5;
   */
  targetTemperature?: number;

  /**
   * @generated from field: optional schema.v1alpha1.PIDSettings pid_settings = 6;
   */
  pidSettings?: PIDSettings;

  /**
   * @generated from field: schema.v1alpha1.ThermalZoneStatus status = 7;
   */
  status: ThermalZoneStatus;

  /**
   * @generated from field: optional schema.v1alpha1.Location location = 8;
   */
  location?: Location;

  /**
   * @generated from field: optional google.protobuf.Timestamp last_updated = 9;
   */
  lastUpdated?: Timestamp;

  /**
   * @generated from field: map<string, string> custom_attributes = 10;
   */
  customAttributes: { [key: string]: string };
};

/**
 * Describes the message schema.v1alpha1.ThermalZone.
 * Use `create(ThermalZoneSchema)` to create a new message.
 */
export const ThermalZoneSchema: GenMessage<ThermalZone> = /*@__PURE__*/
  messageDesc(file_schema_v1alpha1_thermal, 0);

/**
 * @generated from message schema.v1alpha1.CoolingDevice
 */
export type CoolingDevice = Message<"schema.v1alpha1.CoolingDevice"> & {
  /**
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * @generated from field: optional schema.v1alpha1.CoolingDeviceType type = 2;
   */
  type?: CoolingDeviceType;

  /**
   * @generated from field: optional double cooling_power_percent = 3;
   */
  coolingPowerPercent?: number;

  /**
   * @generated from field: optional double min_cooling_power_percent = 4;
   */
  minCoolingPowerPercent?: number;

  /**
   * @generated from field: optional double max_cooling_power_percent = 5;
   */
  maxCoolingPowerPercent?: number;

  /**
   * @generated from field: repeated schema.v1alpha1.Sensor sensors = 6;
   */
  sensors: Sensor[];

  /**
   * @generated from field: optional schema.v1alpha1.CoolingDeviceStatus status = 7;
   */
  status?: CoolingDeviceStatus;

  /**
   * @generated from field: optional schema.v1alpha1.CoolingDeviceControlMode control_mode = 8;
   */
  controlMode?: CoolingDeviceControlMode;

  /**
   * @generated from field: optional schema.v1alpha1.Location location = 9;
   */
  location?: Location;

  /**
   * @generated from field: optional google.protobuf.Timestamp last_updated = 10;
   */
  lastUpdated?: Timestamp;

  /**
   * @generated from field: map<string, string> custom_attributes = 11;
   */
  customAttributes: { [key: string]: string };
};

/**
 * Describes the message schema.v1alpha1.CoolingDevice.
 * Use `create(CoolingDeviceSchema)` to create a new message.
 */
export const CoolingDeviceSchema: GenMessage<CoolingDevice> = /*@__PURE__*/
  messageDesc(file_schema_v1alpha1_thermal, 1);

/**
 * @generated from message schema.v1alpha1.ThermalProfile
 */
export type ThermalProfile = Message<"schema.v1alpha1.ThermalProfile"> & {
  /**
   * @generated from field: schema.v1alpha1.CoolingDeviceProfileType type = 1;
   */
  type: CoolingDeviceProfileType;

  /**
   * @generated from field: optional schema.v1alpha1.PIDSettings custom_settings = 2;
   */
  customSettings?: PIDSettings;

  /**
   * @generated from field: optional string description = 3;
   */
  description?: string;
};

/**
 * Describes the message schema.v1alpha1.ThermalProfile.
 * Use `create(ThermalProfileSchema)` to create a new message.
 */
export const ThermalProfileSchema: GenMessage<ThermalProfile> = /*@__PURE__*/
  messageDesc(file_schema_v1alpha1_thermal, 2);

/**
 * @generated from message schema.v1alpha1.PIDSettings
 */
export type PIDSettings = Message<"schema.v1alpha1.PIDSettings"> & {
  /**
   * @generated from field: double kp = 1;
   */
  kp: number;

  /**
   * @generated from field: double ki = 2;
   */
  ki: number;

  /**
   * @generated from field: double kd = 3;
   */
  kd: number;

  /**
   * @generated from field: double sample_time = 4;
   */
  sampleTime: number;

  /**
   * @generated from field: optional double output_min = 5;
   */
  outputMin?: number;

  /**
   * @generated from field: optional double output_max = 6;
   */
  outputMax?: number;
};

/**
 * Describes the message schema.v1alpha1.PIDSettings.
 * Use `create(PIDSettingsSchema)` to create a new message.
 */
export const PIDSettingsSchema: GenMessage<PIDSettings> = /*@__PURE__*/
  messageDesc(file_schema_v1alpha1_thermal, 3);

/**
 * @generated from message schema.v1alpha1.GetThermalZoneRequest
 */
export type GetThermalZoneRequest = Message<"schema.v1alpha1.GetThermalZoneRequest"> & {
  /**
   * @generated from oneof schema.v1alpha1.GetThermalZoneRequest.identifier
   */
  identifier: {
    /**
     * @generated from field: string name = 1;
     */
    value: string;
    case: "name";
  } | {
    /**
     * @generated from field: schema.v1alpha1.ThermalZoneStatus status = 2;
     */
    value: ThermalZoneStatus;
    case: "status";
  } | {
    /**
     * @generated from field: schema.v1alpha1.Location location = 3;
     */
    value: Location;
    case: "location";
  } | { case: undefined; value?: undefined };

  /**
   * @generated from field: google.protobuf.FieldMask field_mask = 4;
   */
  fieldMask?: FieldMask;
};

/**
 * Describes the message schema.v1alpha1.GetThermalZoneRequest.
 * Use `create(GetThermalZoneRequestSchema)` to create a new message.
 */
export const GetThermalZoneRequestSchema: GenMessage<GetThermalZoneRequest> = /*@__PURE__*/
  messageDesc(file_schema_v1alpha1_thermal, 4);

/**
 * @generated from message schema.v1alpha1.GetThermalZoneResponse
 */
export type GetThermalZoneResponse = Message<"schema.v1alpha1.GetThermalZoneResponse"> & {
  /**
   * @generated from field: repeated schema.v1alpha1.ThermalZone thermal_zones = 1;
   */
  thermalZones: ThermalZone[];
};

/**
 * Describes the message schema.v1alpha1.GetThermalZoneResponse.
 * Use `create(GetThermalZoneResponseSchema)` to create a new message.
 */
export const GetThermalZoneResponseSchema: GenMessage<GetThermalZoneResponse> = /*@__PURE__*/
  messageDesc(file_schema_v1alpha1_thermal, 5);

/**
 * @generated from message schema.v1alpha1.SetThermalZoneRequest
 */
export type SetThermalZoneRequest = Message<"schema.v1alpha1.SetThermalZoneRequest"> & {
  /**
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * @generated from field: optional double target_temperature = 2;
   */
  targetTemperature?: number;

  /**
   * @generated from field: optional schema.v1alpha1.PIDSettings pid_settings = 3;
   */
  pidSettings?: PIDSettings;

  /**
   * @generated from field: optional schema.v1alpha1.ThermalZoneStatus status = 4;
   */
  status?: ThermalZoneStatus;

  /**
   * @generated from field: google.protobuf.FieldMask field_mask = 5;
   */
  fieldMask?: FieldMask;
};

/**
 * Describes the message schema.v1alpha1.SetThermalZoneRequest.
 * Use `create(SetThermalZoneRequestSchema)` to create a new message.
 */
export const SetThermalZoneRequestSchema: GenMessage<SetThermalZoneRequest> = /*@__PURE__*/
  messageDesc(file_schema_v1alpha1_thermal, 6);

/**
 * @generated from message schema.v1alpha1.SetThermalZoneResponse
 */
export type SetThermalZoneResponse = Message<"schema.v1alpha1.SetThermalZoneResponse"> & {
  /**
   * @generated from field: schema.v1alpha1.ThermalZone thermal_zone = 1;
   */
  thermalZone?: ThermalZone;
};

/**
 * Describes the message schema.v1alpha1.SetThermalZoneResponse.
 * Use `create(SetThermalZoneResponseSchema)` to create a new message.
 */
export const SetThermalZoneResponseSchema: GenMessage<SetThermalZoneResponse> = /*@__PURE__*/
  messageDesc(file_schema_v1alpha1_thermal, 7);

/**
 * @generated from message schema.v1alpha1.ListThermalZonesRequest
 */
export type ListThermalZonesRequest = Message<"schema.v1alpha1.ListThermalZonesRequest"> & {
  /**
   * @generated from field: google.protobuf.FieldMask field_mask = 1;
   */
  fieldMask?: FieldMask;
};

/**
 * Describes the message schema.v1alpha1.ListThermalZonesRequest.
 * Use `create(ListThermalZonesRequestSchema)` to create a new message.
 */
export const ListThermalZonesRequestSchema: GenMessage<ListThermalZonesRequest> = /*@__PURE__*/
  messageDesc(file_schema_v1alpha1_thermal, 8);

/**
 * @generated from message schema.v1alpha1.ListThermalZonesResponse
 */
export type ListThermalZonesResponse = Message<"schema.v1alpha1.ListThermalZonesResponse"> & {
  /**
   * @generated from field: repeated schema.v1alpha1.ThermalZone thermal_zones = 1;
   */
  thermalZones: ThermalZone[];
};

/**
 * Describes the message schema.v1alpha1.ListThermalZonesResponse.
 * Use `create(ListThermalZonesResponseSchema)` to create a new message.
 */
export const ListThermalZonesResponseSchema: GenMessage<ListThermalZonesResponse> = /*@__PURE__*/
  messageDesc(file_schema_v1alpha1_thermal, 9);

/**
 * @generated from message schema.v1alpha1.ThermalEmergencyAlert
 */
export type ThermalEmergencyAlert = Message<"schema.v1alpha1.ThermalEmergencyAlert"> & {
  /**
   * @generated from field: string type = 1;
   */
  type: string;

  /**
   * @generated from field: optional string sensor_id = 2;
   */
  sensorId?: string;

  /**
   * @generated from field: optional string sensor_name = 3;
   */
  sensorName?: string;

  /**
   * @generated from field: optional string zone_name = 4;
   */
  zoneName?: string;

  /**
   * @generated from field: double temperature = 5;
   */
  temperature: number;

  /**
   * @generated from field: optional double threshold = 6;
   */
  threshold?: number;

  /**
   * @generated from field: string severity = 7;
   */
  severity: string;

  /**
   * @generated from field: optional string action = 8;
   */
  action?: string;

  /**
   * @generated from field: google.protobuf.Timestamp timestamp = 9;
   */
  timestamp?: Timestamp;

  /**
   * @generated from field: string message = 10;
   */
  message: string;
};

/**
 * Describes the message schema.v1alpha1.ThermalEmergencyAlert.
 * Use `create(ThermalEmergencyAlertSchema)` to create a new message.
 */
export const ThermalEmergencyAlertSchema: GenMessage<ThermalEmergencyAlert> = /*@__PURE__*/
  messageDesc(file_schema_v1alpha1_thermal, 10);

/**
 * @generated from message schema.v1alpha1.ThermalZoneTemperatureRequest
 */
export type ThermalZoneTemperatureRequest = Message<"schema.v1alpha1.ThermalZoneTemperatureRequest"> & {
  /**
   * @generated from field: repeated string zone_names = 1;
   */
  zoneNames: string[];

  /**
   * @generated from field: optional bool include_sensor_details = 2;
   */
  includeSensorDetails?: boolean;
};

/**
 * Describes the message schema.v1alpha1.ThermalZoneTemperatureRequest.
 * Use `create(ThermalZoneTemperatureRequestSchema)` to create a new message.
 */
export const ThermalZoneTemperatureRequestSchema: GenMessage<ThermalZoneTemperatureRequest> = /*@__PURE__*/
  messageDesc(file_schema_v1alpha1_thermal, 11);

/**
 * @generated from message schema.v1alpha1.ThermalZoneTemperatureResponse
 */
export type ThermalZoneTemperatureResponse = Message<"schema.v1alpha1.ThermalZoneTemperatureResponse"> & {
  /**
   * @generated from field: repeated schema.v1alpha1.ThermalZoneTemperature zone_temperatures = 1;
   */
  zoneTemperatures: ThermalZoneTemperature[];
};

/**
 * Describes the message schema.v1alpha1.ThermalZoneTemperatureResponse.
 * Use `create(ThermalZoneTemperatureResponseSchema)` to create a new message.
 */
export const ThermalZoneTemperatureResponseSchema: GenMessage<ThermalZoneTemperatureResponse> = /*@__PURE__*/
  messageDesc(file_schema_v1alpha1_thermal, 12);

/**
 * @generated from message schema.v1alpha1.ThermalZoneTemperature
 */
export type ThermalZoneTemperature = Message<"schema.v1alpha1.ThermalZoneTemperature"> & {
  /**
   * @generated from field: string zone_name = 1;
   */
  zoneName: string;

  /**
   * @generated from field: double current_temperature = 2;
   */
  currentTemperature: number;

  /**
   * @generated from field: optional double target_temperature = 3;
   */
  targetTemperature?: number;

  /**
   * @generated from field: repeated string contributing_sensor_ids = 4;
   */
  contributingSensorIds: string[];

  /**
   * @generated from field: google.protobuf.Timestamp last_updated = 5;
   */
  lastUpdated?: Timestamp;
};

/**
 * Describes the message schema.v1alpha1.ThermalZoneTemperature.
 * Use `create(ThermalZoneTemperatureSchema)` to create a new message.
 */
export const ThermalZoneTemperatureSchema: GenMessage<ThermalZoneTemperature> = /*@__PURE__*/
  messageDesc(file_schema_v1alpha1_thermal, 13);

/**
 * @generated from message schema.v1alpha1.GetCoolingDeviceRequest
 */
export type GetCoolingDeviceRequest = Message<"schema.v1alpha1.GetCoolingDeviceRequest"> & {
  /**
   * @generated from field: string name = 1;
   */
  name: string;
};

/**
 * Describes the message schema.v1alpha1.GetCoolingDeviceRequest.
 * Use `create(GetCoolingDeviceRequestSchema)` to create a new message.
 */
export const GetCoolingDeviceRequestSchema: GenMessage<GetCoolingDeviceRequest> = /*@__PURE__*/
  messageDesc(file_schema_v1alpha1_thermal, 14);

/**
 * @generated from message schema.v1alpha1.GetCoolingDeviceResponse
 */
export type GetCoolingDeviceResponse = Message<"schema.v1alpha1.GetCoolingDeviceResponse"> & {
  /**
   * @generated from field: schema.v1alpha1.CoolingDevice cooling_device = 1;
   */
  coolingDevice?: CoolingDevice;
};

/**
 * Describes the message schema.v1alpha1.GetCoolingDeviceResponse.
 * Use `create(GetCoolingDeviceResponseSchema)` to create a new message.
 */
export const GetCoolingDeviceResponseSchema: GenMessage<GetCoolingDeviceResponse> = /*@__PURE__*/
  messageDesc(file_schema_v1alpha1_thermal, 15);

/**
 * @generated from message schema.v1alpha1.SetCoolingDeviceRequest
 */
export type SetCoolingDeviceRequest = Message<"schema.v1alpha1.SetCoolingDeviceRequest"> & {
  /**
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * @generated from field: optional double power_percent = 2;
   */
  powerPercent?: number;
};

/**
 * Describes the message schema.v1alpha1.SetCoolingDeviceRequest.
 * Use `create(SetCoolingDeviceRequestSchema)` to create a new message.
 */
export const SetCoolingDeviceRequestSchema: GenMessage<SetCoolingDeviceRequest> = /*@__PURE__*/
  messageDesc(file_schema_v1alpha1_thermal, 16);

/**
 * @generated from message schema.v1alpha1.SetCoolingDeviceResponse
 */
export type SetCoolingDeviceResponse = Message<"schema.v1alpha1.SetCoolingDeviceResponse"> & {
  /**
   * @generated from field: schema.v1alpha1.CoolingDevice cooling_device = 1;
   */
  coolingDevice?: CoolingDevice;
};

/**
 * Describes the message schema.v1alpha1.SetCoolingDeviceResponse.
 * Use `create(SetCoolingDeviceResponseSchema)` to create a new message.
 */
export const SetCoolingDeviceResponseSchema: GenMessage<SetCoolingDeviceResponse> = /*@__PURE__*/
  messageDesc(file_schema_v1alpha1_thermal, 17);

/**
 * @generated from message schema.v1alpha1.ListCoolingDevicesRequest
 */
export type ListCoolingDevicesRequest = Message<"schema.v1alpha1.ListCoolingDevicesRequest"> & {
  /**
   * @generated from field: google.protobuf.FieldMask field_mask = 1;
   */
  fieldMask?: FieldMask;
};

/**
 * Describes the message schema.v1alpha1.ListCoolingDevicesRequest.
 * Use `create(ListCoolingDevicesRequestSchema)` to create a new message.
 */
export const ListCoolingDevicesRequestSchema: GenMessage<ListCoolingDevicesRequest> = /*@__PURE__*/
  messageDesc(file_schema_v1alpha1_thermal, 18);

/**
 * @generated from message schema.v1alpha1.ListCoolingDevicesResponse
 */
export type ListCoolingDevicesResponse = Message<"schema.v1alpha1.ListCoolingDevicesResponse"> & {
  /**
   * @generated from field: repeated schema.v1alpha1.CoolingDevice cooling_devices = 1;
   */
  coolingDevices: CoolingDevice[];
};

/**
 * Describes the message schema.v1alpha1.ListCoolingDevicesResponse.
 * Use `create(ListCoolingDevicesResponseSchema)` to create a new message.
 */
export const ListCoolingDevicesResponseSchema: GenMessage<ListCoolingDevicesResponse> = /*@__PURE__*/
  messageDesc(file_schema_v1alpha1_thermal, 19);

/**
 * @generated from message schema.v1alpha1.ThermalEventResponse
 */
export type ThermalEventResponse = Message<"schema.v1alpha1.ThermalEventResponse"> & {
  /**
   * @generated from field: string event_type = 1;
   */
  eventType: string;

  /**
   * @generated from field: string component_name = 2;
   */
  componentName: string;

  /**
   * @generated from field: string action = 3;
   */
  action: string;

  /**
   * @generated from field: bool success = 4;
   */
  success: boolean;

  /**
   * @generated from field: optional string error_message = 5;
   */
  errorMessage?: string;

  /**
   * @generated from field: string message = 6;
   */
  message: string;

  /**
   * @generated from field: google.protobuf.Timestamp timestamp = 7;
   */
  timestamp?: Timestamp;

  /**
   * @generated from field: map<string, string> additional_data = 8;
   */
  additionalData: { [key: string]: string };
};

/**
 * Describes the message schema.v1alpha1.ThermalEventResponse.
 * Use `create(ThermalEventResponseSchema)` to create a new message.
 */
export const ThermalEventResponseSchema: GenMessage<ThermalEventResponse> = /*@__PURE__*/
  messageDesc(file_schema_v1alpha1_thermal, 20);

/**
 * @generated from enum schema.v1alpha1.ThermalZoneStatus
 */
export enum ThermalZoneStatus {
  /**
   * @generated from enum value: THERMAL_ZONE_STATUS_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: THERMAL_ZONE_STATUS_NORMAL = 1;
   */
  NORMAL = 1,

  /**
   * @generated from enum value: THERMAL_ZONE_STATUS_WARNING = 2;
   */
  WARNING = 2,

  /**
   * @generated from enum value: THERMAL_ZONE_STATUS_CRITICAL = 3;
   */
  CRITICAL = 3,

  /**
   * @generated from enum value: THERMAL_ZONE_STATUS_ERROR = 4;
   */
  ERROR = 4,
}

/**
 * Describes the enum schema.v1alpha1.ThermalZoneStatus.
 */
export const ThermalZoneStatusSchema: GenEnum<ThermalZoneStatus> = /*@__PURE__*/
  enumDesc(file_schema_v1alpha1_thermal, 0);

/**
 * @generated from enum schema.v1alpha1.CoolingDeviceType
 */
export enum CoolingDeviceType {
  /**
   * @generated from enum value: COOLING_DEVICE_TYPE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: COOLING_DEVICE_TYPE_FAN = 1;
   */
  FAN = 1,

  /**
   * @generated from enum value: COOLING_DEVICE_TYPE_WATER_PUMP = 2;
   */
  WATER_PUMP = 2,

  /**
   * @generated from enum value: COOLING_DEVICE_TYPE_HEAT_EXCHANGER = 3;
   */
  HEAT_EXCHANGER = 3,

  /**
   * @generated from enum value: COOLING_DEVICE_TYPE_LIQUID_COOLER = 4;
   */
  LIQUID_COOLER = 4,

  /**
   * @generated from enum value: COOLING_DEVICE_TYPE_BLOWER = 5;
   */
  BLOWER = 5,
}

/**
 * Describes the enum schema.v1alpha1.CoolingDeviceType.
 */
export const CoolingDeviceTypeSchema: GenEnum<CoolingDeviceType> = /*@__PURE__*/
  enumDesc(file_schema_v1alpha1_thermal, 1);

/**
 * @generated from enum schema.v1alpha1.CoolingDeviceStatus
 */
export enum CoolingDeviceStatus {
  /**
   * @generated from enum value: COOLING_DEVICE_STATUS_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: COOLING_DEVICE_STATUS_ENABLED = 1;
   */
  ENABLED = 1,

  /**
   * @generated from enum value: COOLING_DEVICE_STATUS_DISABLED = 2;
   */
  DISABLED = 2,

  /**
   * @generated from enum value: COOLING_DEVICE_STATUS_NOT_PRESENT = 3;
   */
  NOT_PRESENT = 3,

  /**
   * @generated from enum value: COOLING_DEVICE_STATUS_ERROR = 4;
   */
  ERROR = 4,

  /**
   * @generated from enum value: COOLING_DEVICE_STATUS_UNKNOWN = 5;
   */
  UNKNOWN = 5,
}

/**
 * Describes the enum schema.v1alpha1.CoolingDeviceStatus.
 */
export const CoolingDeviceStatusSchema: GenEnum<CoolingDeviceStatus> = /*@__PURE__*/
  enumDesc(file_schema_v1alpha1_thermal, 2);

/**
 * @generated from enum schema.v1alpha1.CoolingDeviceControlMode
 */
export enum CoolingDeviceControlMode {
  /**
   * @generated from enum value: COOLING_DEVICE_CONTROL_MODE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: COOLING_DEVICE_CONTROL_MODE_AUTOMATIC = 1;
   */
  AUTOMATIC = 1,

  /**
   * @generated from enum value: COOLING_DEVICE_CONTROL_MODE_MANUAL = 2;
   */
  MANUAL = 2,

  /**
   * @generated from enum value: COOLING_DEVICE_CONTROL_MODE_PID = 3;
   */
  PID = 3,
}

/**
 * Describes the enum schema.v1alpha1.CoolingDeviceControlMode.
 */
export const CoolingDeviceControlModeSchema: GenEnum<CoolingDeviceControlMode> = /*@__PURE__*/
  enumDesc(file_schema_v1alpha1_thermal, 3);

/**
 * @generated from enum schema.v1alpha1.CoolingDeviceProfileType
 */
export enum CoolingDeviceProfileType {
  /**
   * @generated from enum value: COOLING_DEVICE_PROFILE_TYPE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: COOLING_DEVICE_PROFILE_TYPE_QUIET = 1;
   */
  QUIET = 1,

  /**
   * @generated from enum value: COOLING_DEVICE_PROFILE_TYPE_BALANCED = 2;
   */
  BALANCED = 2,

  /**
   * @generated from enum value: COOLING_DEVICE_PROFILE_TYPE_AGGRESSIVE = 3;
   */
  AGGRESSIVE = 3,

  /**
   * @generated from enum value: COOLING_DEVICE_PROFILE_TYPE_CUSTOM = 4;
   */
  CUSTOM = 4,
}

/**
 * Describes the enum schema.v1alpha1.CoolingDeviceProfileType.
 */
export const CoolingDeviceProfileTypeSchema: GenEnum<CoolingDeviceProfileType> = /*@__PURE__*/
  enumDesc(file_schema_v1alpha1_thermal, 4);

