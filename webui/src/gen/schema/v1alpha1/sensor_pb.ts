// SPDX-License-Identifier: BSD-3-Clause

// @generated by protoc-gen-es v2.6.3 with parameter "target=ts"
// @generated from file schema/v1alpha1/sensor.proto (package schema.v1alpha1, syntax proto3)
/* eslint-disable */

import type { GenEnum, GenFile, GenMessage, GenService } from "@bufbuild/protobuf/codegenv2";
import { enumDesc, fileDesc, messageDesc, serviceDesc } from "@bufbuild/protobuf/codegenv2";
import { file_buf_validate_validate } from "../../buf/validate/validate_pb";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file schema/v1alpha1/sensor.proto.
 */
export const file_schema_v1alpha1_sensor: GenFile = /*@__PURE__*/
  fileDesc("ChxzY2hlbWEvdjFhbHBoYTEvc2Vuc29yLnByb3RvEg9zY2hlbWEudjFhbHBoYTEiiQMKBlNlbnNvchITCgJpZBgBIAEoCUIHukgEcgIQARIVCgRuYW1lGAIgASgJQge6SARyAhABEi8KB2NvbnRleHQYAyABKA4yHi5zY2hlbWEudjFhbHBoYTEuU2Vuc29yQ29udGV4dBItCgZzdGF0dXMYBCABKA4yHS5zY2hlbWEudjFhbHBoYTEuU2Vuc29yU3RhdHVzEikKBHVuaXQYBSABKA4yGy5zY2hlbWEudjFhbHBoYTEuU2Vuc29yVW5pdBI+Cg5hbmFsb2dfcmVhZGluZxgGIAEoCzIkLnNjaGVtYS52MWFscGhhMS5BbmFsb2dTZW5zb3JSZWFkaW5nSAASQgoQZGlzY3JldGVfcmVhZGluZxgHIAEoCzImLnNjaGVtYS52MWFscGhhMS5EaXNjcmV0ZVNlbnNvclJlYWRpbmdIABIZChFwaHlzaWNhbF9sb2NhdGlvbhgIIAEoCRIeChZsYXN0X3JlYWRpbmdfdGltZXN0YW1wGAkgASgDQgkKB3JlYWRpbmciywEKE0FuYWxvZ1NlbnNvclJlYWRpbmcSDQoFdmFsdWUYASABKAESNAoQdXBwZXJfdGhyZXNob2xkcxgCIAEoCzIaLnNjaGVtYS52MWFscGhhMS5UaHJlc2hvbGQSNAoQbG93ZXJfdGhyZXNob2xkcxgDIAEoCzIaLnNjaGVtYS52MWFscGhhMS5UaHJlc2hvbGQSOQoQbWluX21heF9yZWNvcmRlZBgEIAEoCzIfLnNjaGVtYS52MWFscGhhMS5NaW5NYXhSZWNvcmRlZCJfChVEaXNjcmV0ZVNlbnNvclJlYWRpbmcSKwoFc3RhdGUYASABKA4yHC5zY2hlbWEudjFhbHBoYTEuU2Vuc29yU3RhdGUSGQoRc3RhdGVfZGVzY3JpcHRpb24YAiABKAkiLgoJVGhyZXNob2xkEg8KB3dhcm5pbmcYASABKAESEAoIY3JpdGljYWwYAiABKAEiZAoOTWluTWF4UmVjb3JkZWQSEQoJbWluX3ZhbHVlGAEgASgBEhEKCW1heF92YWx1ZRgCIAEoARIVCg1taW5fdGltZXN0YW1wGAMgASgDEhUKDW1heF90aW1lc3RhbXAYBCABKAMiJwoQR2V0U2Vuc29yUmVxdWVzdBITCgJpZBgBIAEoCUIHukgEcgIQASI8ChFHZXRTZW5zb3JSZXNwb25zZRInCgZzZW5zb3IYASABKAsyFy5zY2hlbWEudjFhbHBoYTEuU2Vuc29yInQKEkxpc3RTZW5zb3JzUmVxdWVzdBIvCgdjb250ZXh0GAEgASgOMh4uc2NoZW1hLnYxYWxwaGExLlNlbnNvckNvbnRleHQSLQoGc3RhdHVzGAIgASgOMh0uc2NoZW1hLnYxYWxwaGExLlNlbnNvclN0YXR1cyI/ChNMaXN0U2Vuc29yc1Jlc3BvbnNlEigKB3NlbnNvcnMYASADKAsyFy5zY2hlbWEudjFhbHBoYTEuU2Vuc29yKqsCCg1TZW5zb3JDb250ZXh0Eh4KGlNFTlNPUl9DT05URVhUX1VOU1BFQ0lGSUVEEAASHgoaU0VOU09SX0NPTlRFWFRfVEVNUEVSQVRVUkUQARIaChZTRU5TT1JfQ09OVEVYVF9WT0xUQUdFEAISGgoWU0VOU09SX0NPTlRFWFRfQ1VSUkVOVBADEhYKElNFTlNPUl9DT05URVhUX0ZBThAEEhgKFFNFTlNPUl9DT05URVhUX1BPV0VSEAUSGQoVU0VOU09SX0NPTlRFWFRfRU5FUkdZEAYSGwoXU0VOU09SX0NPTlRFWFRfUFJFU1NVUkUQBxIbChdTRU5TT1JfQ09OVEVYVF9IVU1JRElUWRAIEhsKF1NFTlNPUl9DT05URVhUX0FMVElUVURFEAkqtwEKDFNlbnNvclN0YXR1cxIdChlTRU5TT1JfU1RBVFVTX1VOU1BFQ0lGSUVEEAASGQoVU0VOU09SX1NUQVRVU19FTkFCTEVEEAESGgoWU0VOU09SX1NUQVRVU19ESVNBQkxFRBACEhcKE1NFTlNPUl9TVEFUVVNfRVJST1IQAxIdChlTRU5TT1JfU1RBVFVTX05PVF9QUkVTRU5UEAQSGQoVU0VOU09SX1NUQVRVU19VTktOT1dOEAUqsAIKClNlbnNvclVuaXQSGwoXU0VOU09SX1VOSVRfVU5TUEVDSUZJRUQQABIXChNTRU5TT1JfVU5JVF9DRUxTSVVTEAESGgoWU0VOU09SX1VOSVRfRkFIUkVOSEVJVBACEhYKElNFTlNPUl9VTklUX0tFTFZJThADEhUKEVNFTlNPUl9VTklUX1ZPTFRTEAQSFAoQU0VOU09SX1VOSVRfQU1QUxAFEhUKEVNFTlNPUl9VTklUX1dBVFRTEAYSFgoSU0VOU09SX1VOSVRfSk9VTEVTEAcSFwoTU0VOU09SX1VOSVRfUEFTQ0FMUxAIEhcKE1NFTlNPUl9VTklUX1BFUkNFTlQQCRITCg9TRU5TT1JfVU5JVF9SUE0QChIVChFTRU5TT1JfVU5JVF9IRVJUWhALKssBCgtTZW5zb3JTdGF0ZRIcChhTRU5TT1JfU1RBVEVfVU5TUEVDSUZJRUQQABIXChNTRU5TT1JfU1RBVEVfTk9STUFMEAESFgoSU0VOU09SX1NUQVRFX0ZBVUxUEAISGAoUU0VOU09SX1NUQVRFX1dBUk5JTkcQAxIZChVTRU5TT1JfU1RBVEVfQ1JJVElDQUwQBBIYChRTRU5TT1JfU1RBVEVfVU5LTk9XThAFEh4KGlNFTlNPUl9TVEFURV9OT1RfQVZBSUxBQkxFEAYywQEKDVNlbnNvclNlcnZpY2USVAoJR2V0U2Vuc29yEiEuc2NoZW1hLnYxYWxwaGExLkdldFNlbnNvclJlcXVlc3QaIi5zY2hlbWEudjFhbHBoYTEuR2V0U2Vuc29yUmVzcG9uc2UiABJaCgtMaXN0U2Vuc29ycxIjLnNjaGVtYS52MWFscGhhMS5MaXN0U2Vuc29yc1JlcXVlc3QaJC5zY2hlbWEudjFhbHBoYTEuTGlzdFNlbnNvcnNSZXNwb25zZSIAQr4BChNjb20uc2NoZW1hLnYxYWxwaGExQgtTZW5zb3JQcm90b1ABWj1naXRodWIuY29tL3UtYm1jL3UtYm1jL2FwaS9nZW4vc2NoZW1hL3YxYWxwaGExO3NjaGVtYXYxYWxwaGExogIDU1hYqgIPU2NoZW1hLlYxYWxwaGExygIPU2NoZW1hXFYxYWxwaGEx4gIbU2NoZW1hXFYxYWxwaGExXEdQQk1ldGFkYXRh6gIQU2NoZW1hOjpWMWFscGhhMWIGcHJvdG8z", [file_buf_validate_validate]);

/**
 * Sensor represents a physical or virtual sensor device
 *
 * @generated from message schema.v1alpha1.Sensor
 */
export type Sensor = Message<"schema.v1alpha1.Sensor"> & {
  /**
   * Unique identifier for the sensor
   *
   * @generated from field: string id = 1;
   */
  id: string;

  /**
   * Human-readable name of the sensor
   *
   * @generated from field: string name = 2;
   */
  name: string;

  /**
   * Physical context of the sensor (e.g., Temperature, Voltage, Fan)
   *
   * @generated from field: schema.v1alpha1.SensorContext context = 3;
   */
  context: SensorContext;

  /**
   * Current status of the sensor
   *
   * @generated from field: schema.v1alpha1.SensorStatus status = 4;
   */
  status: SensorStatus;

  /**
   * Unit of measurement for the sensor readings
   *
   * @generated from field: schema.v1alpha1.SensorUnit unit = 5;
   */
  unit: SensorUnit;

  /**
   * Sensor reading information - either analog with thresholds or discrete state
   *
   * @generated from oneof schema.v1alpha1.Sensor.reading
   */
  reading: {
    /**
     * Analog sensor reading with thresholds
     *
     * @generated from field: schema.v1alpha1.AnalogSensorReading analog_reading = 6;
     */
    value: AnalogSensorReading;
    case: "analogReading";
  } | {
    /**
     * Discrete sensor reading with state
     *
     * @generated from field: schema.v1alpha1.DiscreteSensorReading discrete_reading = 7;
     */
    value: DiscreteSensorReading;
    case: "discreteReading";
  } | { case: undefined; value?: undefined };

  /**
   * Physical location of the sensor
   *
   * @generated from field: string physical_location = 8;
   */
  physicalLocation: string;

  /**
   * Timestamp of the last reading
   *
   * @generated from field: int64 last_reading_timestamp = 9;
   */
  lastReadingTimestamp: bigint;
};

/**
 * Describes the message schema.v1alpha1.Sensor.
 * Use `create(SensorSchema)` to create a new message.
 */
export const SensorSchema: GenMessage<Sensor> = /*@__PURE__*/
  messageDesc(file_schema_v1alpha1_sensor, 0);

/**
 * AnalogSensorReading represents a sensor with continuous numerical readings and thresholds
 *
 * @generated from message schema.v1alpha1.AnalogSensorReading
 */
export type AnalogSensorReading = Message<"schema.v1alpha1.AnalogSensorReading"> & {
  /**
   * Current measured value
   *
   * @generated from field: double value = 1;
   */
  value: number;

  /**
   * Upper threshold values for warning and critical levels
   *
   * @generated from field: schema.v1alpha1.Threshold upper_thresholds = 2;
   */
  upperThresholds?: Threshold;

  /**
   * Lower threshold values for warning and critical levels
   *
   * @generated from field: schema.v1alpha1.Threshold lower_thresholds = 3;
   */
  lowerThresholds?: Threshold;

  /**
   * Minimum and maximum values recorded
   *
   * @generated from field: schema.v1alpha1.MinMaxRecorded min_max_recorded = 4;
   */
  minMaxRecorded?: MinMaxRecorded;
};

/**
 * Describes the message schema.v1alpha1.AnalogSensorReading.
 * Use `create(AnalogSensorReadingSchema)` to create a new message.
 */
export const AnalogSensorReadingSchema: GenMessage<AnalogSensorReading> = /*@__PURE__*/
  messageDesc(file_schema_v1alpha1_sensor, 1);

/**
 * DiscreteSensorReading represents a sensor with discrete states rather than numerical values
 *
 * @generated from message schema.v1alpha1.DiscreteSensorReading
 */
export type DiscreteSensorReading = Message<"schema.v1alpha1.DiscreteSensorReading"> & {
  /**
   * Current state of the sensor
   *
   * @generated from field: schema.v1alpha1.SensorState state = 1;
   */
  state: SensorState;

  /**
   * Additional state information or description
   *
   * @generated from field: string state_description = 2;
   */
  stateDescription: string;
};

/**
 * Describes the message schema.v1alpha1.DiscreteSensorReading.
 * Use `create(DiscreteSensorReadingSchema)` to create a new message.
 */
export const DiscreteSensorReadingSchema: GenMessage<DiscreteSensorReading> = /*@__PURE__*/
  messageDesc(file_schema_v1alpha1_sensor, 2);

/**
 * Threshold defines warning and critical thresholds for sensor readings
 *
 * @generated from message schema.v1alpha1.Threshold
 */
export type Threshold = Message<"schema.v1alpha1.Threshold"> & {
  /**
   * Warning level threshold
   *
   * @generated from field: double warning = 1;
   */
  warning: number;

  /**
   * Critical level threshold
   *
   * @generated from field: double critical = 2;
   */
  critical: number;
};

/**
 * Describes the message schema.v1alpha1.Threshold.
 * Use `create(ThresholdSchema)` to create a new message.
 */
export const ThresholdSchema: GenMessage<Threshold> = /*@__PURE__*/
  messageDesc(file_schema_v1alpha1_sensor, 3);

/**
 * MinMaxRecorded tracks the minimum and maximum values recorded by the sensor
 *
 * @generated from message schema.v1alpha1.MinMaxRecorded
 */
export type MinMaxRecorded = Message<"schema.v1alpha1.MinMaxRecorded"> & {
  /**
   * Minimum value recorded
   *
   * @generated from field: double min_value = 1;
   */
  minValue: number;

  /**
   * Maximum value recorded
   *
   * @generated from field: double max_value = 2;
   */
  maxValue: number;

  /**
   * Timestamp when minimum value was recorded
   *
   * @generated from field: int64 min_timestamp = 3;
   */
  minTimestamp: bigint;

  /**
   * Timestamp when maximum value was recorded
   *
   * @generated from field: int64 max_timestamp = 4;
   */
  maxTimestamp: bigint;
};

/**
 * Describes the message schema.v1alpha1.MinMaxRecorded.
 * Use `create(MinMaxRecordedSchema)` to create a new message.
 */
export const MinMaxRecordedSchema: GenMessage<MinMaxRecorded> = /*@__PURE__*/
  messageDesc(file_schema_v1alpha1_sensor, 4);

/**
 * Request message for getting a single sensor by ID
 *
 * @generated from message schema.v1alpha1.GetSensorRequest
 */
export type GetSensorRequest = Message<"schema.v1alpha1.GetSensorRequest"> & {
  /**
   * @generated from field: string id = 1;
   */
  id: string;
};

/**
 * Describes the message schema.v1alpha1.GetSensorRequest.
 * Use `create(GetSensorRequestSchema)` to create a new message.
 */
export const GetSensorRequestSchema: GenMessage<GetSensorRequest> = /*@__PURE__*/
  messageDesc(file_schema_v1alpha1_sensor, 5);

/**
 * Response message for getting a single sensor
 *
 * @generated from message schema.v1alpha1.GetSensorResponse
 */
export type GetSensorResponse = Message<"schema.v1alpha1.GetSensorResponse"> & {
  /**
   * @generated from field: schema.v1alpha1.Sensor sensor = 1;
   */
  sensor?: Sensor;
};

/**
 * Describes the message schema.v1alpha1.GetSensorResponse.
 * Use `create(GetSensorResponseSchema)` to create a new message.
 */
export const GetSensorResponseSchema: GenMessage<GetSensorResponse> = /*@__PURE__*/
  messageDesc(file_schema_v1alpha1_sensor, 6);

/**
 * Request message for listing sensors with optional filtering
 *
 * @generated from message schema.v1alpha1.ListSensorsRequest
 */
export type ListSensorsRequest = Message<"schema.v1alpha1.ListSensorsRequest"> & {
  /**
   * Optional filter by sensor context
   *
   * @generated from field: schema.v1alpha1.SensorContext context = 1;
   */
  context: SensorContext;

  /**
   * Optional filter by sensor status
   *
   * @generated from field: schema.v1alpha1.SensorStatus status = 2;
   */
  status: SensorStatus;
};

/**
 * Describes the message schema.v1alpha1.ListSensorsRequest.
 * Use `create(ListSensorsRequestSchema)` to create a new message.
 */
export const ListSensorsRequestSchema: GenMessage<ListSensorsRequest> = /*@__PURE__*/
  messageDesc(file_schema_v1alpha1_sensor, 7);

/**
 * Response message for listing sensors
 *
 * @generated from message schema.v1alpha1.ListSensorsResponse
 */
export type ListSensorsResponse = Message<"schema.v1alpha1.ListSensorsResponse"> & {
  /**
   * @generated from field: repeated schema.v1alpha1.Sensor sensors = 1;
   */
  sensors: Sensor[];
};

/**
 * Describes the message schema.v1alpha1.ListSensorsResponse.
 * Use `create(ListSensorsResponseSchema)` to create a new message.
 */
export const ListSensorsResponseSchema: GenMessage<ListSensorsResponse> = /*@__PURE__*/
  messageDesc(file_schema_v1alpha1_sensor, 8);

/**
 * SensorContext defines the physical context of the sensor
 *
 * @generated from enum schema.v1alpha1.SensorContext
 */
export enum SensorContext {
  /**
   * @generated from enum value: SENSOR_CONTEXT_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: SENSOR_CONTEXT_TEMPERATURE = 1;
   */
  TEMPERATURE = 1,

  /**
   * @generated from enum value: SENSOR_CONTEXT_VOLTAGE = 2;
   */
  VOLTAGE = 2,

  /**
   * @generated from enum value: SENSOR_CONTEXT_CURRENT = 3;
   */
  CURRENT = 3,

  /**
   * @generated from enum value: SENSOR_CONTEXT_FAN = 4;
   */
  FAN = 4,

  /**
   * @generated from enum value: SENSOR_CONTEXT_POWER = 5;
   */
  POWER = 5,

  /**
   * @generated from enum value: SENSOR_CONTEXT_ENERGY = 6;
   */
  ENERGY = 6,

  /**
   * @generated from enum value: SENSOR_CONTEXT_PRESSURE = 7;
   */
  PRESSURE = 7,

  /**
   * @generated from enum value: SENSOR_CONTEXT_HUMIDITY = 8;
   */
  HUMIDITY = 8,

  /**
   * @generated from enum value: SENSOR_CONTEXT_ALTITUDE = 9;
   */
  ALTITUDE = 9,
}

/**
 * Describes the enum schema.v1alpha1.SensorContext.
 */
export const SensorContextSchema: GenEnum<SensorContext> = /*@__PURE__*/
  enumDesc(file_schema_v1alpha1_sensor, 0);

/**
 * SensorStatus represents the operational status of the sensor
 *
 * @generated from enum schema.v1alpha1.SensorStatus
 */
export enum SensorStatus {
  /**
   * @generated from enum value: SENSOR_STATUS_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: SENSOR_STATUS_ENABLED = 1;
   */
  ENABLED = 1,

  /**
   * @generated from enum value: SENSOR_STATUS_DISABLED = 2;
   */
  DISABLED = 2,

  /**
   * @generated from enum value: SENSOR_STATUS_ERROR = 3;
   */
  ERROR = 3,

  /**
   * @generated from enum value: SENSOR_STATUS_NOT_PRESENT = 4;
   */
  NOT_PRESENT = 4,

  /**
   * @generated from enum value: SENSOR_STATUS_UNKNOWN = 5;
   */
  UNKNOWN = 5,
}

/**
 * Describes the enum schema.v1alpha1.SensorStatus.
 */
export const SensorStatusSchema: GenEnum<SensorStatus> = /*@__PURE__*/
  enumDesc(file_schema_v1alpha1_sensor, 1);

/**
 * SensorUnit defines the unit of measurement for sensor readings
 *
 * @generated from enum schema.v1alpha1.SensorUnit
 */
export enum SensorUnit {
  /**
   * @generated from enum value: SENSOR_UNIT_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: SENSOR_UNIT_CELSIUS = 1;
   */
  CELSIUS = 1,

  /**
   * @generated from enum value: SENSOR_UNIT_FAHRENHEIT = 2;
   */
  FAHRENHEIT = 2,

  /**
   * @generated from enum value: SENSOR_UNIT_KELVIN = 3;
   */
  KELVIN = 3,

  /**
   * @generated from enum value: SENSOR_UNIT_VOLTS = 4;
   */
  VOLTS = 4,

  /**
   * @generated from enum value: SENSOR_UNIT_AMPS = 5;
   */
  AMPS = 5,

  /**
   * @generated from enum value: SENSOR_UNIT_WATTS = 6;
   */
  WATTS = 6,

  /**
   * @generated from enum value: SENSOR_UNIT_JOULES = 7;
   */
  JOULES = 7,

  /**
   * @generated from enum value: SENSOR_UNIT_PASCALS = 8;
   */
  PASCALS = 8,

  /**
   * @generated from enum value: SENSOR_UNIT_PERCENT = 9;
   */
  PERCENT = 9,

  /**
   * @generated from enum value: SENSOR_UNIT_RPM = 10;
   */
  RPM = 10,

  /**
   * @generated from enum value: SENSOR_UNIT_HERTZ = 11;
   */
  HERTZ = 11,
}

/**
 * Describes the enum schema.v1alpha1.SensorUnit.
 */
export const SensorUnitSchema: GenEnum<SensorUnit> = /*@__PURE__*/
  enumDesc(file_schema_v1alpha1_sensor, 2);

/**
 * SensorState represents the discrete states a sensor can be in
 *
 * @generated from enum schema.v1alpha1.SensorState
 */
export enum SensorState {
  /**
   * @generated from enum value: SENSOR_STATE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: SENSOR_STATE_NORMAL = 1;
   */
  NORMAL = 1,

  /**
   * @generated from enum value: SENSOR_STATE_FAULT = 2;
   */
  FAULT = 2,

  /**
   * @generated from enum value: SENSOR_STATE_WARNING = 3;
   */
  WARNING = 3,

  /**
   * @generated from enum value: SENSOR_STATE_CRITICAL = 4;
   */
  CRITICAL = 4,

  /**
   * @generated from enum value: SENSOR_STATE_UNKNOWN = 5;
   */
  UNKNOWN = 5,

  /**
   * @generated from enum value: SENSOR_STATE_NOT_AVAILABLE = 6;
   */
  NOT_AVAILABLE = 6,
}

/**
 * Describes the enum schema.v1alpha1.SensorState.
 */
export const SensorStateSchema: GenEnum<SensorState> = /*@__PURE__*/
  enumDesc(file_schema_v1alpha1_sensor, 3);

/**
 * Service definition for sensor operations
 *
 * @generated from service schema.v1alpha1.SensorService
 */
export const SensorService: GenService<{
  /**
   * Get a sensor by ID
   *
   * @generated from rpc schema.v1alpha1.SensorService.GetSensor
   */
  getSensor: {
    methodKind: "unary";
    input: typeof GetSensorRequestSchema;
    output: typeof GetSensorResponseSchema;
  },
  /**
   * List all sensors with optional filtering
   *
   * @generated from rpc schema.v1alpha1.SensorService.ListSensors
   */
  listSensors: {
    methodKind: "unary";
    input: typeof ListSensorsRequestSchema;
    output: typeof ListSensorsResponseSchema;
  },
}> = /*@__PURE__*/
  serviceDesc(file_schema_v1alpha1_sensor, 0);

