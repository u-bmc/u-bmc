version: '3'

tasks:
  build:
    cmds:
      - task: empty
      - task: fit
      - task: bootloader
      - task: rootfs
      - task: ubinize
      - task: export
  empty:
    dir: image
    cmds:
      - dd if=/dev/zero of=flash.img bs={{.Image.FlashSize}} count=1 seek=0
  fit:
    dir: image
    cmds:
      - cp ../kernel/src/arch/{{.Arch}}/boot/zImage .
      - cp ../kernel/src/arch/{{.Arch}}/boot/dts/{{.Vendor}}/u-bmc.dtb .
      - dtc -p 0x1000 -I dtb -O dtb -o u-boot-padded.dtb ../bootloader/src/u-boot.dtb
      - mkimage -D "-I dts -O dtb -p 0x2000" -F -k ../../../../keys -K u-boot-padded.dtb -f fitImage.its -r fitImage
      - cat ../bootloader/src/u-boot.bin u-boot-padded.dtb >> u-boot.bin
      - mkdir -p bootfs
      - cp -v fitImage bootfs/
  bootloader:
    dir: image
    cmds:
      - dd if=u-boot.bin of=flash.img bs=1k seek={{.Image.BootloaderOffset}} conv=notrunc
  rootfs:
    dir: image
    cmds:
      - mkfs.ubifs --verbose --compr=none --root=bootfs --reserved=0 --min-io-size=1 --leb-size=65408 --max-leb-cnt=256 --output=bootfs.ubifs
      - mkfs.ubifs --verbose --compr=none --root=../rootfs --reserved=0 --min-io-size=1 --leb-size=65408 --max-leb-cnt=192 --output=rootfs.ubifs
  ubinize:
    dir: image
    cmds:
      - ubinize --verbose --min-io-size=1 --peb-size=64KiB --output=rootfs.img flash_layout.ini
      - dd if=rootfs.img of=flash.img bs=1k seek={{.Image.RootfsOffset}} conv=notrunc
  export:
    dir: image
    cmds:
      - cp -v flash.img ../
