// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: schema/v1alpha1/sensor.proto

package schemav1alpha1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Sensor with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Sensor) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Sensor with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in SensorMultiError, or nil if none found.
func (m *Sensor) ValidateAll() error {
	return m.validate(true)
}

func (m *Sensor) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Context

	// no validation rules for Status

	// no validation rules for Unit

	// no validation rules for PhysicalLocation

	// no validation rules for LastReadingTimestamp

	switch v := m.Reading.(type) {
	case *Sensor_AnalogReading:
		if v == nil {
			err := SensorValidationError{
				field:  "Reading",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetAnalogReading()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SensorValidationError{
						field:  "AnalogReading",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SensorValidationError{
						field:  "AnalogReading",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetAnalogReading()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SensorValidationError{
					field:  "AnalogReading",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Sensor_DiscreteReading:
		if v == nil {
			err := SensorValidationError{
				field:  "Reading",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetDiscreteReading()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SensorValidationError{
						field:  "DiscreteReading",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SensorValidationError{
						field:  "DiscreteReading",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetDiscreteReading()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SensorValidationError{
					field:  "DiscreteReading",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return SensorMultiError(errors)
	}

	return nil
}

// SensorMultiError is an error wrapping multiple validation errors returned by
// Sensor.ValidateAll() if the designated constraints aren't met.
type SensorMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SensorMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SensorMultiError) AllErrors() []error { return m }

// SensorValidationError is the validation error returned by Sensor.Validate if
// the designated constraints aren't met.
type SensorValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SensorValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SensorValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SensorValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SensorValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SensorValidationError) ErrorName() string { return "SensorValidationError" }

// Error satisfies the builtin error interface
func (e SensorValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSensor.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SensorValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SensorValidationError{}

// Validate checks the field values on AnalogSensorReading with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AnalogSensorReading) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AnalogSensorReading with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AnalogSensorReadingMultiError, or nil if none found.
func (m *AnalogSensorReading) ValidateAll() error {
	return m.validate(true)
}

func (m *AnalogSensorReading) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Value

	if all {
		switch v := interface{}(m.GetUpperThresholds()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AnalogSensorReadingValidationError{
					field:  "UpperThresholds",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AnalogSensorReadingValidationError{
					field:  "UpperThresholds",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpperThresholds()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AnalogSensorReadingValidationError{
				field:  "UpperThresholds",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetLowerThresholds()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AnalogSensorReadingValidationError{
					field:  "LowerThresholds",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AnalogSensorReadingValidationError{
					field:  "LowerThresholds",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetLowerThresholds()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AnalogSensorReadingValidationError{
				field:  "LowerThresholds",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetMinMaxRecorded()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AnalogSensorReadingValidationError{
					field:  "MinMaxRecorded",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AnalogSensorReadingValidationError{
					field:  "MinMaxRecorded",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMinMaxRecorded()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AnalogSensorReadingValidationError{
				field:  "MinMaxRecorded",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return AnalogSensorReadingMultiError(errors)
	}

	return nil
}

// AnalogSensorReadingMultiError is an error wrapping multiple validation
// errors returned by AnalogSensorReading.ValidateAll() if the designated
// constraints aren't met.
type AnalogSensorReadingMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AnalogSensorReadingMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AnalogSensorReadingMultiError) AllErrors() []error { return m }

// AnalogSensorReadingValidationError is the validation error returned by
// AnalogSensorReading.Validate if the designated constraints aren't met.
type AnalogSensorReadingValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AnalogSensorReadingValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AnalogSensorReadingValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AnalogSensorReadingValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AnalogSensorReadingValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AnalogSensorReadingValidationError) ErrorName() string {
	return "AnalogSensorReadingValidationError"
}

// Error satisfies the builtin error interface
func (e AnalogSensorReadingValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAnalogSensorReading.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AnalogSensorReadingValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AnalogSensorReadingValidationError{}

// Validate checks the field values on DiscreteSensorReading with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DiscreteSensorReading) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DiscreteSensorReading with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DiscreteSensorReadingMultiError, or nil if none found.
func (m *DiscreteSensorReading) ValidateAll() error {
	return m.validate(true)
}

func (m *DiscreteSensorReading) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for State

	// no validation rules for StateDescription

	if len(errors) > 0 {
		return DiscreteSensorReadingMultiError(errors)
	}

	return nil
}

// DiscreteSensorReadingMultiError is an error wrapping multiple validation
// errors returned by DiscreteSensorReading.ValidateAll() if the designated
// constraints aren't met.
type DiscreteSensorReadingMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DiscreteSensorReadingMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DiscreteSensorReadingMultiError) AllErrors() []error { return m }

// DiscreteSensorReadingValidationError is the validation error returned by
// DiscreteSensorReading.Validate if the designated constraints aren't met.
type DiscreteSensorReadingValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DiscreteSensorReadingValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DiscreteSensorReadingValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DiscreteSensorReadingValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DiscreteSensorReadingValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DiscreteSensorReadingValidationError) ErrorName() string {
	return "DiscreteSensorReadingValidationError"
}

// Error satisfies the builtin error interface
func (e DiscreteSensorReadingValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDiscreteSensorReading.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DiscreteSensorReadingValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DiscreteSensorReadingValidationError{}

// Validate checks the field values on Threshold with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Threshold) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Threshold with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ThresholdMultiError, or nil
// if none found.
func (m *Threshold) ValidateAll() error {
	return m.validate(true)
}

func (m *Threshold) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Warning

	// no validation rules for Critical

	if len(errors) > 0 {
		return ThresholdMultiError(errors)
	}

	return nil
}

// ThresholdMultiError is an error wrapping multiple validation errors returned
// by Threshold.ValidateAll() if the designated constraints aren't met.
type ThresholdMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ThresholdMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ThresholdMultiError) AllErrors() []error { return m }

// ThresholdValidationError is the validation error returned by
// Threshold.Validate if the designated constraints aren't met.
type ThresholdValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ThresholdValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ThresholdValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ThresholdValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ThresholdValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ThresholdValidationError) ErrorName() string { return "ThresholdValidationError" }

// Error satisfies the builtin error interface
func (e ThresholdValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sThreshold.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ThresholdValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ThresholdValidationError{}

// Validate checks the field values on MinMaxRecorded with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *MinMaxRecorded) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MinMaxRecorded with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in MinMaxRecordedMultiError,
// or nil if none found.
func (m *MinMaxRecorded) ValidateAll() error {
	return m.validate(true)
}

func (m *MinMaxRecorded) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for MinValue

	// no validation rules for MaxValue

	// no validation rules for MinTimestamp

	// no validation rules for MaxTimestamp

	if len(errors) > 0 {
		return MinMaxRecordedMultiError(errors)
	}

	return nil
}

// MinMaxRecordedMultiError is an error wrapping multiple validation errors
// returned by MinMaxRecorded.ValidateAll() if the designated constraints
// aren't met.
type MinMaxRecordedMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MinMaxRecordedMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MinMaxRecordedMultiError) AllErrors() []error { return m }

// MinMaxRecordedValidationError is the validation error returned by
// MinMaxRecorded.Validate if the designated constraints aren't met.
type MinMaxRecordedValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MinMaxRecordedValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MinMaxRecordedValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MinMaxRecordedValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MinMaxRecordedValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MinMaxRecordedValidationError) ErrorName() string { return "MinMaxRecordedValidationError" }

// Error satisfies the builtin error interface
func (e MinMaxRecordedValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMinMaxRecorded.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MinMaxRecordedValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MinMaxRecordedValidationError{}

// Validate checks the field values on GetSensorRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetSensorRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetSensorRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetSensorRequestMultiError, or nil if none found.
func (m *GetSensorRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetSensorRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return GetSensorRequestMultiError(errors)
	}

	return nil
}

// GetSensorRequestMultiError is an error wrapping multiple validation errors
// returned by GetSensorRequest.ValidateAll() if the designated constraints
// aren't met.
type GetSensorRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetSensorRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetSensorRequestMultiError) AllErrors() []error { return m }

// GetSensorRequestValidationError is the validation error returned by
// GetSensorRequest.Validate if the designated constraints aren't met.
type GetSensorRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSensorRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSensorRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSensorRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSensorRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSensorRequestValidationError) ErrorName() string { return "GetSensorRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetSensorRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSensorRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSensorRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSensorRequestValidationError{}

// Validate checks the field values on GetSensorResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetSensorResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetSensorResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetSensorResponseMultiError, or nil if none found.
func (m *GetSensorResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetSensorResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetSensor()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetSensorResponseValidationError{
					field:  "Sensor",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetSensorResponseValidationError{
					field:  "Sensor",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSensor()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetSensorResponseValidationError{
				field:  "Sensor",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetSensorResponseMultiError(errors)
	}

	return nil
}

// GetSensorResponseMultiError is an error wrapping multiple validation errors
// returned by GetSensorResponse.ValidateAll() if the designated constraints
// aren't met.
type GetSensorResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetSensorResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetSensorResponseMultiError) AllErrors() []error { return m }

// GetSensorResponseValidationError is the validation error returned by
// GetSensorResponse.Validate if the designated constraints aren't met.
type GetSensorResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSensorResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSensorResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSensorResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSensorResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSensorResponseValidationError) ErrorName() string {
	return "GetSensorResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetSensorResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSensorResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSensorResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSensorResponseValidationError{}

// Validate checks the field values on ListSensorsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListSensorsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListSensorsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListSensorsRequestMultiError, or nil if none found.
func (m *ListSensorsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListSensorsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Context

	// no validation rules for Status

	if len(errors) > 0 {
		return ListSensorsRequestMultiError(errors)
	}

	return nil
}

// ListSensorsRequestMultiError is an error wrapping multiple validation errors
// returned by ListSensorsRequest.ValidateAll() if the designated constraints
// aren't met.
type ListSensorsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListSensorsRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListSensorsRequestMultiError) AllErrors() []error { return m }

// ListSensorsRequestValidationError is the validation error returned by
// ListSensorsRequest.Validate if the designated constraints aren't met.
type ListSensorsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListSensorsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListSensorsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListSensorsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListSensorsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListSensorsRequestValidationError) ErrorName() string {
	return "ListSensorsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListSensorsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListSensorsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListSensorsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListSensorsRequestValidationError{}

// Validate checks the field values on ListSensorsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListSensorsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListSensorsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListSensorsResponseMultiError, or nil if none found.
func (m *ListSensorsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListSensorsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetSensors() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListSensorsResponseValidationError{
						field:  fmt.Sprintf("Sensors[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListSensorsResponseValidationError{
						field:  fmt.Sprintf("Sensors[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListSensorsResponseValidationError{
					field:  fmt.Sprintf("Sensors[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListSensorsResponseMultiError(errors)
	}

	return nil
}

// ListSensorsResponseMultiError is an error wrapping multiple validation
// errors returned by ListSensorsResponse.ValidateAll() if the designated
// constraints aren't met.
type ListSensorsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListSensorsResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListSensorsResponseMultiError) AllErrors() []error { return m }

// ListSensorsResponseValidationError is the validation error returned by
// ListSensorsResponse.Validate if the designated constraints aren't met.
type ListSensorsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListSensorsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListSensorsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListSensorsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListSensorsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListSensorsResponseValidationError) ErrorName() string {
	return "ListSensorsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListSensorsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListSensorsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListSensorsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListSensorsResponseValidationError{}
