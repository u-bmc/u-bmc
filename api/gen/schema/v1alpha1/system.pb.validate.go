// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: schema/v1alpha1/system.proto

package schemav1alpha1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Health with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Health) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Health with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in HealthMultiError, or nil if none found.
func (m *Health) ValidateAll() error {
	return m.validate(true)
}

func (m *Health) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Status

	for idx, item := range m.GetDetails() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, HealthValidationError{
						field:  fmt.Sprintf("Details[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, HealthValidationError{
						field:  fmt.Sprintf("Details[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return HealthValidationError{
					field:  fmt.Sprintf("Details[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.StatusDescription != nil {
		// no validation rules for StatusDescription
	}

	if m.LastUpdated != nil {

		if all {
			switch v := interface{}(m.GetLastUpdated()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, HealthValidationError{
						field:  "LastUpdated",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, HealthValidationError{
						field:  "LastUpdated",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetLastUpdated()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return HealthValidationError{
					field:  "LastUpdated",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.Uptime != nil {

		if all {
			switch v := interface{}(m.GetUptime()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, HealthValidationError{
						field:  "Uptime",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, HealthValidationError{
						field:  "Uptime",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetUptime()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return HealthValidationError{
					field:  "Uptime",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return HealthMultiError(errors)
	}

	return nil
}

// HealthMultiError is an error wrapping multiple validation errors returned by
// Health.ValidateAll() if the designated constraints aren't met.
type HealthMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m HealthMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m HealthMultiError) AllErrors() []error { return m }

// HealthValidationError is the validation error returned by Health.Validate if
// the designated constraints aren't met.
type HealthValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HealthValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HealthValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HealthValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HealthValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HealthValidationError) ErrorName() string { return "HealthValidationError" }

// Error satisfies the builtin error interface
func (e HealthValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHealth.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HealthValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HealthValidationError{}

// Validate checks the field values on HealthDetail with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *HealthDetail) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on HealthDetail with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in HealthDetailMultiError, or
// nil if none found.
func (m *HealthDetail) ValidateAll() error {
	return m.validate(true)
}

func (m *HealthDetail) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Component

	// no validation rules for Status

	if m.Message != nil {
		// no validation rules for Message
	}

	if m.Timestamp != nil {

		if all {
			switch v := interface{}(m.GetTimestamp()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, HealthDetailValidationError{
						field:  "Timestamp",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, HealthDetailValidationError{
						field:  "Timestamp",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetTimestamp()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return HealthDetailValidationError{
					field:  "Timestamp",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return HealthDetailMultiError(errors)
	}

	return nil
}

// HealthDetailMultiError is an error wrapping multiple validation errors
// returned by HealthDetail.ValidateAll() if the designated constraints aren't met.
type HealthDetailMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m HealthDetailMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m HealthDetailMultiError) AllErrors() []error { return m }

// HealthDetailValidationError is the validation error returned by
// HealthDetail.Validate if the designated constraints aren't met.
type HealthDetailValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HealthDetailValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HealthDetailValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HealthDetailValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HealthDetailValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HealthDetailValidationError) ErrorName() string { return "HealthDetailValidationError" }

// Error satisfies the builtin error interface
func (e HealthDetailValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHealthDetail.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HealthDetailValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HealthDetailValidationError{}

// Validate checks the field values on SystemInfo with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SystemInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SystemInfo with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SystemInfoMultiError, or
// nil if none found.
func (m *SystemInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *SystemInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for State

	if all {
		switch v := interface{}(m.GetHealth()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SystemInfoValidationError{
					field:  "Health",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SystemInfoValidationError{
					field:  "Health",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetHealth()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SystemInfoValidationError{
				field:  "Health",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Metadata

	if m.Description != nil {
		// no validation rules for Description
	}

	if m.Version != nil {
		// no validation rules for Version
	}

	if m.BootTime != nil {

		if all {
			switch v := interface{}(m.GetBootTime()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SystemInfoValidationError{
						field:  "BootTime",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SystemInfoValidationError{
						field:  "BootTime",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetBootTime()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SystemInfoValidationError{
					field:  "BootTime",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.Uptime != nil {

		if all {
			switch v := interface{}(m.GetUptime()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SystemInfoValidationError{
						field:  "Uptime",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SystemInfoValidationError{
						field:  "Uptime",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetUptime()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SystemInfoValidationError{
					field:  "Uptime",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.ContactInfo != nil {

		if all {
			switch v := interface{}(m.GetContactInfo()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SystemInfoValidationError{
						field:  "ContactInfo",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SystemInfoValidationError{
						field:  "ContactInfo",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetContactInfo()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SystemInfoValidationError{
					field:  "ContactInfo",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return SystemInfoMultiError(errors)
	}

	return nil
}

// SystemInfoMultiError is an error wrapping multiple validation errors
// returned by SystemInfo.ValidateAll() if the designated constraints aren't met.
type SystemInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SystemInfoMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SystemInfoMultiError) AllErrors() []error { return m }

// SystemInfoValidationError is the validation error returned by
// SystemInfo.Validate if the designated constraints aren't met.
type SystemInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SystemInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SystemInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SystemInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SystemInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SystemInfoValidationError) ErrorName() string { return "SystemInfoValidationError" }

// Error satisfies the builtin error interface
func (e SystemInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSystemInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SystemInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SystemInfoValidationError{}

// Validate checks the field values on GetSystemInfoRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetSystemInfoRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetSystemInfoRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetSystemInfoRequestMultiError, or nil if none found.
func (m *GetSystemInfoRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetSystemInfoRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.FieldMask != nil {

		if all {
			switch v := interface{}(m.GetFieldMask()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetSystemInfoRequestValidationError{
						field:  "FieldMask",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetSystemInfoRequestValidationError{
						field:  "FieldMask",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetFieldMask()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetSystemInfoRequestValidationError{
					field:  "FieldMask",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetSystemInfoRequestMultiError(errors)
	}

	return nil
}

// GetSystemInfoRequestMultiError is an error wrapping multiple validation
// errors returned by GetSystemInfoRequest.ValidateAll() if the designated
// constraints aren't met.
type GetSystemInfoRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetSystemInfoRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetSystemInfoRequestMultiError) AllErrors() []error { return m }

// GetSystemInfoRequestValidationError is the validation error returned by
// GetSystemInfoRequest.Validate if the designated constraints aren't met.
type GetSystemInfoRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSystemInfoRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSystemInfoRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSystemInfoRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSystemInfoRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSystemInfoRequestValidationError) ErrorName() string {
	return "GetSystemInfoRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetSystemInfoRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSystemInfoRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSystemInfoRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSystemInfoRequestValidationError{}

// Validate checks the field values on GetSystemInfoResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetSystemInfoResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetSystemInfoResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetSystemInfoResponseMultiError, or nil if none found.
func (m *GetSystemInfoResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetSystemInfoResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetSystemInfo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetSystemInfoResponseValidationError{
					field:  "SystemInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetSystemInfoResponseValidationError{
					field:  "SystemInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSystemInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetSystemInfoResponseValidationError{
				field:  "SystemInfo",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetSystemInfoResponseMultiError(errors)
	}

	return nil
}

// GetSystemInfoResponseMultiError is an error wrapping multiple validation
// errors returned by GetSystemInfoResponse.ValidateAll() if the designated
// constraints aren't met.
type GetSystemInfoResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetSystemInfoResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetSystemInfoResponseMultiError) AllErrors() []error { return m }

// GetSystemInfoResponseValidationError is the validation error returned by
// GetSystemInfoResponse.Validate if the designated constraints aren't met.
type GetSystemInfoResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSystemInfoResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSystemInfoResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSystemInfoResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSystemInfoResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSystemInfoResponseValidationError) ErrorName() string {
	return "GetSystemInfoResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetSystemInfoResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSystemInfoResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSystemInfoResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSystemInfoResponseValidationError{}

// Validate checks the field values on GetHealthRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetHealthRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetHealthRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetHealthRequestMultiError, or nil if none found.
func (m *GetHealthRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetHealthRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.FieldMask != nil {

		if all {
			switch v := interface{}(m.GetFieldMask()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetHealthRequestValidationError{
						field:  "FieldMask",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetHealthRequestValidationError{
						field:  "FieldMask",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetFieldMask()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetHealthRequestValidationError{
					field:  "FieldMask",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetHealthRequestMultiError(errors)
	}

	return nil
}

// GetHealthRequestMultiError is an error wrapping multiple validation errors
// returned by GetHealthRequest.ValidateAll() if the designated constraints
// aren't met.
type GetHealthRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetHealthRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetHealthRequestMultiError) AllErrors() []error { return m }

// GetHealthRequestValidationError is the validation error returned by
// GetHealthRequest.Validate if the designated constraints aren't met.
type GetHealthRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetHealthRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetHealthRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetHealthRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetHealthRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetHealthRequestValidationError) ErrorName() string { return "GetHealthRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetHealthRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetHealthRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetHealthRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetHealthRequestValidationError{}

// Validate checks the field values on GetHealthResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetHealthResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetHealthResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetHealthResponseMultiError, or nil if none found.
func (m *GetHealthResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetHealthResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetHealth()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetHealthResponseValidationError{
					field:  "Health",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetHealthResponseValidationError{
					field:  "Health",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetHealth()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetHealthResponseValidationError{
				field:  "Health",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetHealthResponseMultiError(errors)
	}

	return nil
}

// GetHealthResponseMultiError is an error wrapping multiple validation errors
// returned by GetHealthResponse.ValidateAll() if the designated constraints
// aren't met.
type GetHealthResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetHealthResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetHealthResponseMultiError) AllErrors() []error { return m }

// GetHealthResponseValidationError is the validation error returned by
// GetHealthResponse.Validate if the designated constraints aren't met.
type GetHealthResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetHealthResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetHealthResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetHealthResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetHealthResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetHealthResponseValidationError) ErrorName() string {
	return "GetHealthResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetHealthResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetHealthResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetHealthResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetHealthResponseValidationError{}
