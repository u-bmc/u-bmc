// SPDX-License-Identifier: BSD-3-Clause

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: schema/v1alpha1/thermal.proto

package protov1alpha1

import (
	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Enumerations
type ThermalZoneStatus int32

const (
	ThermalZoneStatus_THERMAL_ZONE_STATUS_UNSPECIFIED ThermalZoneStatus = 0
	ThermalZoneStatus_THERMAL_ZONE_STATUS_NORMAL      ThermalZoneStatus = 1
	ThermalZoneStatus_THERMAL_ZONE_STATUS_WARNING     ThermalZoneStatus = 2
	ThermalZoneStatus_THERMAL_ZONE_STATUS_CRITICAL    ThermalZoneStatus = 3
	ThermalZoneStatus_THERMAL_ZONE_STATUS_ERROR       ThermalZoneStatus = 4
)

// Enum value maps for ThermalZoneStatus.
var (
	ThermalZoneStatus_name = map[int32]string{
		0: "THERMAL_ZONE_STATUS_UNSPECIFIED",
		1: "THERMAL_ZONE_STATUS_NORMAL",
		2: "THERMAL_ZONE_STATUS_WARNING",
		3: "THERMAL_ZONE_STATUS_CRITICAL",
		4: "THERMAL_ZONE_STATUS_ERROR",
	}
	ThermalZoneStatus_value = map[string]int32{
		"THERMAL_ZONE_STATUS_UNSPECIFIED": 0,
		"THERMAL_ZONE_STATUS_NORMAL":      1,
		"THERMAL_ZONE_STATUS_WARNING":     2,
		"THERMAL_ZONE_STATUS_CRITICAL":    3,
		"THERMAL_ZONE_STATUS_ERROR":       4,
	}
)

func (x ThermalZoneStatus) Enum() *ThermalZoneStatus {
	p := new(ThermalZoneStatus)
	*p = x
	return p
}

func (x ThermalZoneStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ThermalZoneStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_schema_v1alpha1_thermal_proto_enumTypes[0].Descriptor()
}

func (ThermalZoneStatus) Type() protoreflect.EnumType {
	return &file_schema_v1alpha1_thermal_proto_enumTypes[0]
}

func (x ThermalZoneStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ThermalZoneStatus.Descriptor instead.
func (ThermalZoneStatus) EnumDescriptor() ([]byte, []int) {
	return file_schema_v1alpha1_thermal_proto_rawDescGZIP(), []int{0}
}

type CoolingDeviceType int32

const (
	CoolingDeviceType_COOLING_DEVICE_TYPE_UNSPECIFIED    CoolingDeviceType = 0
	CoolingDeviceType_COOLING_DEVICE_TYPE_FAN            CoolingDeviceType = 1
	CoolingDeviceType_COOLING_DEVICE_TYPE_WATER_PUMP     CoolingDeviceType = 2
	CoolingDeviceType_COOLING_DEVICE_TYPE_HEAT_EXCHANGER CoolingDeviceType = 3
)

// Enum value maps for CoolingDeviceType.
var (
	CoolingDeviceType_name = map[int32]string{
		0: "COOLING_DEVICE_TYPE_UNSPECIFIED",
		1: "COOLING_DEVICE_TYPE_FAN",
		2: "COOLING_DEVICE_TYPE_WATER_PUMP",
		3: "COOLING_DEVICE_TYPE_HEAT_EXCHANGER",
	}
	CoolingDeviceType_value = map[string]int32{
		"COOLING_DEVICE_TYPE_UNSPECIFIED":    0,
		"COOLING_DEVICE_TYPE_FAN":            1,
		"COOLING_DEVICE_TYPE_WATER_PUMP":     2,
		"COOLING_DEVICE_TYPE_HEAT_EXCHANGER": 3,
	}
)

func (x CoolingDeviceType) Enum() *CoolingDeviceType {
	p := new(CoolingDeviceType)
	*p = x
	return p
}

func (x CoolingDeviceType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CoolingDeviceType) Descriptor() protoreflect.EnumDescriptor {
	return file_schema_v1alpha1_thermal_proto_enumTypes[1].Descriptor()
}

func (CoolingDeviceType) Type() protoreflect.EnumType {
	return &file_schema_v1alpha1_thermal_proto_enumTypes[1]
}

func (x CoolingDeviceType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CoolingDeviceType.Descriptor instead.
func (CoolingDeviceType) EnumDescriptor() ([]byte, []int) {
	return file_schema_v1alpha1_thermal_proto_rawDescGZIP(), []int{1}
}

type CoolingDeviceStatus int32

const (
	CoolingDeviceStatus_COOLING_DEVICE_STATUS_UNSPECIFIED CoolingDeviceStatus = 0
	CoolingDeviceStatus_COOLING_DEVICE_STATUS_ENABLED     CoolingDeviceStatus = 1
	CoolingDeviceStatus_COOLING_DEVICE_STATUS_DISABLED    CoolingDeviceStatus = 2
	CoolingDeviceStatus_COOLING_DEVICE_STATUS_ERROR       CoolingDeviceStatus = 3
	CoolingDeviceStatus_COOLING_DEVICE_STATUS_NOT_PRESENT CoolingDeviceStatus = 4
)

// Enum value maps for CoolingDeviceStatus.
var (
	CoolingDeviceStatus_name = map[int32]string{
		0: "COOLING_DEVICE_STATUS_UNSPECIFIED",
		1: "COOLING_DEVICE_STATUS_ENABLED",
		2: "COOLING_DEVICE_STATUS_DISABLED",
		3: "COOLING_DEVICE_STATUS_ERROR",
		4: "COOLING_DEVICE_STATUS_NOT_PRESENT",
	}
	CoolingDeviceStatus_value = map[string]int32{
		"COOLING_DEVICE_STATUS_UNSPECIFIED": 0,
		"COOLING_DEVICE_STATUS_ENABLED":     1,
		"COOLING_DEVICE_STATUS_DISABLED":    2,
		"COOLING_DEVICE_STATUS_ERROR":       3,
		"COOLING_DEVICE_STATUS_NOT_PRESENT": 4,
	}
)

func (x CoolingDeviceStatus) Enum() *CoolingDeviceStatus {
	p := new(CoolingDeviceStatus)
	*p = x
	return p
}

func (x CoolingDeviceStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CoolingDeviceStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_schema_v1alpha1_thermal_proto_enumTypes[2].Descriptor()
}

func (CoolingDeviceStatus) Type() protoreflect.EnumType {
	return &file_schema_v1alpha1_thermal_proto_enumTypes[2]
}

func (x CoolingDeviceStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CoolingDeviceStatus.Descriptor instead.
func (CoolingDeviceStatus) EnumDescriptor() ([]byte, []int) {
	return file_schema_v1alpha1_thermal_proto_rawDescGZIP(), []int{2}
}

type ThermalProfileType int32

const (
	ThermalProfileType_THERMAL_PROFILE_TYPE_UNSPECIFIED ThermalProfileType = 0
	ThermalProfileType_THERMAL_PROFILE_TYPE_QUIET       ThermalProfileType = 1
	ThermalProfileType_THERMAL_PROFILE_TYPE_BALANCED    ThermalProfileType = 2
	ThermalProfileType_THERMAL_PROFILE_TYPE_AGGRESSIVE  ThermalProfileType = 3
	ThermalProfileType_THERMAL_PROFILE_TYPE_CUSTOM      ThermalProfileType = 4
)

// Enum value maps for ThermalProfileType.
var (
	ThermalProfileType_name = map[int32]string{
		0: "THERMAL_PROFILE_TYPE_UNSPECIFIED",
		1: "THERMAL_PROFILE_TYPE_QUIET",
		2: "THERMAL_PROFILE_TYPE_BALANCED",
		3: "THERMAL_PROFILE_TYPE_AGGRESSIVE",
		4: "THERMAL_PROFILE_TYPE_CUSTOM",
	}
	ThermalProfileType_value = map[string]int32{
		"THERMAL_PROFILE_TYPE_UNSPECIFIED": 0,
		"THERMAL_PROFILE_TYPE_QUIET":       1,
		"THERMAL_PROFILE_TYPE_BALANCED":    2,
		"THERMAL_PROFILE_TYPE_AGGRESSIVE":  3,
		"THERMAL_PROFILE_TYPE_CUSTOM":      4,
	}
)

func (x ThermalProfileType) Enum() *ThermalProfileType {
	p := new(ThermalProfileType)
	*p = x
	return p
}

func (x ThermalProfileType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ThermalProfileType) Descriptor() protoreflect.EnumDescriptor {
	return file_schema_v1alpha1_thermal_proto_enumTypes[3].Descriptor()
}

func (ThermalProfileType) Type() protoreflect.EnumType {
	return &file_schema_v1alpha1_thermal_proto_enumTypes[3]
}

func (x ThermalProfileType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ThermalProfileType.Descriptor instead.
func (ThermalProfileType) EnumDescriptor() ([]byte, []int) {
	return file_schema_v1alpha1_thermal_proto_rawDescGZIP(), []int{3}
}

// ThermalManagement represents the overall thermal management configuration for a server chassis
type ThermalManagement struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Unique identifier for the thermal management instance
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Human-readable name for the thermal management instance
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// List of thermal zones within the chassis
	Zones []*ThermalZone `protobuf:"bytes,3,rep,name=zones,proto3" json:"zones,omitempty"`
	// Global thermal profile settings
	Profile *ThermalProfile `protobuf:"bytes,4,opt,name=profile,proto3" json:"profile,omitempty"`
	// Timestamp of the last update
	LastUpdateTimestamp int64 `protobuf:"varint,5,opt,name=last_update_timestamp,json=lastUpdateTimestamp,proto3" json:"last_update_timestamp,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *ThermalManagement) Reset() {
	*x = ThermalManagement{}
	mi := &file_schema_v1alpha1_thermal_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ThermalManagement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ThermalManagement) ProtoMessage() {}

func (x *ThermalManagement) ProtoReflect() protoreflect.Message {
	mi := &file_schema_v1alpha1_thermal_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ThermalManagement.ProtoReflect.Descriptor instead.
func (*ThermalManagement) Descriptor() ([]byte, []int) {
	return file_schema_v1alpha1_thermal_proto_rawDescGZIP(), []int{0}
}

func (x *ThermalManagement) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ThermalManagement) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ThermalManagement) GetZones() []*ThermalZone {
	if x != nil {
		return x.Zones
	}
	return nil
}

func (x *ThermalManagement) GetProfile() *ThermalProfile {
	if x != nil {
		return x.Profile
	}
	return nil
}

func (x *ThermalManagement) GetLastUpdateTimestamp() int64 {
	if x != nil {
		return x.LastUpdateTimestamp
	}
	return 0
}

// ThermalZone represents a specific zone within the chassis that has its own thermal control
type ThermalZone struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Unique identifier for the thermal zone
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Human-readable name for the thermal zone
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// List of sensors associated with this zone
	SensorIds []string `protobuf:"bytes,3,rep,name=sensor_ids,json=sensorIds,proto3" json:"sensor_ids,omitempty"`
	// List of cooling devices (fans, pumps) associated with this zone
	CoolingDeviceIds []string `protobuf:"bytes,4,rep,name=cooling_device_ids,json=coolingDeviceIds,proto3" json:"cooling_device_ids,omitempty"`
	// Current temperature in the zone (aggregated from sensors)
	CurrentTemperature float64 `protobuf:"fixed64,5,opt,name=current_temperature,json=currentTemperature,proto3" json:"current_temperature,omitempty"`
	// Target temperature for the zone
	TargetTemperature float64 `protobuf:"fixed64,6,opt,name=target_temperature,json=targetTemperature,proto3" json:"target_temperature,omitempty"`
	// PID controller settings for this zone
	PidSettings *PIDSettings `protobuf:"bytes,7,opt,name=pid_settings,json=pidSettings,proto3" json:"pid_settings,omitempty"`
	// Status of the thermal zone
	Status ThermalZoneStatus `protobuf:"varint,8,opt,name=status,proto3,enum=proto.v1alpha1.ThermalZoneStatus" json:"status,omitempty"`
	// Timestamp of the last update
	LastUpdateTimestamp int64 `protobuf:"varint,9,opt,name=last_update_timestamp,json=lastUpdateTimestamp,proto3" json:"last_update_timestamp,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *ThermalZone) Reset() {
	*x = ThermalZone{}
	mi := &file_schema_v1alpha1_thermal_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ThermalZone) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ThermalZone) ProtoMessage() {}

func (x *ThermalZone) ProtoReflect() protoreflect.Message {
	mi := &file_schema_v1alpha1_thermal_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ThermalZone.ProtoReflect.Descriptor instead.
func (*ThermalZone) Descriptor() ([]byte, []int) {
	return file_schema_v1alpha1_thermal_proto_rawDescGZIP(), []int{1}
}

func (x *ThermalZone) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ThermalZone) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ThermalZone) GetSensorIds() []string {
	if x != nil {
		return x.SensorIds
	}
	return nil
}

func (x *ThermalZone) GetCoolingDeviceIds() []string {
	if x != nil {
		return x.CoolingDeviceIds
	}
	return nil
}

func (x *ThermalZone) GetCurrentTemperature() float64 {
	if x != nil {
		return x.CurrentTemperature
	}
	return 0
}

func (x *ThermalZone) GetTargetTemperature() float64 {
	if x != nil {
		return x.TargetTemperature
	}
	return 0
}

func (x *ThermalZone) GetPidSettings() *PIDSettings {
	if x != nil {
		return x.PidSettings
	}
	return nil
}

func (x *ThermalZone) GetStatus() ThermalZoneStatus {
	if x != nil {
		return x.Status
	}
	return ThermalZoneStatus_THERMAL_ZONE_STATUS_UNSPECIFIED
}

func (x *ThermalZone) GetLastUpdateTimestamp() int64 {
	if x != nil {
		return x.LastUpdateTimestamp
	}
	return 0
}

// CoolingDevice represents a physical device used for thermal management
type CoolingDevice struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Unique identifier for the cooling device
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Human-readable name for the cooling device
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Type of cooling device
	Type CoolingDeviceType `protobuf:"varint,3,opt,name=type,proto3,enum=proto.v1alpha1.CoolingDeviceType" json:"type,omitempty"`
	// Current speed or power level (0-100%)
	SpeedPercent float64 `protobuf:"fixed64,4,opt,name=speed_percent,json=speedPercent,proto3" json:"speed_percent,omitempty"`
	// Minimum allowed speed
	MinSpeedPercent float64 `protobuf:"fixed64,5,opt,name=min_speed_percent,json=minSpeedPercent,proto3" json:"min_speed_percent,omitempty"`
	// Maximum allowed speed
	MaxSpeedPercent float64 `protobuf:"fixed64,6,opt,name=max_speed_percent,json=maxSpeedPercent,proto3" json:"max_speed_percent,omitempty"`
	// Status of the cooling device
	Status CoolingDeviceStatus `protobuf:"varint,7,opt,name=status,proto3,enum=proto.v1alpha1.CoolingDeviceStatus" json:"status,omitempty"`
	// Physical location of the device
	PhysicalLocation string `protobuf:"bytes,8,opt,name=physical_location,json=physicalLocation,proto3" json:"physical_location,omitempty"`
	// Timestamp of the last update
	LastUpdateTimestamp int64 `protobuf:"varint,9,opt,name=last_update_timestamp,json=lastUpdateTimestamp,proto3" json:"last_update_timestamp,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *CoolingDevice) Reset() {
	*x = CoolingDevice{}
	mi := &file_schema_v1alpha1_thermal_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CoolingDevice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CoolingDevice) ProtoMessage() {}

func (x *CoolingDevice) ProtoReflect() protoreflect.Message {
	mi := &file_schema_v1alpha1_thermal_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CoolingDevice.ProtoReflect.Descriptor instead.
func (*CoolingDevice) Descriptor() ([]byte, []int) {
	return file_schema_v1alpha1_thermal_proto_rawDescGZIP(), []int{2}
}

func (x *CoolingDevice) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *CoolingDevice) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CoolingDevice) GetType() CoolingDeviceType {
	if x != nil {
		return x.Type
	}
	return CoolingDeviceType_COOLING_DEVICE_TYPE_UNSPECIFIED
}

func (x *CoolingDevice) GetSpeedPercent() float64 {
	if x != nil {
		return x.SpeedPercent
	}
	return 0
}

func (x *CoolingDevice) GetMinSpeedPercent() float64 {
	if x != nil {
		return x.MinSpeedPercent
	}
	return 0
}

func (x *CoolingDevice) GetMaxSpeedPercent() float64 {
	if x != nil {
		return x.MaxSpeedPercent
	}
	return 0
}

func (x *CoolingDevice) GetStatus() CoolingDeviceStatus {
	if x != nil {
		return x.Status
	}
	return CoolingDeviceStatus_COOLING_DEVICE_STATUS_UNSPECIFIED
}

func (x *CoolingDevice) GetPhysicalLocation() string {
	if x != nil {
		return x.PhysicalLocation
	}
	return ""
}

func (x *CoolingDevice) GetLastUpdateTimestamp() int64 {
	if x != nil {
		return x.LastUpdateTimestamp
	}
	return 0
}

// PIDSettings represents the parameters for PID control
type PIDSettings struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Proportional gain
	Kp float64 `protobuf:"fixed64,1,opt,name=kp,proto3" json:"kp,omitempty"`
	// Integral gain
	Ki float64 `protobuf:"fixed64,2,opt,name=ki,proto3" json:"ki,omitempty"`
	// Derivative gain
	Kd float64 `protobuf:"fixed64,3,opt,name=kd,proto3" json:"kd,omitempty"`
	// Sample time in seconds
	SampleTime float64 `protobuf:"fixed64,4,opt,name=sample_time,json=sampleTime,proto3" json:"sample_time,omitempty"`
	// Output limits (0-100% for fan speeds)
	OutputMin     float64 `protobuf:"fixed64,5,opt,name=output_min,json=outputMin,proto3" json:"output_min,omitempty"`
	OutputMax     float64 `protobuf:"fixed64,6,opt,name=output_max,json=outputMax,proto3" json:"output_max,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PIDSettings) Reset() {
	*x = PIDSettings{}
	mi := &file_schema_v1alpha1_thermal_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PIDSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PIDSettings) ProtoMessage() {}

func (x *PIDSettings) ProtoReflect() protoreflect.Message {
	mi := &file_schema_v1alpha1_thermal_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PIDSettings.ProtoReflect.Descriptor instead.
func (*PIDSettings) Descriptor() ([]byte, []int) {
	return file_schema_v1alpha1_thermal_proto_rawDescGZIP(), []int{3}
}

func (x *PIDSettings) GetKp() float64 {
	if x != nil {
		return x.Kp
	}
	return 0
}

func (x *PIDSettings) GetKi() float64 {
	if x != nil {
		return x.Ki
	}
	return 0
}

func (x *PIDSettings) GetKd() float64 {
	if x != nil {
		return x.Kd
	}
	return 0
}

func (x *PIDSettings) GetSampleTime() float64 {
	if x != nil {
		return x.SampleTime
	}
	return 0
}

func (x *PIDSettings) GetOutputMin() float64 {
	if x != nil {
		return x.OutputMin
	}
	return 0
}

func (x *PIDSettings) GetOutputMax() float64 {
	if x != nil {
		return x.OutputMax
	}
	return 0
}

// ThermalProfile represents predefined thermal management profiles
type ThermalProfile struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Profile type
	Type ThermalProfileType `protobuf:"varint,1,opt,name=type,proto3,enum=proto.v1alpha1.ThermalProfileType" json:"type,omitempty"`
	// Custom PID settings (only used when type is CUSTOM)
	CustomSettings *PIDSettings `protobuf:"bytes,2,opt,name=custom_settings,json=customSettings,proto3" json:"custom_settings,omitempty"`
	// Description of the profile
	Description   string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ThermalProfile) Reset() {
	*x = ThermalProfile{}
	mi := &file_schema_v1alpha1_thermal_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ThermalProfile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ThermalProfile) ProtoMessage() {}

func (x *ThermalProfile) ProtoReflect() protoreflect.Message {
	mi := &file_schema_v1alpha1_thermal_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ThermalProfile.ProtoReflect.Descriptor instead.
func (*ThermalProfile) Descriptor() ([]byte, []int) {
	return file_schema_v1alpha1_thermal_proto_rawDescGZIP(), []int{4}
}

func (x *ThermalProfile) GetType() ThermalProfileType {
	if x != nil {
		return x.Type
	}
	return ThermalProfileType_THERMAL_PROFILE_TYPE_UNSPECIFIED
}

func (x *ThermalProfile) GetCustomSettings() *PIDSettings {
	if x != nil {
		return x.CustomSettings
	}
	return nil
}

func (x *ThermalProfile) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

// Request message for getting a thermal management configuration by ID
type GetThermalManagementRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetThermalManagementRequest) Reset() {
	*x = GetThermalManagementRequest{}
	mi := &file_schema_v1alpha1_thermal_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetThermalManagementRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetThermalManagementRequest) ProtoMessage() {}

func (x *GetThermalManagementRequest) ProtoReflect() protoreflect.Message {
	mi := &file_schema_v1alpha1_thermal_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetThermalManagementRequest.ProtoReflect.Descriptor instead.
func (*GetThermalManagementRequest) Descriptor() ([]byte, []int) {
	return file_schema_v1alpha1_thermal_proto_rawDescGZIP(), []int{5}
}

func (x *GetThermalManagementRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// Response message for getting a thermal management configuration
type GetThermalManagementResponse struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	ThermalManagement *ThermalManagement     `protobuf:"bytes,1,opt,name=thermal_management,json=thermalManagement,proto3" json:"thermal_management,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *GetThermalManagementResponse) Reset() {
	*x = GetThermalManagementResponse{}
	mi := &file_schema_v1alpha1_thermal_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetThermalManagementResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetThermalManagementResponse) ProtoMessage() {}

func (x *GetThermalManagementResponse) ProtoReflect() protoreflect.Message {
	mi := &file_schema_v1alpha1_thermal_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetThermalManagementResponse.ProtoReflect.Descriptor instead.
func (*GetThermalManagementResponse) Descriptor() ([]byte, []int) {
	return file_schema_v1alpha1_thermal_proto_rawDescGZIP(), []int{6}
}

func (x *GetThermalManagementResponse) GetThermalManagement() *ThermalManagement {
	if x != nil {
		return x.ThermalManagement
	}
	return nil
}

// Request message for listing thermal management configurations
type ListThermalManagementRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListThermalManagementRequest) Reset() {
	*x = ListThermalManagementRequest{}
	mi := &file_schema_v1alpha1_thermal_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListThermalManagementRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListThermalManagementRequest) ProtoMessage() {}

func (x *ListThermalManagementRequest) ProtoReflect() protoreflect.Message {
	mi := &file_schema_v1alpha1_thermal_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListThermalManagementRequest.ProtoReflect.Descriptor instead.
func (*ListThermalManagementRequest) Descriptor() ([]byte, []int) {
	return file_schema_v1alpha1_thermal_proto_rawDescGZIP(), []int{7}
}

// Response message for listing thermal management configurations
type ListThermalManagementResponse struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	ThermalManagements []*ThermalManagement   `protobuf:"bytes,1,rep,name=thermal_managements,json=thermalManagements,proto3" json:"thermal_managements,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *ListThermalManagementResponse) Reset() {
	*x = ListThermalManagementResponse{}
	mi := &file_schema_v1alpha1_thermal_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListThermalManagementResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListThermalManagementResponse) ProtoMessage() {}

func (x *ListThermalManagementResponse) ProtoReflect() protoreflect.Message {
	mi := &file_schema_v1alpha1_thermal_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListThermalManagementResponse.ProtoReflect.Descriptor instead.
func (*ListThermalManagementResponse) Descriptor() ([]byte, []int) {
	return file_schema_v1alpha1_thermal_proto_rawDescGZIP(), []int{8}
}

func (x *ListThermalManagementResponse) GetThermalManagements() []*ThermalManagement {
	if x != nil {
		return x.ThermalManagements
	}
	return nil
}

// Request message for getting a thermal zone by ID
type GetThermalZoneRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetThermalZoneRequest) Reset() {
	*x = GetThermalZoneRequest{}
	mi := &file_schema_v1alpha1_thermal_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetThermalZoneRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetThermalZoneRequest) ProtoMessage() {}

func (x *GetThermalZoneRequest) ProtoReflect() protoreflect.Message {
	mi := &file_schema_v1alpha1_thermal_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetThermalZoneRequest.ProtoReflect.Descriptor instead.
func (*GetThermalZoneRequest) Descriptor() ([]byte, []int) {
	return file_schema_v1alpha1_thermal_proto_rawDescGZIP(), []int{9}
}

func (x *GetThermalZoneRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// Response message for getting a thermal zone
type GetThermalZoneResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ThermalZone   *ThermalZone           `protobuf:"bytes,1,opt,name=thermal_zone,json=thermalZone,proto3" json:"thermal_zone,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetThermalZoneResponse) Reset() {
	*x = GetThermalZoneResponse{}
	mi := &file_schema_v1alpha1_thermal_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetThermalZoneResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetThermalZoneResponse) ProtoMessage() {}

func (x *GetThermalZoneResponse) ProtoReflect() protoreflect.Message {
	mi := &file_schema_v1alpha1_thermal_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetThermalZoneResponse.ProtoReflect.Descriptor instead.
func (*GetThermalZoneResponse) Descriptor() ([]byte, []int) {
	return file_schema_v1alpha1_thermal_proto_rawDescGZIP(), []int{10}
}

func (x *GetThermalZoneResponse) GetThermalZone() *ThermalZone {
	if x != nil {
		return x.ThermalZone
	}
	return nil
}

// Request message for listing thermal zones with optional filtering
type ListThermalZonesRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Status        ThermalZoneStatus      `protobuf:"varint,1,opt,name=status,proto3,enum=proto.v1alpha1.ThermalZoneStatus" json:"status,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListThermalZonesRequest) Reset() {
	*x = ListThermalZonesRequest{}
	mi := &file_schema_v1alpha1_thermal_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListThermalZonesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListThermalZonesRequest) ProtoMessage() {}

func (x *ListThermalZonesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_schema_v1alpha1_thermal_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListThermalZonesRequest.ProtoReflect.Descriptor instead.
func (*ListThermalZonesRequest) Descriptor() ([]byte, []int) {
	return file_schema_v1alpha1_thermal_proto_rawDescGZIP(), []int{11}
}

func (x *ListThermalZonesRequest) GetStatus() ThermalZoneStatus {
	if x != nil {
		return x.Status
	}
	return ThermalZoneStatus_THERMAL_ZONE_STATUS_UNSPECIFIED
}

// Response message for listing thermal zones
type ListThermalZonesResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ThermalZones  []*ThermalZone         `protobuf:"bytes,1,rep,name=thermal_zones,json=thermalZones,proto3" json:"thermal_zones,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListThermalZonesResponse) Reset() {
	*x = ListThermalZonesResponse{}
	mi := &file_schema_v1alpha1_thermal_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListThermalZonesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListThermalZonesResponse) ProtoMessage() {}

func (x *ListThermalZonesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_schema_v1alpha1_thermal_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListThermalZonesResponse.ProtoReflect.Descriptor instead.
func (*ListThermalZonesResponse) Descriptor() ([]byte, []int) {
	return file_schema_v1alpha1_thermal_proto_rawDescGZIP(), []int{12}
}

func (x *ListThermalZonesResponse) GetThermalZones() []*ThermalZone {
	if x != nil {
		return x.ThermalZones
	}
	return nil
}

// Request message for getting a cooling device by ID
type GetCoolingDeviceRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetCoolingDeviceRequest) Reset() {
	*x = GetCoolingDeviceRequest{}
	mi := &file_schema_v1alpha1_thermal_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetCoolingDeviceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCoolingDeviceRequest) ProtoMessage() {}

func (x *GetCoolingDeviceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_schema_v1alpha1_thermal_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCoolingDeviceRequest.ProtoReflect.Descriptor instead.
func (*GetCoolingDeviceRequest) Descriptor() ([]byte, []int) {
	return file_schema_v1alpha1_thermal_proto_rawDescGZIP(), []int{13}
}

func (x *GetCoolingDeviceRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// Response message for getting a cooling device
type GetCoolingDeviceResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	CoolingDevice *CoolingDevice         `protobuf:"bytes,1,opt,name=cooling_device,json=coolingDevice,proto3" json:"cooling_device,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetCoolingDeviceResponse) Reset() {
	*x = GetCoolingDeviceResponse{}
	mi := &file_schema_v1alpha1_thermal_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetCoolingDeviceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCoolingDeviceResponse) ProtoMessage() {}

func (x *GetCoolingDeviceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_schema_v1alpha1_thermal_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCoolingDeviceResponse.ProtoReflect.Descriptor instead.
func (*GetCoolingDeviceResponse) Descriptor() ([]byte, []int) {
	return file_schema_v1alpha1_thermal_proto_rawDescGZIP(), []int{14}
}

func (x *GetCoolingDeviceResponse) GetCoolingDevice() *CoolingDevice {
	if x != nil {
		return x.CoolingDevice
	}
	return nil
}

// Request message for listing cooling devices with optional filtering
type ListCoolingDevicesRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Type          CoolingDeviceType      `protobuf:"varint,1,opt,name=type,proto3,enum=proto.v1alpha1.CoolingDeviceType" json:"type,omitempty"`
	Status        CoolingDeviceStatus    `protobuf:"varint,2,opt,name=status,proto3,enum=proto.v1alpha1.CoolingDeviceStatus" json:"status,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListCoolingDevicesRequest) Reset() {
	*x = ListCoolingDevicesRequest{}
	mi := &file_schema_v1alpha1_thermal_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListCoolingDevicesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCoolingDevicesRequest) ProtoMessage() {}

func (x *ListCoolingDevicesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_schema_v1alpha1_thermal_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCoolingDevicesRequest.ProtoReflect.Descriptor instead.
func (*ListCoolingDevicesRequest) Descriptor() ([]byte, []int) {
	return file_schema_v1alpha1_thermal_proto_rawDescGZIP(), []int{15}
}

func (x *ListCoolingDevicesRequest) GetType() CoolingDeviceType {
	if x != nil {
		return x.Type
	}
	return CoolingDeviceType_COOLING_DEVICE_TYPE_UNSPECIFIED
}

func (x *ListCoolingDevicesRequest) GetStatus() CoolingDeviceStatus {
	if x != nil {
		return x.Status
	}
	return CoolingDeviceStatus_COOLING_DEVICE_STATUS_UNSPECIFIED
}

// Response message for listing cooling devices
type ListCoolingDevicesResponse struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	CoolingDevices []*CoolingDevice       `protobuf:"bytes,1,rep,name=cooling_devices,json=coolingDevices,proto3" json:"cooling_devices,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *ListCoolingDevicesResponse) Reset() {
	*x = ListCoolingDevicesResponse{}
	mi := &file_schema_v1alpha1_thermal_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListCoolingDevicesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCoolingDevicesResponse) ProtoMessage() {}

func (x *ListCoolingDevicesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_schema_v1alpha1_thermal_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCoolingDevicesResponse.ProtoReflect.Descriptor instead.
func (*ListCoolingDevicesResponse) Descriptor() ([]byte, []int) {
	return file_schema_v1alpha1_thermal_proto_rawDescGZIP(), []int{16}
}

func (x *ListCoolingDevicesResponse) GetCoolingDevices() []*CoolingDevice {
	if x != nil {
		return x.CoolingDevices
	}
	return nil
}

var File_schema_v1alpha1_thermal_proto protoreflect.FileDescriptor

const file_schema_v1alpha1_thermal_proto_rawDesc = "" +
	"\n" +
	"\x1dschema/v1alpha1/thermal.proto\x12\x0eproto.v1alpha1\x1a\x1bbuf/validate/validate.proto\"\xf4\x01\n" +
	"\x11ThermalManagement\x12\x17\n" +
	"\x02id\x18\x01 \x01(\tB\a\xbaH\x04r\x02\x10\x01R\x02id\x12\x1b\n" +
	"\x04name\x18\x02 \x01(\tB\a\xbaH\x04r\x02\x10\x01R\x04name\x12;\n" +
	"\x05zones\x18\x03 \x03(\v2\x1b.proto.v1alpha1.ThermalZoneB\b\xbaH\x05\x92\x01\x02\b\x01R\x05zones\x128\n" +
	"\aprofile\x18\x04 \x01(\v2\x1e.proto.v1alpha1.ThermalProfileR\aprofile\x122\n" +
	"\x15last_update_timestamp\x18\x05 \x01(\x03R\x13lastUpdateTimestamp\"\xc3\x03\n" +
	"\vThermalZone\x12\x17\n" +
	"\x02id\x18\x01 \x01(\tB\a\xbaH\x04r\x02\x10\x01R\x02id\x12\x1b\n" +
	"\x04name\x18\x02 \x01(\tB\a\xbaH\x04r\x02\x10\x01R\x04name\x12'\n" +
	"\n" +
	"sensor_ids\x18\x03 \x03(\tB\b\xbaH\x05\x92\x01\x02\b\x01R\tsensorIds\x126\n" +
	"\x12cooling_device_ids\x18\x04 \x03(\tB\b\xbaH\x05\x92\x01\x02\b\x01R\x10coolingDeviceIds\x12/\n" +
	"\x13current_temperature\x18\x05 \x01(\x01R\x12currentTemperature\x12=\n" +
	"\x12target_temperature\x18\x06 \x01(\x01B\x0e\xbaH\v\x12\t!\x00\x00\x00\x00\x00\x00\x00\x00R\x11targetTemperature\x12>\n" +
	"\fpid_settings\x18\a \x01(\v2\x1b.proto.v1alpha1.PIDSettingsR\vpidSettings\x129\n" +
	"\x06status\x18\b \x01(\x0e2!.proto.v1alpha1.ThermalZoneStatusR\x06status\x122\n" +
	"\x15last_update_timestamp\x18\t \x01(\x03R\x13lastUpdateTimestamp\"\xe2\x03\n" +
	"\rCoolingDevice\x12\x17\n" +
	"\x02id\x18\x01 \x01(\tB\a\xbaH\x04r\x02\x10\x01R\x02id\x12\x1b\n" +
	"\x04name\x18\x02 \x01(\tB\a\xbaH\x04r\x02\x10\x01R\x04name\x125\n" +
	"\x04type\x18\x03 \x01(\x0e2!.proto.v1alpha1.CoolingDeviceTypeR\x04type\x12<\n" +
	"\rspeed_percent\x18\x04 \x01(\x01B\x17\xbaH\x14\x12\x12\x19\x00\x00\x00\x00\x00\x00Y@)\x00\x00\x00\x00\x00\x00\x00\x00R\fspeedPercent\x12C\n" +
	"\x11min_speed_percent\x18\x05 \x01(\x01B\x17\xbaH\x14\x12\x12\x19\x00\x00\x00\x00\x00\x00Y@)\x00\x00\x00\x00\x00\x00\x00\x00R\x0fminSpeedPercent\x12C\n" +
	"\x11max_speed_percent\x18\x06 \x01(\x01B\x17\xbaH\x14\x12\x12\x19\x00\x00\x00\x00\x00\x00Y@)\x00\x00\x00\x00\x00\x00\x00\x00R\x0fmaxSpeedPercent\x12;\n" +
	"\x06status\x18\a \x01(\x0e2#.proto.v1alpha1.CoolingDeviceStatusR\x06status\x12+\n" +
	"\x11physical_location\x18\b \x01(\tR\x10physicalLocation\x122\n" +
	"\x15last_update_timestamp\x18\t \x01(\x03R\x13lastUpdateTimestamp\"\x8e\x02\n" +
	"\vPIDSettings\x12\x1e\n" +
	"\x02kp\x18\x01 \x01(\x01B\x0e\xbaH\v\x12\t)\x00\x00\x00\x00\x00\x00\x00\x00R\x02kp\x12\x1e\n" +
	"\x02ki\x18\x02 \x01(\x01B\x0e\xbaH\v\x12\t)\x00\x00\x00\x00\x00\x00\x00\x00R\x02ki\x12\x1e\n" +
	"\x02kd\x18\x03 \x01(\x01B\x0e\xbaH\v\x12\t)\x00\x00\x00\x00\x00\x00\x00\x00R\x02kd\x12/\n" +
	"\vsample_time\x18\x04 \x01(\x01B\x0e\xbaH\v\x12\t!\x00\x00\x00\x00\x00\x00\x00\x00R\n" +
	"sampleTime\x126\n" +
	"\n" +
	"output_min\x18\x05 \x01(\x01B\x17\xbaH\x14\x12\x12\x19\x00\x00\x00\x00\x00\x00Y@)\x00\x00\x00\x00\x00\x00\x00\x00R\toutputMin\x126\n" +
	"\n" +
	"output_max\x18\x06 \x01(\x01B\x17\xbaH\x14\x12\x12\x19\x00\x00\x00\x00\x00\x00Y@)\x00\x00\x00\x00\x00\x00\x00\x00R\toutputMax\"\xb0\x01\n" +
	"\x0eThermalProfile\x126\n" +
	"\x04type\x18\x01 \x01(\x0e2\".proto.v1alpha1.ThermalProfileTypeR\x04type\x12D\n" +
	"\x0fcustom_settings\x18\x02 \x01(\v2\x1b.proto.v1alpha1.PIDSettingsR\x0ecustomSettings\x12 \n" +
	"\vdescription\x18\x03 \x01(\tR\vdescription\"6\n" +
	"\x1bGetThermalManagementRequest\x12\x17\n" +
	"\x02id\x18\x01 \x01(\tB\a\xbaH\x04r\x02\x10\x01R\x02id\"p\n" +
	"\x1cGetThermalManagementResponse\x12P\n" +
	"\x12thermal_management\x18\x01 \x01(\v2!.proto.v1alpha1.ThermalManagementR\x11thermalManagement\"\x1e\n" +
	"\x1cListThermalManagementRequest\"s\n" +
	"\x1dListThermalManagementResponse\x12R\n" +
	"\x13thermal_managements\x18\x01 \x03(\v2!.proto.v1alpha1.ThermalManagementR\x12thermalManagements\"0\n" +
	"\x15GetThermalZoneRequest\x12\x17\n" +
	"\x02id\x18\x01 \x01(\tB\a\xbaH\x04r\x02\x10\x01R\x02id\"X\n" +
	"\x16GetThermalZoneResponse\x12>\n" +
	"\fthermal_zone\x18\x01 \x01(\v2\x1b.proto.v1alpha1.ThermalZoneR\vthermalZone\"T\n" +
	"\x17ListThermalZonesRequest\x129\n" +
	"\x06status\x18\x01 \x01(\x0e2!.proto.v1alpha1.ThermalZoneStatusR\x06status\"\\\n" +
	"\x18ListThermalZonesResponse\x12@\n" +
	"\rthermal_zones\x18\x01 \x03(\v2\x1b.proto.v1alpha1.ThermalZoneR\fthermalZones\"2\n" +
	"\x17GetCoolingDeviceRequest\x12\x17\n" +
	"\x02id\x18\x01 \x01(\tB\a\xbaH\x04r\x02\x10\x01R\x02id\"`\n" +
	"\x18GetCoolingDeviceResponse\x12D\n" +
	"\x0ecooling_device\x18\x01 \x01(\v2\x1d.proto.v1alpha1.CoolingDeviceR\rcoolingDevice\"\x8f\x01\n" +
	"\x19ListCoolingDevicesRequest\x125\n" +
	"\x04type\x18\x01 \x01(\x0e2!.proto.v1alpha1.CoolingDeviceTypeR\x04type\x12;\n" +
	"\x06status\x18\x02 \x01(\x0e2#.proto.v1alpha1.CoolingDeviceStatusR\x06status\"d\n" +
	"\x1aListCoolingDevicesResponse\x12F\n" +
	"\x0fcooling_devices\x18\x01 \x03(\v2\x1d.proto.v1alpha1.CoolingDeviceR\x0ecoolingDevices*\xba\x01\n" +
	"\x11ThermalZoneStatus\x12#\n" +
	"\x1fTHERMAL_ZONE_STATUS_UNSPECIFIED\x10\x00\x12\x1e\n" +
	"\x1aTHERMAL_ZONE_STATUS_NORMAL\x10\x01\x12\x1f\n" +
	"\x1bTHERMAL_ZONE_STATUS_WARNING\x10\x02\x12 \n" +
	"\x1cTHERMAL_ZONE_STATUS_CRITICAL\x10\x03\x12\x1d\n" +
	"\x19THERMAL_ZONE_STATUS_ERROR\x10\x04*\xa1\x01\n" +
	"\x11CoolingDeviceType\x12#\n" +
	"\x1fCOOLING_DEVICE_TYPE_UNSPECIFIED\x10\x00\x12\x1b\n" +
	"\x17COOLING_DEVICE_TYPE_FAN\x10\x01\x12\"\n" +
	"\x1eCOOLING_DEVICE_TYPE_WATER_PUMP\x10\x02\x12&\n" +
	"\"COOLING_DEVICE_TYPE_HEAT_EXCHANGER\x10\x03*\xcb\x01\n" +
	"\x13CoolingDeviceStatus\x12%\n" +
	"!COOLING_DEVICE_STATUS_UNSPECIFIED\x10\x00\x12!\n" +
	"\x1dCOOLING_DEVICE_STATUS_ENABLED\x10\x01\x12\"\n" +
	"\x1eCOOLING_DEVICE_STATUS_DISABLED\x10\x02\x12\x1f\n" +
	"\x1bCOOLING_DEVICE_STATUS_ERROR\x10\x03\x12%\n" +
	"!COOLING_DEVICE_STATUS_NOT_PRESENT\x10\x04*\xc3\x01\n" +
	"\x12ThermalProfileType\x12$\n" +
	" THERMAL_PROFILE_TYPE_UNSPECIFIED\x10\x00\x12\x1e\n" +
	"\x1aTHERMAL_PROFILE_TYPE_QUIET\x10\x01\x12!\n" +
	"\x1dTHERMAL_PROFILE_TYPE_BALANCED\x10\x02\x12#\n" +
	"\x1fTHERMAL_PROFILE_TYPE_AGGRESSIVE\x10\x03\x12\x1f\n" +
	"\x1bTHERMAL_PROFILE_TYPE_CUSTOM\x10\x042\x87\x02\n" +
	"\x18ThermalManagementService\x12s\n" +
	"\x14GetThermalManagement\x12+.proto.v1alpha1.GetThermalManagementRequest\x1a,.proto.v1alpha1.GetThermalManagementResponse\"\x00\x12v\n" +
	"\x15ListThermalManagement\x12,.proto.v1alpha1.ListThermalManagementRequest\x1a-.proto.v1alpha1.ListThermalManagementResponse\"\x002\xe0\x01\n" +
	"\x12ThermalZoneService\x12a\n" +
	"\x0eGetThermalZone\x12%.proto.v1alpha1.GetThermalZoneRequest\x1a&.proto.v1alpha1.GetThermalZoneResponse\"\x00\x12g\n" +
	"\x10ListThermalZones\x12'.proto.v1alpha1.ListThermalZonesRequest\x1a(.proto.v1alpha1.ListThermalZonesResponse\"\x002\xee\x01\n" +
	"\x14CoolingDeviceService\x12g\n" +
	"\x10GetCoolingDevice\x12'.proto.v1alpha1.GetCoolingDeviceRequest\x1a(.proto.v1alpha1.GetCoolingDeviceResponse\"\x00\x12m\n" +
	"\x12ListCoolingDevices\x12).proto.v1alpha1.ListCoolingDevicesRequest\x1a*.proto.v1alpha1.ListCoolingDevicesResponse\"\x00B\xb9\x01\n" +
	"\x12com.proto.v1alpha1B\fThermalProtoP\x01Z<github.com/u-bmc/u-bmc/api/gen/schema/v1alpha1;protov1alpha1\xa2\x02\x03PXX\xaa\x02\x0eProto.V1alpha1\xca\x02\x0eProto\\V1alpha1\xe2\x02\x1aProto\\V1alpha1\\GPBMetadata\xea\x02\x0fProto::V1alpha1b\x06proto3"

var (
	file_schema_v1alpha1_thermal_proto_rawDescOnce sync.Once
	file_schema_v1alpha1_thermal_proto_rawDescData []byte
)

func file_schema_v1alpha1_thermal_proto_rawDescGZIP() []byte {
	file_schema_v1alpha1_thermal_proto_rawDescOnce.Do(func() {
		file_schema_v1alpha1_thermal_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_schema_v1alpha1_thermal_proto_rawDesc), len(file_schema_v1alpha1_thermal_proto_rawDesc)))
	})
	return file_schema_v1alpha1_thermal_proto_rawDescData
}

var file_schema_v1alpha1_thermal_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_schema_v1alpha1_thermal_proto_msgTypes = make([]protoimpl.MessageInfo, 17)
var file_schema_v1alpha1_thermal_proto_goTypes = []any{
	(ThermalZoneStatus)(0),                // 0: proto.v1alpha1.ThermalZoneStatus
	(CoolingDeviceType)(0),                // 1: proto.v1alpha1.CoolingDeviceType
	(CoolingDeviceStatus)(0),              // 2: proto.v1alpha1.CoolingDeviceStatus
	(ThermalProfileType)(0),               // 3: proto.v1alpha1.ThermalProfileType
	(*ThermalManagement)(nil),             // 4: proto.v1alpha1.ThermalManagement
	(*ThermalZone)(nil),                   // 5: proto.v1alpha1.ThermalZone
	(*CoolingDevice)(nil),                 // 6: proto.v1alpha1.CoolingDevice
	(*PIDSettings)(nil),                   // 7: proto.v1alpha1.PIDSettings
	(*ThermalProfile)(nil),                // 8: proto.v1alpha1.ThermalProfile
	(*GetThermalManagementRequest)(nil),   // 9: proto.v1alpha1.GetThermalManagementRequest
	(*GetThermalManagementResponse)(nil),  // 10: proto.v1alpha1.GetThermalManagementResponse
	(*ListThermalManagementRequest)(nil),  // 11: proto.v1alpha1.ListThermalManagementRequest
	(*ListThermalManagementResponse)(nil), // 12: proto.v1alpha1.ListThermalManagementResponse
	(*GetThermalZoneRequest)(nil),         // 13: proto.v1alpha1.GetThermalZoneRequest
	(*GetThermalZoneResponse)(nil),        // 14: proto.v1alpha1.GetThermalZoneResponse
	(*ListThermalZonesRequest)(nil),       // 15: proto.v1alpha1.ListThermalZonesRequest
	(*ListThermalZonesResponse)(nil),      // 16: proto.v1alpha1.ListThermalZonesResponse
	(*GetCoolingDeviceRequest)(nil),       // 17: proto.v1alpha1.GetCoolingDeviceRequest
	(*GetCoolingDeviceResponse)(nil),      // 18: proto.v1alpha1.GetCoolingDeviceResponse
	(*ListCoolingDevicesRequest)(nil),     // 19: proto.v1alpha1.ListCoolingDevicesRequest
	(*ListCoolingDevicesResponse)(nil),    // 20: proto.v1alpha1.ListCoolingDevicesResponse
}
var file_schema_v1alpha1_thermal_proto_depIdxs = []int32{
	5,  // 0: proto.v1alpha1.ThermalManagement.zones:type_name -> proto.v1alpha1.ThermalZone
	8,  // 1: proto.v1alpha1.ThermalManagement.profile:type_name -> proto.v1alpha1.ThermalProfile
	7,  // 2: proto.v1alpha1.ThermalZone.pid_settings:type_name -> proto.v1alpha1.PIDSettings
	0,  // 3: proto.v1alpha1.ThermalZone.status:type_name -> proto.v1alpha1.ThermalZoneStatus
	1,  // 4: proto.v1alpha1.CoolingDevice.type:type_name -> proto.v1alpha1.CoolingDeviceType
	2,  // 5: proto.v1alpha1.CoolingDevice.status:type_name -> proto.v1alpha1.CoolingDeviceStatus
	3,  // 6: proto.v1alpha1.ThermalProfile.type:type_name -> proto.v1alpha1.ThermalProfileType
	7,  // 7: proto.v1alpha1.ThermalProfile.custom_settings:type_name -> proto.v1alpha1.PIDSettings
	4,  // 8: proto.v1alpha1.GetThermalManagementResponse.thermal_management:type_name -> proto.v1alpha1.ThermalManagement
	4,  // 9: proto.v1alpha1.ListThermalManagementResponse.thermal_managements:type_name -> proto.v1alpha1.ThermalManagement
	5,  // 10: proto.v1alpha1.GetThermalZoneResponse.thermal_zone:type_name -> proto.v1alpha1.ThermalZone
	0,  // 11: proto.v1alpha1.ListThermalZonesRequest.status:type_name -> proto.v1alpha1.ThermalZoneStatus
	5,  // 12: proto.v1alpha1.ListThermalZonesResponse.thermal_zones:type_name -> proto.v1alpha1.ThermalZone
	6,  // 13: proto.v1alpha1.GetCoolingDeviceResponse.cooling_device:type_name -> proto.v1alpha1.CoolingDevice
	1,  // 14: proto.v1alpha1.ListCoolingDevicesRequest.type:type_name -> proto.v1alpha1.CoolingDeviceType
	2,  // 15: proto.v1alpha1.ListCoolingDevicesRequest.status:type_name -> proto.v1alpha1.CoolingDeviceStatus
	6,  // 16: proto.v1alpha1.ListCoolingDevicesResponse.cooling_devices:type_name -> proto.v1alpha1.CoolingDevice
	9,  // 17: proto.v1alpha1.ThermalManagementService.GetThermalManagement:input_type -> proto.v1alpha1.GetThermalManagementRequest
	11, // 18: proto.v1alpha1.ThermalManagementService.ListThermalManagement:input_type -> proto.v1alpha1.ListThermalManagementRequest
	13, // 19: proto.v1alpha1.ThermalZoneService.GetThermalZone:input_type -> proto.v1alpha1.GetThermalZoneRequest
	15, // 20: proto.v1alpha1.ThermalZoneService.ListThermalZones:input_type -> proto.v1alpha1.ListThermalZonesRequest
	17, // 21: proto.v1alpha1.CoolingDeviceService.GetCoolingDevice:input_type -> proto.v1alpha1.GetCoolingDeviceRequest
	19, // 22: proto.v1alpha1.CoolingDeviceService.ListCoolingDevices:input_type -> proto.v1alpha1.ListCoolingDevicesRequest
	10, // 23: proto.v1alpha1.ThermalManagementService.GetThermalManagement:output_type -> proto.v1alpha1.GetThermalManagementResponse
	12, // 24: proto.v1alpha1.ThermalManagementService.ListThermalManagement:output_type -> proto.v1alpha1.ListThermalManagementResponse
	14, // 25: proto.v1alpha1.ThermalZoneService.GetThermalZone:output_type -> proto.v1alpha1.GetThermalZoneResponse
	16, // 26: proto.v1alpha1.ThermalZoneService.ListThermalZones:output_type -> proto.v1alpha1.ListThermalZonesResponse
	18, // 27: proto.v1alpha1.CoolingDeviceService.GetCoolingDevice:output_type -> proto.v1alpha1.GetCoolingDeviceResponse
	20, // 28: proto.v1alpha1.CoolingDeviceService.ListCoolingDevices:output_type -> proto.v1alpha1.ListCoolingDevicesResponse
	23, // [23:29] is the sub-list for method output_type
	17, // [17:23] is the sub-list for method input_type
	17, // [17:17] is the sub-list for extension type_name
	17, // [17:17] is the sub-list for extension extendee
	0,  // [0:17] is the sub-list for field type_name
}

func init() { file_schema_v1alpha1_thermal_proto_init() }
func file_schema_v1alpha1_thermal_proto_init() {
	if File_schema_v1alpha1_thermal_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_schema_v1alpha1_thermal_proto_rawDesc), len(file_schema_v1alpha1_thermal_proto_rawDesc)),
			NumEnums:      4,
			NumMessages:   17,
			NumExtensions: 0,
			NumServices:   3,
		},
		GoTypes:           file_schema_v1alpha1_thermal_proto_goTypes,
		DependencyIndexes: file_schema_v1alpha1_thermal_proto_depIdxs,
		EnumInfos:         file_schema_v1alpha1_thermal_proto_enumTypes,
		MessageInfos:      file_schema_v1alpha1_thermal_proto_msgTypes,
	}.Build()
	File_schema_v1alpha1_thermal_proto = out.File
	file_schema_v1alpha1_thermal_proto_goTypes = nil
	file_schema_v1alpha1_thermal_proto_depIdxs = nil
}
