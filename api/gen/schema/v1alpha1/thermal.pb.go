// SPDX-License-Identifier: BSD-3-Clause

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: schema/v1alpha1/thermal.proto

package schemav1alpha1

import (
	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	fieldmaskpb "google.golang.org/protobuf/types/known/fieldmaskpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ThermalZoneStatus int32

const (
	ThermalZoneStatus_THERMAL_ZONE_STATUS_UNSPECIFIED ThermalZoneStatus = 0
	ThermalZoneStatus_THERMAL_ZONE_STATUS_NORMAL      ThermalZoneStatus = 1
	ThermalZoneStatus_THERMAL_ZONE_STATUS_WARNING     ThermalZoneStatus = 2
	ThermalZoneStatus_THERMAL_ZONE_STATUS_CRITICAL    ThermalZoneStatus = 3
	ThermalZoneStatus_THERMAL_ZONE_STATUS_ERROR       ThermalZoneStatus = 4
)

// Enum value maps for ThermalZoneStatus.
var (
	ThermalZoneStatus_name = map[int32]string{
		0: "THERMAL_ZONE_STATUS_UNSPECIFIED",
		1: "THERMAL_ZONE_STATUS_NORMAL",
		2: "THERMAL_ZONE_STATUS_WARNING",
		3: "THERMAL_ZONE_STATUS_CRITICAL",
		4: "THERMAL_ZONE_STATUS_ERROR",
	}
	ThermalZoneStatus_value = map[string]int32{
		"THERMAL_ZONE_STATUS_UNSPECIFIED": 0,
		"THERMAL_ZONE_STATUS_NORMAL":      1,
		"THERMAL_ZONE_STATUS_WARNING":     2,
		"THERMAL_ZONE_STATUS_CRITICAL":    3,
		"THERMAL_ZONE_STATUS_ERROR":       4,
	}
)

func (x ThermalZoneStatus) Enum() *ThermalZoneStatus {
	p := new(ThermalZoneStatus)
	*p = x
	return p
}

func (x ThermalZoneStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ThermalZoneStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_schema_v1alpha1_thermal_proto_enumTypes[0].Descriptor()
}

func (ThermalZoneStatus) Type() protoreflect.EnumType {
	return &file_schema_v1alpha1_thermal_proto_enumTypes[0]
}

func (x ThermalZoneStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ThermalZoneStatus.Descriptor instead.
func (ThermalZoneStatus) EnumDescriptor() ([]byte, []int) {
	return file_schema_v1alpha1_thermal_proto_rawDescGZIP(), []int{0}
}

type CoolingDeviceType int32

const (
	CoolingDeviceType_COOLING_DEVICE_TYPE_UNSPECIFIED    CoolingDeviceType = 0
	CoolingDeviceType_COOLING_DEVICE_TYPE_FAN            CoolingDeviceType = 1
	CoolingDeviceType_COOLING_DEVICE_TYPE_WATER_PUMP     CoolingDeviceType = 2
	CoolingDeviceType_COOLING_DEVICE_TYPE_HEAT_EXCHANGER CoolingDeviceType = 3
	CoolingDeviceType_COOLING_DEVICE_TYPE_LIQUID_COOLER  CoolingDeviceType = 4
	CoolingDeviceType_COOLING_DEVICE_TYPE_BLOWER         CoolingDeviceType = 5
)

// Enum value maps for CoolingDeviceType.
var (
	CoolingDeviceType_name = map[int32]string{
		0: "COOLING_DEVICE_TYPE_UNSPECIFIED",
		1: "COOLING_DEVICE_TYPE_FAN",
		2: "COOLING_DEVICE_TYPE_WATER_PUMP",
		3: "COOLING_DEVICE_TYPE_HEAT_EXCHANGER",
		4: "COOLING_DEVICE_TYPE_LIQUID_COOLER",
		5: "COOLING_DEVICE_TYPE_BLOWER",
	}
	CoolingDeviceType_value = map[string]int32{
		"COOLING_DEVICE_TYPE_UNSPECIFIED":    0,
		"COOLING_DEVICE_TYPE_FAN":            1,
		"COOLING_DEVICE_TYPE_WATER_PUMP":     2,
		"COOLING_DEVICE_TYPE_HEAT_EXCHANGER": 3,
		"COOLING_DEVICE_TYPE_LIQUID_COOLER":  4,
		"COOLING_DEVICE_TYPE_BLOWER":         5,
	}
)

func (x CoolingDeviceType) Enum() *CoolingDeviceType {
	p := new(CoolingDeviceType)
	*p = x
	return p
}

func (x CoolingDeviceType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CoolingDeviceType) Descriptor() protoreflect.EnumDescriptor {
	return file_schema_v1alpha1_thermal_proto_enumTypes[1].Descriptor()
}

func (CoolingDeviceType) Type() protoreflect.EnumType {
	return &file_schema_v1alpha1_thermal_proto_enumTypes[1]
}

func (x CoolingDeviceType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CoolingDeviceType.Descriptor instead.
func (CoolingDeviceType) EnumDescriptor() ([]byte, []int) {
	return file_schema_v1alpha1_thermal_proto_rawDescGZIP(), []int{1}
}

type CoolingDeviceStatus int32

const (
	CoolingDeviceStatus_COOLING_DEVICE_STATUS_UNSPECIFIED CoolingDeviceStatus = 0
	CoolingDeviceStatus_COOLING_DEVICE_STATUS_ENABLED     CoolingDeviceStatus = 1
	CoolingDeviceStatus_COOLING_DEVICE_STATUS_DISABLED    CoolingDeviceStatus = 2
	CoolingDeviceStatus_COOLING_DEVICE_STATUS_NOT_PRESENT CoolingDeviceStatus = 3
	CoolingDeviceStatus_COOLING_DEVICE_STATUS_ERROR       CoolingDeviceStatus = 4
	CoolingDeviceStatus_COOLING_DEVICE_STATUS_UNKNOWN     CoolingDeviceStatus = 5
)

// Enum value maps for CoolingDeviceStatus.
var (
	CoolingDeviceStatus_name = map[int32]string{
		0: "COOLING_DEVICE_STATUS_UNSPECIFIED",
		1: "COOLING_DEVICE_STATUS_ENABLED",
		2: "COOLING_DEVICE_STATUS_DISABLED",
		3: "COOLING_DEVICE_STATUS_NOT_PRESENT",
		4: "COOLING_DEVICE_STATUS_ERROR",
		5: "COOLING_DEVICE_STATUS_UNKNOWN",
	}
	CoolingDeviceStatus_value = map[string]int32{
		"COOLING_DEVICE_STATUS_UNSPECIFIED": 0,
		"COOLING_DEVICE_STATUS_ENABLED":     1,
		"COOLING_DEVICE_STATUS_DISABLED":    2,
		"COOLING_DEVICE_STATUS_NOT_PRESENT": 3,
		"COOLING_DEVICE_STATUS_ERROR":       4,
		"COOLING_DEVICE_STATUS_UNKNOWN":     5,
	}
)

func (x CoolingDeviceStatus) Enum() *CoolingDeviceStatus {
	p := new(CoolingDeviceStatus)
	*p = x
	return p
}

func (x CoolingDeviceStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CoolingDeviceStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_schema_v1alpha1_thermal_proto_enumTypes[2].Descriptor()
}

func (CoolingDeviceStatus) Type() protoreflect.EnumType {
	return &file_schema_v1alpha1_thermal_proto_enumTypes[2]
}

func (x CoolingDeviceStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CoolingDeviceStatus.Descriptor instead.
func (CoolingDeviceStatus) EnumDescriptor() ([]byte, []int) {
	return file_schema_v1alpha1_thermal_proto_rawDescGZIP(), []int{2}
}

type CoolingDeviceControlMode int32

const (
	CoolingDeviceControlMode_COOLING_DEVICE_CONTROL_MODE_UNSPECIFIED CoolingDeviceControlMode = 0
	CoolingDeviceControlMode_COOLING_DEVICE_CONTROL_MODE_AUTOMATIC   CoolingDeviceControlMode = 1
	CoolingDeviceControlMode_COOLING_DEVICE_CONTROL_MODE_MANUAL      CoolingDeviceControlMode = 2
	CoolingDeviceControlMode_COOLING_DEVICE_CONTROL_MODE_PID         CoolingDeviceControlMode = 3
)

// Enum value maps for CoolingDeviceControlMode.
var (
	CoolingDeviceControlMode_name = map[int32]string{
		0: "COOLING_DEVICE_CONTROL_MODE_UNSPECIFIED",
		1: "COOLING_DEVICE_CONTROL_MODE_AUTOMATIC",
		2: "COOLING_DEVICE_CONTROL_MODE_MANUAL",
		3: "COOLING_DEVICE_CONTROL_MODE_PID",
	}
	CoolingDeviceControlMode_value = map[string]int32{
		"COOLING_DEVICE_CONTROL_MODE_UNSPECIFIED": 0,
		"COOLING_DEVICE_CONTROL_MODE_AUTOMATIC":   1,
		"COOLING_DEVICE_CONTROL_MODE_MANUAL":      2,
		"COOLING_DEVICE_CONTROL_MODE_PID":         3,
	}
)

func (x CoolingDeviceControlMode) Enum() *CoolingDeviceControlMode {
	p := new(CoolingDeviceControlMode)
	*p = x
	return p
}

func (x CoolingDeviceControlMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CoolingDeviceControlMode) Descriptor() protoreflect.EnumDescriptor {
	return file_schema_v1alpha1_thermal_proto_enumTypes[3].Descriptor()
}

func (CoolingDeviceControlMode) Type() protoreflect.EnumType {
	return &file_schema_v1alpha1_thermal_proto_enumTypes[3]
}

func (x CoolingDeviceControlMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CoolingDeviceControlMode.Descriptor instead.
func (CoolingDeviceControlMode) EnumDescriptor() ([]byte, []int) {
	return file_schema_v1alpha1_thermal_proto_rawDescGZIP(), []int{3}
}

type CoolingDeviceProfileType int32

const (
	CoolingDeviceProfileType_COOLING_DEVICE_PROFILE_TYPE_UNSPECIFIED CoolingDeviceProfileType = 0
	CoolingDeviceProfileType_COOLING_DEVICE_PROFILE_TYPE_QUIET       CoolingDeviceProfileType = 1
	CoolingDeviceProfileType_COOLING_DEVICE_PROFILE_TYPE_BALANCED    CoolingDeviceProfileType = 2
	CoolingDeviceProfileType_COOLING_DEVICE_PROFILE_TYPE_AGGRESSIVE  CoolingDeviceProfileType = 3
	CoolingDeviceProfileType_COOLING_DEVICE_PROFILE_TYPE_CUSTOM      CoolingDeviceProfileType = 4
)

// Enum value maps for CoolingDeviceProfileType.
var (
	CoolingDeviceProfileType_name = map[int32]string{
		0: "COOLING_DEVICE_PROFILE_TYPE_UNSPECIFIED",
		1: "COOLING_DEVICE_PROFILE_TYPE_QUIET",
		2: "COOLING_DEVICE_PROFILE_TYPE_BALANCED",
		3: "COOLING_DEVICE_PROFILE_TYPE_AGGRESSIVE",
		4: "COOLING_DEVICE_PROFILE_TYPE_CUSTOM",
	}
	CoolingDeviceProfileType_value = map[string]int32{
		"COOLING_DEVICE_PROFILE_TYPE_UNSPECIFIED": 0,
		"COOLING_DEVICE_PROFILE_TYPE_QUIET":       1,
		"COOLING_DEVICE_PROFILE_TYPE_BALANCED":    2,
		"COOLING_DEVICE_PROFILE_TYPE_AGGRESSIVE":  3,
		"COOLING_DEVICE_PROFILE_TYPE_CUSTOM":      4,
	}
)

func (x CoolingDeviceProfileType) Enum() *CoolingDeviceProfileType {
	p := new(CoolingDeviceProfileType)
	*p = x
	return p
}

func (x CoolingDeviceProfileType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CoolingDeviceProfileType) Descriptor() protoreflect.EnumDescriptor {
	return file_schema_v1alpha1_thermal_proto_enumTypes[4].Descriptor()
}

func (CoolingDeviceProfileType) Type() protoreflect.EnumType {
	return &file_schema_v1alpha1_thermal_proto_enumTypes[4]
}

func (x CoolingDeviceProfileType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CoolingDeviceProfileType.Descriptor instead.
func (CoolingDeviceProfileType) EnumDescriptor() ([]byte, []int) {
	return file_schema_v1alpha1_thermal_proto_rawDescGZIP(), []int{4}
}

type ThermalZone struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	Name               string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	SensorNames        []string               `protobuf:"bytes,2,rep,name=sensor_names,json=sensorNames,proto3" json:"sensor_names,omitempty"`
	CoolingDeviceNames []string               `protobuf:"bytes,3,rep,name=cooling_device_names,json=coolingDeviceNames,proto3" json:"cooling_device_names,omitempty"`
	CurrentTemperature float64                `protobuf:"fixed64,4,opt,name=current_temperature,json=currentTemperature,proto3" json:"current_temperature,omitempty"`
	TargetTemperature  *float64               `protobuf:"fixed64,5,opt,name=target_temperature,json=targetTemperature,proto3,oneof" json:"target_temperature,omitempty"`
	PidSettings        *PIDSettings           `protobuf:"bytes,6,opt,name=pid_settings,json=pidSettings,proto3,oneof" json:"pid_settings,omitempty"`
	Status             ThermalZoneStatus      `protobuf:"varint,7,opt,name=status,proto3,enum=schema.v1alpha1.ThermalZoneStatus" json:"status,omitempty"`
	Location           *Location              `protobuf:"bytes,8,opt,name=location,proto3,oneof" json:"location,omitempty"`
	LastUpdated        *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=last_updated,json=lastUpdated,proto3,oneof" json:"last_updated,omitempty"`
	CustomAttributes   map[string]string      `protobuf:"bytes,10,rep,name=custom_attributes,json=customAttributes,proto3" json:"custom_attributes,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *ThermalZone) Reset() {
	*x = ThermalZone{}
	mi := &file_schema_v1alpha1_thermal_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ThermalZone) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ThermalZone) ProtoMessage() {}

func (x *ThermalZone) ProtoReflect() protoreflect.Message {
	mi := &file_schema_v1alpha1_thermal_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ThermalZone.ProtoReflect.Descriptor instead.
func (*ThermalZone) Descriptor() ([]byte, []int) {
	return file_schema_v1alpha1_thermal_proto_rawDescGZIP(), []int{0}
}

func (x *ThermalZone) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ThermalZone) GetSensorNames() []string {
	if x != nil {
		return x.SensorNames
	}
	return nil
}

func (x *ThermalZone) GetCoolingDeviceNames() []string {
	if x != nil {
		return x.CoolingDeviceNames
	}
	return nil
}

func (x *ThermalZone) GetCurrentTemperature() float64 {
	if x != nil {
		return x.CurrentTemperature
	}
	return 0
}

func (x *ThermalZone) GetTargetTemperature() float64 {
	if x != nil && x.TargetTemperature != nil {
		return *x.TargetTemperature
	}
	return 0
}

func (x *ThermalZone) GetPidSettings() *PIDSettings {
	if x != nil {
		return x.PidSettings
	}
	return nil
}

func (x *ThermalZone) GetStatus() ThermalZoneStatus {
	if x != nil {
		return x.Status
	}
	return ThermalZoneStatus_THERMAL_ZONE_STATUS_UNSPECIFIED
}

func (x *ThermalZone) GetLocation() *Location {
	if x != nil {
		return x.Location
	}
	return nil
}

func (x *ThermalZone) GetLastUpdated() *timestamppb.Timestamp {
	if x != nil {
		return x.LastUpdated
	}
	return nil
}

func (x *ThermalZone) GetCustomAttributes() map[string]string {
	if x != nil {
		return x.CustomAttributes
	}
	return nil
}

type CoolingDevice struct {
	state                  protoimpl.MessageState    `protogen:"open.v1"`
	Name                   string                    `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Type                   *CoolingDeviceType        `protobuf:"varint,2,opt,name=type,proto3,enum=schema.v1alpha1.CoolingDeviceType,oneof" json:"type,omitempty"`
	CoolingPowerPercent    *float64                  `protobuf:"fixed64,3,opt,name=cooling_power_percent,json=coolingPowerPercent,proto3,oneof" json:"cooling_power_percent,omitempty"`
	MinCoolingPowerPercent *float64                  `protobuf:"fixed64,4,opt,name=min_cooling_power_percent,json=minCoolingPowerPercent,proto3,oneof" json:"min_cooling_power_percent,omitempty"`
	MaxCoolingPowerPercent *float64                  `protobuf:"fixed64,5,opt,name=max_cooling_power_percent,json=maxCoolingPowerPercent,proto3,oneof" json:"max_cooling_power_percent,omitempty"`
	Sensors                []*Sensor                 `protobuf:"bytes,6,rep,name=sensors,proto3" json:"sensors,omitempty"`
	Status                 *CoolingDeviceStatus      `protobuf:"varint,7,opt,name=status,proto3,enum=schema.v1alpha1.CoolingDeviceStatus,oneof" json:"status,omitempty"`
	ControlMode            *CoolingDeviceControlMode `protobuf:"varint,8,opt,name=control_mode,json=controlMode,proto3,enum=schema.v1alpha1.CoolingDeviceControlMode,oneof" json:"control_mode,omitempty"`
	Location               *Location                 `protobuf:"bytes,9,opt,name=location,proto3,oneof" json:"location,omitempty"`
	LastUpdated            *timestamppb.Timestamp    `protobuf:"bytes,10,opt,name=last_updated,json=lastUpdated,proto3,oneof" json:"last_updated,omitempty"`
	CustomAttributes       map[string]string         `protobuf:"bytes,11,rep,name=custom_attributes,json=customAttributes,proto3" json:"custom_attributes,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *CoolingDevice) Reset() {
	*x = CoolingDevice{}
	mi := &file_schema_v1alpha1_thermal_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CoolingDevice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CoolingDevice) ProtoMessage() {}

func (x *CoolingDevice) ProtoReflect() protoreflect.Message {
	mi := &file_schema_v1alpha1_thermal_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CoolingDevice.ProtoReflect.Descriptor instead.
func (*CoolingDevice) Descriptor() ([]byte, []int) {
	return file_schema_v1alpha1_thermal_proto_rawDescGZIP(), []int{1}
}

func (x *CoolingDevice) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CoolingDevice) GetType() CoolingDeviceType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return CoolingDeviceType_COOLING_DEVICE_TYPE_UNSPECIFIED
}

func (x *CoolingDevice) GetCoolingPowerPercent() float64 {
	if x != nil && x.CoolingPowerPercent != nil {
		return *x.CoolingPowerPercent
	}
	return 0
}

func (x *CoolingDevice) GetMinCoolingPowerPercent() float64 {
	if x != nil && x.MinCoolingPowerPercent != nil {
		return *x.MinCoolingPowerPercent
	}
	return 0
}

func (x *CoolingDevice) GetMaxCoolingPowerPercent() float64 {
	if x != nil && x.MaxCoolingPowerPercent != nil {
		return *x.MaxCoolingPowerPercent
	}
	return 0
}

func (x *CoolingDevice) GetSensors() []*Sensor {
	if x != nil {
		return x.Sensors
	}
	return nil
}

func (x *CoolingDevice) GetStatus() CoolingDeviceStatus {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return CoolingDeviceStatus_COOLING_DEVICE_STATUS_UNSPECIFIED
}

func (x *CoolingDevice) GetControlMode() CoolingDeviceControlMode {
	if x != nil && x.ControlMode != nil {
		return *x.ControlMode
	}
	return CoolingDeviceControlMode_COOLING_DEVICE_CONTROL_MODE_UNSPECIFIED
}

func (x *CoolingDevice) GetLocation() *Location {
	if x != nil {
		return x.Location
	}
	return nil
}

func (x *CoolingDevice) GetLastUpdated() *timestamppb.Timestamp {
	if x != nil {
		return x.LastUpdated
	}
	return nil
}

func (x *CoolingDevice) GetCustomAttributes() map[string]string {
	if x != nil {
		return x.CustomAttributes
	}
	return nil
}

type ThermalProfile struct {
	state          protoimpl.MessageState   `protogen:"open.v1"`
	Type           CoolingDeviceProfileType `protobuf:"varint,1,opt,name=type,proto3,enum=schema.v1alpha1.CoolingDeviceProfileType" json:"type,omitempty"`
	CustomSettings *PIDSettings             `protobuf:"bytes,2,opt,name=custom_settings,json=customSettings,proto3,oneof" json:"custom_settings,omitempty"`
	Description    *string                  `protobuf:"bytes,3,opt,name=description,proto3,oneof" json:"description,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *ThermalProfile) Reset() {
	*x = ThermalProfile{}
	mi := &file_schema_v1alpha1_thermal_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ThermalProfile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ThermalProfile) ProtoMessage() {}

func (x *ThermalProfile) ProtoReflect() protoreflect.Message {
	mi := &file_schema_v1alpha1_thermal_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ThermalProfile.ProtoReflect.Descriptor instead.
func (*ThermalProfile) Descriptor() ([]byte, []int) {
	return file_schema_v1alpha1_thermal_proto_rawDescGZIP(), []int{2}
}

func (x *ThermalProfile) GetType() CoolingDeviceProfileType {
	if x != nil {
		return x.Type
	}
	return CoolingDeviceProfileType_COOLING_DEVICE_PROFILE_TYPE_UNSPECIFIED
}

func (x *ThermalProfile) GetCustomSettings() *PIDSettings {
	if x != nil {
		return x.CustomSettings
	}
	return nil
}

func (x *ThermalProfile) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

type PIDSettings struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Kp            float64                `protobuf:"fixed64,1,opt,name=kp,proto3" json:"kp,omitempty"`
	Ki            float64                `protobuf:"fixed64,2,opt,name=ki,proto3" json:"ki,omitempty"`
	Kd            float64                `protobuf:"fixed64,3,opt,name=kd,proto3" json:"kd,omitempty"`
	SampleTime    float64                `protobuf:"fixed64,4,opt,name=sample_time,json=sampleTime,proto3" json:"sample_time,omitempty"`
	OutputMin     *float64               `protobuf:"fixed64,5,opt,name=output_min,json=outputMin,proto3,oneof" json:"output_min,omitempty"`
	OutputMax     *float64               `protobuf:"fixed64,6,opt,name=output_max,json=outputMax,proto3,oneof" json:"output_max,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PIDSettings) Reset() {
	*x = PIDSettings{}
	mi := &file_schema_v1alpha1_thermal_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PIDSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PIDSettings) ProtoMessage() {}

func (x *PIDSettings) ProtoReflect() protoreflect.Message {
	mi := &file_schema_v1alpha1_thermal_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PIDSettings.ProtoReflect.Descriptor instead.
func (*PIDSettings) Descriptor() ([]byte, []int) {
	return file_schema_v1alpha1_thermal_proto_rawDescGZIP(), []int{3}
}

func (x *PIDSettings) GetKp() float64 {
	if x != nil {
		return x.Kp
	}
	return 0
}

func (x *PIDSettings) GetKi() float64 {
	if x != nil {
		return x.Ki
	}
	return 0
}

func (x *PIDSettings) GetKd() float64 {
	if x != nil {
		return x.Kd
	}
	return 0
}

func (x *PIDSettings) GetSampleTime() float64 {
	if x != nil {
		return x.SampleTime
	}
	return 0
}

func (x *PIDSettings) GetOutputMin() float64 {
	if x != nil && x.OutputMin != nil {
		return *x.OutputMin
	}
	return 0
}

func (x *PIDSettings) GetOutputMax() float64 {
	if x != nil && x.OutputMax != nil {
		return *x.OutputMax
	}
	return 0
}

type GetThermalZoneRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Identifier:
	//
	//	*GetThermalZoneRequest_Name
	//	*GetThermalZoneRequest_Status
	//	*GetThermalZoneRequest_Location
	Identifier    isGetThermalZoneRequest_Identifier `protobuf_oneof:"identifier"`
	FieldMask     *fieldmaskpb.FieldMask             `protobuf:"bytes,4,opt,name=field_mask,json=fieldMask,proto3" json:"field_mask,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetThermalZoneRequest) Reset() {
	*x = GetThermalZoneRequest{}
	mi := &file_schema_v1alpha1_thermal_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetThermalZoneRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetThermalZoneRequest) ProtoMessage() {}

func (x *GetThermalZoneRequest) ProtoReflect() protoreflect.Message {
	mi := &file_schema_v1alpha1_thermal_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetThermalZoneRequest.ProtoReflect.Descriptor instead.
func (*GetThermalZoneRequest) Descriptor() ([]byte, []int) {
	return file_schema_v1alpha1_thermal_proto_rawDescGZIP(), []int{4}
}

func (x *GetThermalZoneRequest) GetIdentifier() isGetThermalZoneRequest_Identifier {
	if x != nil {
		return x.Identifier
	}
	return nil
}

func (x *GetThermalZoneRequest) GetName() string {
	if x != nil {
		if x, ok := x.Identifier.(*GetThermalZoneRequest_Name); ok {
			return x.Name
		}
	}
	return ""
}

func (x *GetThermalZoneRequest) GetStatus() ThermalZoneStatus {
	if x != nil {
		if x, ok := x.Identifier.(*GetThermalZoneRequest_Status); ok {
			return x.Status
		}
	}
	return ThermalZoneStatus_THERMAL_ZONE_STATUS_UNSPECIFIED
}

func (x *GetThermalZoneRequest) GetLocation() *Location {
	if x != nil {
		if x, ok := x.Identifier.(*GetThermalZoneRequest_Location); ok {
			return x.Location
		}
	}
	return nil
}

func (x *GetThermalZoneRequest) GetFieldMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.FieldMask
	}
	return nil
}

type isGetThermalZoneRequest_Identifier interface {
	isGetThermalZoneRequest_Identifier()
}

type GetThermalZoneRequest_Name struct {
	Name string `protobuf:"bytes,1,opt,name=name,proto3,oneof"`
}

type GetThermalZoneRequest_Status struct {
	Status ThermalZoneStatus `protobuf:"varint,2,opt,name=status,proto3,enum=schema.v1alpha1.ThermalZoneStatus,oneof"`
}

type GetThermalZoneRequest_Location struct {
	Location *Location `protobuf:"bytes,3,opt,name=location,proto3,oneof"`
}

func (*GetThermalZoneRequest_Name) isGetThermalZoneRequest_Identifier() {}

func (*GetThermalZoneRequest_Status) isGetThermalZoneRequest_Identifier() {}

func (*GetThermalZoneRequest_Location) isGetThermalZoneRequest_Identifier() {}

type GetThermalZoneResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ThermalZones  []*ThermalZone         `protobuf:"bytes,1,rep,name=thermal_zones,json=thermalZones,proto3" json:"thermal_zones,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetThermalZoneResponse) Reset() {
	*x = GetThermalZoneResponse{}
	mi := &file_schema_v1alpha1_thermal_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetThermalZoneResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetThermalZoneResponse) ProtoMessage() {}

func (x *GetThermalZoneResponse) ProtoReflect() protoreflect.Message {
	mi := &file_schema_v1alpha1_thermal_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetThermalZoneResponse.ProtoReflect.Descriptor instead.
func (*GetThermalZoneResponse) Descriptor() ([]byte, []int) {
	return file_schema_v1alpha1_thermal_proto_rawDescGZIP(), []int{5}
}

func (x *GetThermalZoneResponse) GetThermalZones() []*ThermalZone {
	if x != nil {
		return x.ThermalZones
	}
	return nil
}

type SetThermalZoneRequest struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	Name              string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	TargetTemperature *float64               `protobuf:"fixed64,2,opt,name=target_temperature,json=targetTemperature,proto3,oneof" json:"target_temperature,omitempty"`
	PidSettings       *PIDSettings           `protobuf:"bytes,3,opt,name=pid_settings,json=pidSettings,proto3,oneof" json:"pid_settings,omitempty"`
	Status            *ThermalZoneStatus     `protobuf:"varint,4,opt,name=status,proto3,enum=schema.v1alpha1.ThermalZoneStatus,oneof" json:"status,omitempty"`
	FieldMask         *fieldmaskpb.FieldMask `protobuf:"bytes,5,opt,name=field_mask,json=fieldMask,proto3" json:"field_mask,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *SetThermalZoneRequest) Reset() {
	*x = SetThermalZoneRequest{}
	mi := &file_schema_v1alpha1_thermal_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetThermalZoneRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetThermalZoneRequest) ProtoMessage() {}

func (x *SetThermalZoneRequest) ProtoReflect() protoreflect.Message {
	mi := &file_schema_v1alpha1_thermal_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetThermalZoneRequest.ProtoReflect.Descriptor instead.
func (*SetThermalZoneRequest) Descriptor() ([]byte, []int) {
	return file_schema_v1alpha1_thermal_proto_rawDescGZIP(), []int{6}
}

func (x *SetThermalZoneRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SetThermalZoneRequest) GetTargetTemperature() float64 {
	if x != nil && x.TargetTemperature != nil {
		return *x.TargetTemperature
	}
	return 0
}

func (x *SetThermalZoneRequest) GetPidSettings() *PIDSettings {
	if x != nil {
		return x.PidSettings
	}
	return nil
}

func (x *SetThermalZoneRequest) GetStatus() ThermalZoneStatus {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return ThermalZoneStatus_THERMAL_ZONE_STATUS_UNSPECIFIED
}

func (x *SetThermalZoneRequest) GetFieldMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.FieldMask
	}
	return nil
}

type SetThermalZoneResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ThermalZone   *ThermalZone           `protobuf:"bytes,1,opt,name=thermal_zone,json=thermalZone,proto3" json:"thermal_zone,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SetThermalZoneResponse) Reset() {
	*x = SetThermalZoneResponse{}
	mi := &file_schema_v1alpha1_thermal_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetThermalZoneResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetThermalZoneResponse) ProtoMessage() {}

func (x *SetThermalZoneResponse) ProtoReflect() protoreflect.Message {
	mi := &file_schema_v1alpha1_thermal_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetThermalZoneResponse.ProtoReflect.Descriptor instead.
func (*SetThermalZoneResponse) Descriptor() ([]byte, []int) {
	return file_schema_v1alpha1_thermal_proto_rawDescGZIP(), []int{7}
}

func (x *SetThermalZoneResponse) GetThermalZone() *ThermalZone {
	if x != nil {
		return x.ThermalZone
	}
	return nil
}

type ListThermalZonesRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	FieldMask     *fieldmaskpb.FieldMask `protobuf:"bytes,1,opt,name=field_mask,json=fieldMask,proto3" json:"field_mask,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListThermalZonesRequest) Reset() {
	*x = ListThermalZonesRequest{}
	mi := &file_schema_v1alpha1_thermal_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListThermalZonesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListThermalZonesRequest) ProtoMessage() {}

func (x *ListThermalZonesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_schema_v1alpha1_thermal_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListThermalZonesRequest.ProtoReflect.Descriptor instead.
func (*ListThermalZonesRequest) Descriptor() ([]byte, []int) {
	return file_schema_v1alpha1_thermal_proto_rawDescGZIP(), []int{8}
}

func (x *ListThermalZonesRequest) GetFieldMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.FieldMask
	}
	return nil
}

type ListThermalZonesResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ThermalZones  []*ThermalZone         `protobuf:"bytes,1,rep,name=thermal_zones,json=thermalZones,proto3" json:"thermal_zones,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListThermalZonesResponse) Reset() {
	*x = ListThermalZonesResponse{}
	mi := &file_schema_v1alpha1_thermal_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListThermalZonesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListThermalZonesResponse) ProtoMessage() {}

func (x *ListThermalZonesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_schema_v1alpha1_thermal_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListThermalZonesResponse.ProtoReflect.Descriptor instead.
func (*ListThermalZonesResponse) Descriptor() ([]byte, []int) {
	return file_schema_v1alpha1_thermal_proto_rawDescGZIP(), []int{9}
}

func (x *ListThermalZonesResponse) GetThermalZones() []*ThermalZone {
	if x != nil {
		return x.ThermalZones
	}
	return nil
}

type ThermalEmergencyAlert struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Type          string                 `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	SensorId      *string                `protobuf:"bytes,2,opt,name=sensor_id,json=sensorId,proto3,oneof" json:"sensor_id,omitempty"`
	SensorName    *string                `protobuf:"bytes,3,opt,name=sensor_name,json=sensorName,proto3,oneof" json:"sensor_name,omitempty"`
	ZoneName      *string                `protobuf:"bytes,4,opt,name=zone_name,json=zoneName,proto3,oneof" json:"zone_name,omitempty"`
	Temperature   float64                `protobuf:"fixed64,5,opt,name=temperature,proto3" json:"temperature,omitempty"`
	Threshold     *float64               `protobuf:"fixed64,6,opt,name=threshold,proto3,oneof" json:"threshold,omitempty"`
	Severity      string                 `protobuf:"bytes,7,opt,name=severity,proto3" json:"severity,omitempty"`
	Action        *string                `protobuf:"bytes,8,opt,name=action,proto3,oneof" json:"action,omitempty"`
	Timestamp     *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Message       string                 `protobuf:"bytes,10,opt,name=message,proto3" json:"message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ThermalEmergencyAlert) Reset() {
	*x = ThermalEmergencyAlert{}
	mi := &file_schema_v1alpha1_thermal_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ThermalEmergencyAlert) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ThermalEmergencyAlert) ProtoMessage() {}

func (x *ThermalEmergencyAlert) ProtoReflect() protoreflect.Message {
	mi := &file_schema_v1alpha1_thermal_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ThermalEmergencyAlert.ProtoReflect.Descriptor instead.
func (*ThermalEmergencyAlert) Descriptor() ([]byte, []int) {
	return file_schema_v1alpha1_thermal_proto_rawDescGZIP(), []int{10}
}

func (x *ThermalEmergencyAlert) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *ThermalEmergencyAlert) GetSensorId() string {
	if x != nil && x.SensorId != nil {
		return *x.SensorId
	}
	return ""
}

func (x *ThermalEmergencyAlert) GetSensorName() string {
	if x != nil && x.SensorName != nil {
		return *x.SensorName
	}
	return ""
}

func (x *ThermalEmergencyAlert) GetZoneName() string {
	if x != nil && x.ZoneName != nil {
		return *x.ZoneName
	}
	return ""
}

func (x *ThermalEmergencyAlert) GetTemperature() float64 {
	if x != nil {
		return x.Temperature
	}
	return 0
}

func (x *ThermalEmergencyAlert) GetThreshold() float64 {
	if x != nil && x.Threshold != nil {
		return *x.Threshold
	}
	return 0
}

func (x *ThermalEmergencyAlert) GetSeverity() string {
	if x != nil {
		return x.Severity
	}
	return ""
}

func (x *ThermalEmergencyAlert) GetAction() string {
	if x != nil && x.Action != nil {
		return *x.Action
	}
	return ""
}

func (x *ThermalEmergencyAlert) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *ThermalEmergencyAlert) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type ThermalZoneTemperatureRequest struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	ZoneNames            []string               `protobuf:"bytes,1,rep,name=zone_names,json=zoneNames,proto3" json:"zone_names,omitempty"`
	IncludeSensorDetails *bool                  `protobuf:"varint,2,opt,name=include_sensor_details,json=includeSensorDetails,proto3,oneof" json:"include_sensor_details,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *ThermalZoneTemperatureRequest) Reset() {
	*x = ThermalZoneTemperatureRequest{}
	mi := &file_schema_v1alpha1_thermal_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ThermalZoneTemperatureRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ThermalZoneTemperatureRequest) ProtoMessage() {}

func (x *ThermalZoneTemperatureRequest) ProtoReflect() protoreflect.Message {
	mi := &file_schema_v1alpha1_thermal_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ThermalZoneTemperatureRequest.ProtoReflect.Descriptor instead.
func (*ThermalZoneTemperatureRequest) Descriptor() ([]byte, []int) {
	return file_schema_v1alpha1_thermal_proto_rawDescGZIP(), []int{11}
}

func (x *ThermalZoneTemperatureRequest) GetZoneNames() []string {
	if x != nil {
		return x.ZoneNames
	}
	return nil
}

func (x *ThermalZoneTemperatureRequest) GetIncludeSensorDetails() bool {
	if x != nil && x.IncludeSensorDetails != nil {
		return *x.IncludeSensorDetails
	}
	return false
}

type ThermalZoneTemperatureResponse struct {
	state            protoimpl.MessageState    `protogen:"open.v1"`
	ZoneTemperatures []*ThermalZoneTemperature `protobuf:"bytes,1,rep,name=zone_temperatures,json=zoneTemperatures,proto3" json:"zone_temperatures,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *ThermalZoneTemperatureResponse) Reset() {
	*x = ThermalZoneTemperatureResponse{}
	mi := &file_schema_v1alpha1_thermal_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ThermalZoneTemperatureResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ThermalZoneTemperatureResponse) ProtoMessage() {}

func (x *ThermalZoneTemperatureResponse) ProtoReflect() protoreflect.Message {
	mi := &file_schema_v1alpha1_thermal_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ThermalZoneTemperatureResponse.ProtoReflect.Descriptor instead.
func (*ThermalZoneTemperatureResponse) Descriptor() ([]byte, []int) {
	return file_schema_v1alpha1_thermal_proto_rawDescGZIP(), []int{12}
}

func (x *ThermalZoneTemperatureResponse) GetZoneTemperatures() []*ThermalZoneTemperature {
	if x != nil {
		return x.ZoneTemperatures
	}
	return nil
}

type ThermalZoneTemperature struct {
	state                 protoimpl.MessageState `protogen:"open.v1"`
	ZoneName              string                 `protobuf:"bytes,1,opt,name=zone_name,json=zoneName,proto3" json:"zone_name,omitempty"`
	CurrentTemperature    float64                `protobuf:"fixed64,2,opt,name=current_temperature,json=currentTemperature,proto3" json:"current_temperature,omitempty"`
	TargetTemperature     *float64               `protobuf:"fixed64,3,opt,name=target_temperature,json=targetTemperature,proto3,oneof" json:"target_temperature,omitempty"`
	ContributingSensorIds []string               `protobuf:"bytes,4,rep,name=contributing_sensor_ids,json=contributingSensorIds,proto3" json:"contributing_sensor_ids,omitempty"`
	LastUpdated           *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=last_updated,json=lastUpdated,proto3" json:"last_updated,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *ThermalZoneTemperature) Reset() {
	*x = ThermalZoneTemperature{}
	mi := &file_schema_v1alpha1_thermal_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ThermalZoneTemperature) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ThermalZoneTemperature) ProtoMessage() {}

func (x *ThermalZoneTemperature) ProtoReflect() protoreflect.Message {
	mi := &file_schema_v1alpha1_thermal_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ThermalZoneTemperature.ProtoReflect.Descriptor instead.
func (*ThermalZoneTemperature) Descriptor() ([]byte, []int) {
	return file_schema_v1alpha1_thermal_proto_rawDescGZIP(), []int{13}
}

func (x *ThermalZoneTemperature) GetZoneName() string {
	if x != nil {
		return x.ZoneName
	}
	return ""
}

func (x *ThermalZoneTemperature) GetCurrentTemperature() float64 {
	if x != nil {
		return x.CurrentTemperature
	}
	return 0
}

func (x *ThermalZoneTemperature) GetTargetTemperature() float64 {
	if x != nil && x.TargetTemperature != nil {
		return *x.TargetTemperature
	}
	return 0
}

func (x *ThermalZoneTemperature) GetContributingSensorIds() []string {
	if x != nil {
		return x.ContributingSensorIds
	}
	return nil
}

func (x *ThermalZoneTemperature) GetLastUpdated() *timestamppb.Timestamp {
	if x != nil {
		return x.LastUpdated
	}
	return nil
}

type GetCoolingDeviceRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetCoolingDeviceRequest) Reset() {
	*x = GetCoolingDeviceRequest{}
	mi := &file_schema_v1alpha1_thermal_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetCoolingDeviceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCoolingDeviceRequest) ProtoMessage() {}

func (x *GetCoolingDeviceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_schema_v1alpha1_thermal_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCoolingDeviceRequest.ProtoReflect.Descriptor instead.
func (*GetCoolingDeviceRequest) Descriptor() ([]byte, []int) {
	return file_schema_v1alpha1_thermal_proto_rawDescGZIP(), []int{14}
}

func (x *GetCoolingDeviceRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type GetCoolingDeviceResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	CoolingDevice *CoolingDevice         `protobuf:"bytes,1,opt,name=cooling_device,json=coolingDevice,proto3" json:"cooling_device,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetCoolingDeviceResponse) Reset() {
	*x = GetCoolingDeviceResponse{}
	mi := &file_schema_v1alpha1_thermal_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetCoolingDeviceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCoolingDeviceResponse) ProtoMessage() {}

func (x *GetCoolingDeviceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_schema_v1alpha1_thermal_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCoolingDeviceResponse.ProtoReflect.Descriptor instead.
func (*GetCoolingDeviceResponse) Descriptor() ([]byte, []int) {
	return file_schema_v1alpha1_thermal_proto_rawDescGZIP(), []int{15}
}

func (x *GetCoolingDeviceResponse) GetCoolingDevice() *CoolingDevice {
	if x != nil {
		return x.CoolingDevice
	}
	return nil
}

type SetCoolingDeviceRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	PowerPercent  *float64               `protobuf:"fixed64,2,opt,name=power_percent,json=powerPercent,proto3,oneof" json:"power_percent,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SetCoolingDeviceRequest) Reset() {
	*x = SetCoolingDeviceRequest{}
	mi := &file_schema_v1alpha1_thermal_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetCoolingDeviceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetCoolingDeviceRequest) ProtoMessage() {}

func (x *SetCoolingDeviceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_schema_v1alpha1_thermal_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetCoolingDeviceRequest.ProtoReflect.Descriptor instead.
func (*SetCoolingDeviceRequest) Descriptor() ([]byte, []int) {
	return file_schema_v1alpha1_thermal_proto_rawDescGZIP(), []int{16}
}

func (x *SetCoolingDeviceRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SetCoolingDeviceRequest) GetPowerPercent() float64 {
	if x != nil && x.PowerPercent != nil {
		return *x.PowerPercent
	}
	return 0
}

type SetCoolingDeviceResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	CoolingDevice *CoolingDevice         `protobuf:"bytes,1,opt,name=cooling_device,json=coolingDevice,proto3" json:"cooling_device,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SetCoolingDeviceResponse) Reset() {
	*x = SetCoolingDeviceResponse{}
	mi := &file_schema_v1alpha1_thermal_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetCoolingDeviceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetCoolingDeviceResponse) ProtoMessage() {}

func (x *SetCoolingDeviceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_schema_v1alpha1_thermal_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetCoolingDeviceResponse.ProtoReflect.Descriptor instead.
func (*SetCoolingDeviceResponse) Descriptor() ([]byte, []int) {
	return file_schema_v1alpha1_thermal_proto_rawDescGZIP(), []int{17}
}

func (x *SetCoolingDeviceResponse) GetCoolingDevice() *CoolingDevice {
	if x != nil {
		return x.CoolingDevice
	}
	return nil
}

type ListCoolingDevicesRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	FieldMask     *fieldmaskpb.FieldMask `protobuf:"bytes,1,opt,name=field_mask,json=fieldMask,proto3" json:"field_mask,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListCoolingDevicesRequest) Reset() {
	*x = ListCoolingDevicesRequest{}
	mi := &file_schema_v1alpha1_thermal_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListCoolingDevicesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCoolingDevicesRequest) ProtoMessage() {}

func (x *ListCoolingDevicesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_schema_v1alpha1_thermal_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCoolingDevicesRequest.ProtoReflect.Descriptor instead.
func (*ListCoolingDevicesRequest) Descriptor() ([]byte, []int) {
	return file_schema_v1alpha1_thermal_proto_rawDescGZIP(), []int{18}
}

func (x *ListCoolingDevicesRequest) GetFieldMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.FieldMask
	}
	return nil
}

type ListCoolingDevicesResponse struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	CoolingDevices []*CoolingDevice       `protobuf:"bytes,1,rep,name=cooling_devices,json=coolingDevices,proto3" json:"cooling_devices,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *ListCoolingDevicesResponse) Reset() {
	*x = ListCoolingDevicesResponse{}
	mi := &file_schema_v1alpha1_thermal_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListCoolingDevicesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCoolingDevicesResponse) ProtoMessage() {}

func (x *ListCoolingDevicesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_schema_v1alpha1_thermal_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCoolingDevicesResponse.ProtoReflect.Descriptor instead.
func (*ListCoolingDevicesResponse) Descriptor() ([]byte, []int) {
	return file_schema_v1alpha1_thermal_proto_rawDescGZIP(), []int{19}
}

func (x *ListCoolingDevicesResponse) GetCoolingDevices() []*CoolingDevice {
	if x != nil {
		return x.CoolingDevices
	}
	return nil
}

type ThermalEventResponse struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	EventType      string                 `protobuf:"bytes,1,opt,name=event_type,json=eventType,proto3" json:"event_type,omitempty"`
	ComponentName  string                 `protobuf:"bytes,2,opt,name=component_name,json=componentName,proto3" json:"component_name,omitempty"`
	Action         string                 `protobuf:"bytes,3,opt,name=action,proto3" json:"action,omitempty"`
	Success        bool                   `protobuf:"varint,4,opt,name=success,proto3" json:"success,omitempty"`
	ErrorMessage   *string                `protobuf:"bytes,5,opt,name=error_message,json=errorMessage,proto3,oneof" json:"error_message,omitempty"`
	Message        string                 `protobuf:"bytes,6,opt,name=message,proto3" json:"message,omitempty"`
	Timestamp      *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	AdditionalData map[string]string      `protobuf:"bytes,8,rep,name=additional_data,json=additionalData,proto3" json:"additional_data,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *ThermalEventResponse) Reset() {
	*x = ThermalEventResponse{}
	mi := &file_schema_v1alpha1_thermal_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ThermalEventResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ThermalEventResponse) ProtoMessage() {}

func (x *ThermalEventResponse) ProtoReflect() protoreflect.Message {
	mi := &file_schema_v1alpha1_thermal_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ThermalEventResponse.ProtoReflect.Descriptor instead.
func (*ThermalEventResponse) Descriptor() ([]byte, []int) {
	return file_schema_v1alpha1_thermal_proto_rawDescGZIP(), []int{20}
}

func (x *ThermalEventResponse) GetEventType() string {
	if x != nil {
		return x.EventType
	}
	return ""
}

func (x *ThermalEventResponse) GetComponentName() string {
	if x != nil {
		return x.ComponentName
	}
	return ""
}

func (x *ThermalEventResponse) GetAction() string {
	if x != nil {
		return x.Action
	}
	return ""
}

func (x *ThermalEventResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *ThermalEventResponse) GetErrorMessage() string {
	if x != nil && x.ErrorMessage != nil {
		return *x.ErrorMessage
	}
	return ""
}

func (x *ThermalEventResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ThermalEventResponse) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *ThermalEventResponse) GetAdditionalData() map[string]string {
	if x != nil {
		return x.AdditionalData
	}
	return nil
}

var File_schema_v1alpha1_thermal_proto protoreflect.FileDescriptor

const file_schema_v1alpha1_thermal_proto_rawDesc = "" +
	"\n" +
	"\x1dschema/v1alpha1/thermal.proto\x12\x0fschema.v1alpha1\x1a\x1bbuf/validate/validate.proto\x1a google/protobuf/field_mask.proto\x1a\x1fgoogle/protobuf/timestamp.proto\x1a\x1eschema/v1alpha1/location.proto\x1a\x1cschema/v1alpha1/sensor.proto\"\xe6\x05\n" +
	"\vThermalZone\x12\x1b\n" +
	"\x04name\x18\x01 \x01(\tB\a\xbaH\x04r\x02\x10\x01R\x04name\x12+\n" +
	"\fsensor_names\x18\x02 \x03(\tB\b\xbaH\x05\x92\x01\x02\b\x01R\vsensorNames\x120\n" +
	"\x14cooling_device_names\x18\x03 \x03(\tR\x12coolingDeviceNames\x12/\n" +
	"\x13current_temperature\x18\x04 \x01(\x01R\x12currentTemperature\x122\n" +
	"\x12target_temperature\x18\x05 \x01(\x01H\x00R\x11targetTemperature\x88\x01\x01\x12D\n" +
	"\fpid_settings\x18\x06 \x01(\v2\x1c.schema.v1alpha1.PIDSettingsH\x01R\vpidSettings\x88\x01\x01\x12D\n" +
	"\x06status\x18\a \x01(\x0e2\".schema.v1alpha1.ThermalZoneStatusB\b\xbaH\x05\x82\x01\x02\x10\x01R\x06status\x12:\n" +
	"\blocation\x18\b \x01(\v2\x19.schema.v1alpha1.LocationH\x02R\blocation\x88\x01\x01\x12B\n" +
	"\flast_updated\x18\t \x01(\v2\x1a.google.protobuf.TimestampH\x03R\vlastUpdated\x88\x01\x01\x12_\n" +
	"\x11custom_attributes\x18\n" +
	" \x03(\v22.schema.v1alpha1.ThermalZone.CustomAttributesEntryR\x10customAttributes\x1aC\n" +
	"\x15CustomAttributesEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01B\x15\n" +
	"\x13_target_temperatureB\x0f\n" +
	"\r_pid_settingsB\v\n" +
	"\t_locationB\x0f\n" +
	"\r_last_updated\"\x82\r\n" +
	"\rCoolingDevice\x12\x1b\n" +
	"\x04name\x18\x01 \x01(\tB\a\xbaH\x04r\x02\x10\x01R\x04name\x12E\n" +
	"\x04type\x18\x02 \x01(\x0e2\".schema.v1alpha1.CoolingDeviceTypeB\b\xbaH\x05\x82\x01\x02\x10\x01H\x00R\x04type\x88\x01\x01\x12P\n" +
	"\x15cooling_power_percent\x18\x03 \x01(\x01B\x17\xbaH\x14\x12\x12\x19\x00\x00\x00\x00\x00\x00Y@)\x00\x00\x00\x00\x00\x00\x00\x00H\x01R\x13coolingPowerPercent\x88\x01\x01\x12W\n" +
	"\x19min_cooling_power_percent\x18\x04 \x01(\x01B\x17\xbaH\x14\x12\x12\x19\x00\x00\x00\x00\x00\x00Y@)\x00\x00\x00\x00\x00\x00\x00\x00H\x02R\x16minCoolingPowerPercent\x88\x01\x01\x12W\n" +
	"\x19max_cooling_power_percent\x18\x05 \x01(\x01B\x17\xbaH\x14\x12\x12\x19\x00\x00\x00\x00\x00\x00Y@)\x00\x00\x00\x00\x00\x00\x00\x00H\x03R\x16maxCoolingPowerPercent\x88\x01\x01\x121\n" +
	"\asensors\x18\x06 \x03(\v2\x17.schema.v1alpha1.SensorR\asensors\x12K\n" +
	"\x06status\x18\a \x01(\x0e2$.schema.v1alpha1.CoolingDeviceStatusB\b\xbaH\x05\x82\x01\x02\x10\x01H\x04R\x06status\x88\x01\x01\x12[\n" +
	"\fcontrol_mode\x18\b \x01(\x0e2).schema.v1alpha1.CoolingDeviceControlModeB\b\xbaH\x05\x82\x01\x02\x10\x01H\x05R\vcontrolMode\x88\x01\x01\x12:\n" +
	"\blocation\x18\t \x01(\v2\x19.schema.v1alpha1.LocationH\x06R\blocation\x88\x01\x01\x12B\n" +
	"\flast_updated\x18\n" +
	" \x01(\v2\x1a.google.protobuf.TimestampH\aR\vlastUpdated\x88\x01\x01\x12a\n" +
	"\x11custom_attributes\x18\v \x03(\v24.schema.v1alpha1.CoolingDevice.CustomAttributesEntryR\x10customAttributes\x1aC\n" +
	"\x15CustomAttributesEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01:\xea\x04\xbaH\xe6\x04\x1a\xea\x01\n" +
	"\x15cooling_device_bounds\x12>max_cooling_power_percent must be >= min_cooling_power_percent\x1a\x90\x01!has(this.max_cooling_power_percent) || !has(this.min_cooling_power_percent) || this.max_cooling_power_percent >= this.min_cooling_power_percent\x1a\xf6\x02\n" +
	"!cooling_device_power_within_range\x12\\cooling_power_percent must be within min_cooling_power_percent and max_cooling_power_percent\x1a\xf2\x01!has(this.cooling_power_percent) || !has(this.min_cooling_power_percent) || !has(this.max_cooling_power_percent) || (this.cooling_power_percent >= this.min_cooling_power_percent && this.cooling_power_percent <= this.max_cooling_power_percent)B\a\n" +
	"\x05_typeB\x18\n" +
	"\x16_cooling_power_percentB\x1c\n" +
	"\x1a_min_cooling_power_percentB\x1c\n" +
	"\x1a_max_cooling_power_percentB\t\n" +
	"\a_statusB\x0f\n" +
	"\r_control_modeB\v\n" +
	"\t_locationB\x0f\n" +
	"\r_last_updated\"\xfe\x02\n" +
	"\x0eThermalProfile\x12G\n" +
	"\x04type\x18\x01 \x01(\x0e2).schema.v1alpha1.CoolingDeviceProfileTypeB\b\xbaH\x05\x82\x01\x02\x10\x01R\x04type\x12J\n" +
	"\x0fcustom_settings\x18\x02 \x01(\v2\x1c.schema.v1alpha1.PIDSettingsH\x00R\x0ecustomSettings\x88\x01\x01\x12%\n" +
	"\vdescription\x18\x03 \x01(\tH\x01R\vdescription\x88\x01\x01:\x8b\x01\xbaH\x87\x01\x1a\x84\x01\n" +
	"\x1fthermal_profile_custom_settings\x124custom_settings must be provided when type is CUSTOM\x1a+this.type != 4 || has(this.custom_settings)B\x12\n" +
	"\x10_custom_settingsB\x0e\n" +
	"\f_description\"\x99\x03\n" +
	"\vPIDSettings\x12\x1e\n" +
	"\x02kp\x18\x01 \x01(\x01B\x0e\xbaH\v\x12\t)\x00\x00\x00\x00\x00\x00\x00\x00R\x02kp\x12\x1e\n" +
	"\x02ki\x18\x02 \x01(\x01B\x0e\xbaH\v\x12\t)\x00\x00\x00\x00\x00\x00\x00\x00R\x02ki\x12\x1e\n" +
	"\x02kd\x18\x03 \x01(\x01B\x0e\xbaH\v\x12\t)\x00\x00\x00\x00\x00\x00\x00\x00R\x02kd\x12/\n" +
	"\vsample_time\x18\x04 \x01(\x01B\x0e\xbaH\v\x12\t!\x00\x00\x00\x00\x00\x00\x00\x00R\n" +
	"sampleTime\x12\"\n" +
	"\n" +
	"output_min\x18\x05 \x01(\x01H\x00R\toutputMin\x88\x01\x01\x12\"\n" +
	"\n" +
	"output_max\x18\x06 \x01(\x01H\x01R\toutputMax\x88\x01\x01:\x92\x01\xbaH\x8e\x01\x1a\x8b\x01\n" +
	"\x11pid_output_bounds\x12 output_min must be <= output_max\x1aT!has(this.output_min) || !has(this.output_max) || this.output_min <= this.output_maxB\r\n" +
	"\v_output_minB\r\n" +
	"\v_output_max\"\xf4\x01\n" +
	"\x15GetThermalZoneRequest\x12\x14\n" +
	"\x04name\x18\x01 \x01(\tH\x00R\x04name\x12<\n" +
	"\x06status\x18\x02 \x01(\x0e2\".schema.v1alpha1.ThermalZoneStatusH\x00R\x06status\x127\n" +
	"\blocation\x18\x03 \x01(\v2\x19.schema.v1alpha1.LocationH\x00R\blocation\x129\n" +
	"\n" +
	"field_mask\x18\x04 \x01(\v2\x1a.google.protobuf.FieldMaskR\tfieldMaskB\x13\n" +
	"\n" +
	"identifier\x12\x05\xbaH\x02\b\x01\"[\n" +
	"\x16GetThermalZoneResponse\x12A\n" +
	"\rthermal_zones\x18\x01 \x03(\v2\x1c.schema.v1alpha1.ThermalZoneR\fthermalZones\"\xe7\x02\n" +
	"\x15SetThermalZoneRequest\x12\x1b\n" +
	"\x04name\x18\x01 \x01(\tB\a\xbaH\x04r\x02\x10\x01R\x04name\x122\n" +
	"\x12target_temperature\x18\x02 \x01(\x01H\x00R\x11targetTemperature\x88\x01\x01\x12D\n" +
	"\fpid_settings\x18\x03 \x01(\v2\x1c.schema.v1alpha1.PIDSettingsH\x01R\vpidSettings\x88\x01\x01\x12I\n" +
	"\x06status\x18\x04 \x01(\x0e2\".schema.v1alpha1.ThermalZoneStatusB\b\xbaH\x05\x82\x01\x02\x10\x01H\x02R\x06status\x88\x01\x01\x129\n" +
	"\n" +
	"field_mask\x18\x05 \x01(\v2\x1a.google.protobuf.FieldMaskR\tfieldMaskB\x15\n" +
	"\x13_target_temperatureB\x0f\n" +
	"\r_pid_settingsB\t\n" +
	"\a_status\"Y\n" +
	"\x16SetThermalZoneResponse\x12?\n" +
	"\fthermal_zone\x18\x01 \x01(\v2\x1c.schema.v1alpha1.ThermalZoneR\vthermalZone\"T\n" +
	"\x17ListThermalZonesRequest\x129\n" +
	"\n" +
	"field_mask\x18\x01 \x01(\v2\x1a.google.protobuf.FieldMaskR\tfieldMask\"]\n" +
	"\x18ListThermalZonesResponse\x12A\n" +
	"\rthermal_zones\x18\x01 \x03(\v2\x1c.schema.v1alpha1.ThermalZoneR\fthermalZones\"\xc7\x03\n" +
	"\x15ThermalEmergencyAlert\x12\x1b\n" +
	"\x04type\x18\x01 \x01(\tB\a\xbaH\x04r\x02\x10\x01R\x04type\x12 \n" +
	"\tsensor_id\x18\x02 \x01(\tH\x00R\bsensorId\x88\x01\x01\x12$\n" +
	"\vsensor_name\x18\x03 \x01(\tH\x01R\n" +
	"sensorName\x88\x01\x01\x12 \n" +
	"\tzone_name\x18\x04 \x01(\tH\x02R\bzoneName\x88\x01\x01\x12 \n" +
	"\vtemperature\x18\x05 \x01(\x01R\vtemperature\x12!\n" +
	"\tthreshold\x18\x06 \x01(\x01H\x03R\tthreshold\x88\x01\x01\x12#\n" +
	"\bseverity\x18\a \x01(\tB\a\xbaH\x04r\x02\x10\x01R\bseverity\x12\x1b\n" +
	"\x06action\x18\b \x01(\tH\x04R\x06action\x88\x01\x01\x128\n" +
	"\ttimestamp\x18\t \x01(\v2\x1a.google.protobuf.TimestampR\ttimestamp\x12!\n" +
	"\amessage\x18\n" +
	" \x01(\tB\a\xbaH\x04r\x02\x10\x01R\amessageB\f\n" +
	"\n" +
	"_sensor_idB\x0e\n" +
	"\f_sensor_nameB\f\n" +
	"\n" +
	"_zone_nameB\f\n" +
	"\n" +
	"_thresholdB\t\n" +
	"\a_action\"\x94\x01\n" +
	"\x1dThermalZoneTemperatureRequest\x12\x1d\n" +
	"\n" +
	"zone_names\x18\x01 \x03(\tR\tzoneNames\x129\n" +
	"\x16include_sensor_details\x18\x02 \x01(\bH\x00R\x14includeSensorDetails\x88\x01\x01B\x19\n" +
	"\x17_include_sensor_details\"v\n" +
	"\x1eThermalZoneTemperatureResponse\x12T\n" +
	"\x11zone_temperatures\x18\x01 \x03(\v2'.schema.v1alpha1.ThermalZoneTemperatureR\x10zoneTemperatures\"\xb1\x02\n" +
	"\x16ThermalZoneTemperature\x12$\n" +
	"\tzone_name\x18\x01 \x01(\tB\a\xbaH\x04r\x02\x10\x01R\bzoneName\x12/\n" +
	"\x13current_temperature\x18\x02 \x01(\x01R\x12currentTemperature\x122\n" +
	"\x12target_temperature\x18\x03 \x01(\x01H\x00R\x11targetTemperature\x88\x01\x01\x126\n" +
	"\x17contributing_sensor_ids\x18\x04 \x03(\tR\x15contributingSensorIds\x12=\n" +
	"\flast_updated\x18\x05 \x01(\v2\x1a.google.protobuf.TimestampR\vlastUpdatedB\x15\n" +
	"\x13_target_temperature\"6\n" +
	"\x17GetCoolingDeviceRequest\x12\x1b\n" +
	"\x04name\x18\x01 \x01(\tB\a\xbaH\x04r\x02\x10\x01R\x04name\"a\n" +
	"\x18GetCoolingDeviceResponse\x12E\n" +
	"\x0ecooling_device\x18\x01 \x01(\v2\x1e.schema.v1alpha1.CoolingDeviceR\rcoolingDevice\"\x8b\x01\n" +
	"\x17SetCoolingDeviceRequest\x12\x1b\n" +
	"\x04name\x18\x01 \x01(\tB\a\xbaH\x04r\x02\x10\x01R\x04name\x12A\n" +
	"\rpower_percent\x18\x02 \x01(\x01B\x17\xbaH\x14\x12\x12\x19\x00\x00\x00\x00\x00\x00Y@)\x00\x00\x00\x00\x00\x00\x00\x00H\x00R\fpowerPercent\x88\x01\x01B\x10\n" +
	"\x0e_power_percent\"a\n" +
	"\x18SetCoolingDeviceResponse\x12E\n" +
	"\x0ecooling_device\x18\x01 \x01(\v2\x1e.schema.v1alpha1.CoolingDeviceR\rcoolingDevice\"V\n" +
	"\x19ListCoolingDevicesRequest\x129\n" +
	"\n" +
	"field_mask\x18\x01 \x01(\v2\x1a.google.protobuf.FieldMaskR\tfieldMask\"e\n" +
	"\x1aListCoolingDevicesResponse\x12G\n" +
	"\x0fcooling_devices\x18\x01 \x03(\v2\x1e.schema.v1alpha1.CoolingDeviceR\x0ecoolingDevices\"\xe9\x03\n" +
	"\x14ThermalEventResponse\x12&\n" +
	"\n" +
	"event_type\x18\x01 \x01(\tB\a\xbaH\x04r\x02\x10\x01R\teventType\x12.\n" +
	"\x0ecomponent_name\x18\x02 \x01(\tB\a\xbaH\x04r\x02\x10\x01R\rcomponentName\x12\x1f\n" +
	"\x06action\x18\x03 \x01(\tB\a\xbaH\x04r\x02\x10\x01R\x06action\x12\x18\n" +
	"\asuccess\x18\x04 \x01(\bR\asuccess\x12(\n" +
	"\rerror_message\x18\x05 \x01(\tH\x00R\ferrorMessage\x88\x01\x01\x12!\n" +
	"\amessage\x18\x06 \x01(\tB\a\xbaH\x04r\x02\x10\x01R\amessage\x128\n" +
	"\ttimestamp\x18\a \x01(\v2\x1a.google.protobuf.TimestampR\ttimestamp\x12b\n" +
	"\x0fadditional_data\x18\b \x03(\v29.schema.v1alpha1.ThermalEventResponse.AdditionalDataEntryR\x0eadditionalData\x1aA\n" +
	"\x13AdditionalDataEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01B\x10\n" +
	"\x0e_error_message*\xba\x01\n" +
	"\x11ThermalZoneStatus\x12#\n" +
	"\x1fTHERMAL_ZONE_STATUS_UNSPECIFIED\x10\x00\x12\x1e\n" +
	"\x1aTHERMAL_ZONE_STATUS_NORMAL\x10\x01\x12\x1f\n" +
	"\x1bTHERMAL_ZONE_STATUS_WARNING\x10\x02\x12 \n" +
	"\x1cTHERMAL_ZONE_STATUS_CRITICAL\x10\x03\x12\x1d\n" +
	"\x19THERMAL_ZONE_STATUS_ERROR\x10\x04*\xe8\x01\n" +
	"\x11CoolingDeviceType\x12#\n" +
	"\x1fCOOLING_DEVICE_TYPE_UNSPECIFIED\x10\x00\x12\x1b\n" +
	"\x17COOLING_DEVICE_TYPE_FAN\x10\x01\x12\"\n" +
	"\x1eCOOLING_DEVICE_TYPE_WATER_PUMP\x10\x02\x12&\n" +
	"\"COOLING_DEVICE_TYPE_HEAT_EXCHANGER\x10\x03\x12%\n" +
	"!COOLING_DEVICE_TYPE_LIQUID_COOLER\x10\x04\x12\x1e\n" +
	"\x1aCOOLING_DEVICE_TYPE_BLOWER\x10\x05*\xee\x01\n" +
	"\x13CoolingDeviceStatus\x12%\n" +
	"!COOLING_DEVICE_STATUS_UNSPECIFIED\x10\x00\x12!\n" +
	"\x1dCOOLING_DEVICE_STATUS_ENABLED\x10\x01\x12\"\n" +
	"\x1eCOOLING_DEVICE_STATUS_DISABLED\x10\x02\x12%\n" +
	"!COOLING_DEVICE_STATUS_NOT_PRESENT\x10\x03\x12\x1f\n" +
	"\x1bCOOLING_DEVICE_STATUS_ERROR\x10\x04\x12!\n" +
	"\x1dCOOLING_DEVICE_STATUS_UNKNOWN\x10\x05*\xbf\x01\n" +
	"\x18CoolingDeviceControlMode\x12+\n" +
	"'COOLING_DEVICE_CONTROL_MODE_UNSPECIFIED\x10\x00\x12)\n" +
	"%COOLING_DEVICE_CONTROL_MODE_AUTOMATIC\x10\x01\x12&\n" +
	"\"COOLING_DEVICE_CONTROL_MODE_MANUAL\x10\x02\x12#\n" +
	"\x1fCOOLING_DEVICE_CONTROL_MODE_PID\x10\x03*\xec\x01\n" +
	"\x18CoolingDeviceProfileType\x12+\n" +
	"'COOLING_DEVICE_PROFILE_TYPE_UNSPECIFIED\x10\x00\x12%\n" +
	"!COOLING_DEVICE_PROFILE_TYPE_QUIET\x10\x01\x12(\n" +
	"$COOLING_DEVICE_PROFILE_TYPE_BALANCED\x10\x02\x12*\n" +
	"&COOLING_DEVICE_PROFILE_TYPE_AGGRESSIVE\x10\x03\x12&\n" +
	"\"COOLING_DEVICE_PROFILE_TYPE_CUSTOM\x10\x04B\xbf\x01\n" +
	"\x13com.schema.v1alpha1B\fThermalProtoP\x01Z=github.com/u-bmc/u-bmc/api/gen/schema/v1alpha1;schemav1alpha1\xa2\x02\x03SXX\xaa\x02\x0fSchema.V1alpha1\xca\x02\x0fSchema\\V1alpha1\xe2\x02\x1bSchema\\V1alpha1\\GPBMetadata\xea\x02\x10Schema::V1alpha1b\x06proto3"

var (
	file_schema_v1alpha1_thermal_proto_rawDescOnce sync.Once
	file_schema_v1alpha1_thermal_proto_rawDescData []byte
)

func file_schema_v1alpha1_thermal_proto_rawDescGZIP() []byte {
	file_schema_v1alpha1_thermal_proto_rawDescOnce.Do(func() {
		file_schema_v1alpha1_thermal_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_schema_v1alpha1_thermal_proto_rawDesc), len(file_schema_v1alpha1_thermal_proto_rawDesc)))
	})
	return file_schema_v1alpha1_thermal_proto_rawDescData
}

var file_schema_v1alpha1_thermal_proto_enumTypes = make([]protoimpl.EnumInfo, 5)
var file_schema_v1alpha1_thermal_proto_msgTypes = make([]protoimpl.MessageInfo, 24)
var file_schema_v1alpha1_thermal_proto_goTypes = []any{
	(ThermalZoneStatus)(0),                 // 0: schema.v1alpha1.ThermalZoneStatus
	(CoolingDeviceType)(0),                 // 1: schema.v1alpha1.CoolingDeviceType
	(CoolingDeviceStatus)(0),               // 2: schema.v1alpha1.CoolingDeviceStatus
	(CoolingDeviceControlMode)(0),          // 3: schema.v1alpha1.CoolingDeviceControlMode
	(CoolingDeviceProfileType)(0),          // 4: schema.v1alpha1.CoolingDeviceProfileType
	(*ThermalZone)(nil),                    // 5: schema.v1alpha1.ThermalZone
	(*CoolingDevice)(nil),                  // 6: schema.v1alpha1.CoolingDevice
	(*ThermalProfile)(nil),                 // 7: schema.v1alpha1.ThermalProfile
	(*PIDSettings)(nil),                    // 8: schema.v1alpha1.PIDSettings
	(*GetThermalZoneRequest)(nil),          // 9: schema.v1alpha1.GetThermalZoneRequest
	(*GetThermalZoneResponse)(nil),         // 10: schema.v1alpha1.GetThermalZoneResponse
	(*SetThermalZoneRequest)(nil),          // 11: schema.v1alpha1.SetThermalZoneRequest
	(*SetThermalZoneResponse)(nil),         // 12: schema.v1alpha1.SetThermalZoneResponse
	(*ListThermalZonesRequest)(nil),        // 13: schema.v1alpha1.ListThermalZonesRequest
	(*ListThermalZonesResponse)(nil),       // 14: schema.v1alpha1.ListThermalZonesResponse
	(*ThermalEmergencyAlert)(nil),          // 15: schema.v1alpha1.ThermalEmergencyAlert
	(*ThermalZoneTemperatureRequest)(nil),  // 16: schema.v1alpha1.ThermalZoneTemperatureRequest
	(*ThermalZoneTemperatureResponse)(nil), // 17: schema.v1alpha1.ThermalZoneTemperatureResponse
	(*ThermalZoneTemperature)(nil),         // 18: schema.v1alpha1.ThermalZoneTemperature
	(*GetCoolingDeviceRequest)(nil),        // 19: schema.v1alpha1.GetCoolingDeviceRequest
	(*GetCoolingDeviceResponse)(nil),       // 20: schema.v1alpha1.GetCoolingDeviceResponse
	(*SetCoolingDeviceRequest)(nil),        // 21: schema.v1alpha1.SetCoolingDeviceRequest
	(*SetCoolingDeviceResponse)(nil),       // 22: schema.v1alpha1.SetCoolingDeviceResponse
	(*ListCoolingDevicesRequest)(nil),      // 23: schema.v1alpha1.ListCoolingDevicesRequest
	(*ListCoolingDevicesResponse)(nil),     // 24: schema.v1alpha1.ListCoolingDevicesResponse
	(*ThermalEventResponse)(nil),           // 25: schema.v1alpha1.ThermalEventResponse
	nil,                                    // 26: schema.v1alpha1.ThermalZone.CustomAttributesEntry
	nil,                                    // 27: schema.v1alpha1.CoolingDevice.CustomAttributesEntry
	nil,                                    // 28: schema.v1alpha1.ThermalEventResponse.AdditionalDataEntry
	(*Location)(nil),                       // 29: schema.v1alpha1.Location
	(*timestamppb.Timestamp)(nil),          // 30: google.protobuf.Timestamp
	(*Sensor)(nil),                         // 31: schema.v1alpha1.Sensor
	(*fieldmaskpb.FieldMask)(nil),          // 32: google.protobuf.FieldMask
}
var file_schema_v1alpha1_thermal_proto_depIdxs = []int32{
	8,  // 0: schema.v1alpha1.ThermalZone.pid_settings:type_name -> schema.v1alpha1.PIDSettings
	0,  // 1: schema.v1alpha1.ThermalZone.status:type_name -> schema.v1alpha1.ThermalZoneStatus
	29, // 2: schema.v1alpha1.ThermalZone.location:type_name -> schema.v1alpha1.Location
	30, // 3: schema.v1alpha1.ThermalZone.last_updated:type_name -> google.protobuf.Timestamp
	26, // 4: schema.v1alpha1.ThermalZone.custom_attributes:type_name -> schema.v1alpha1.ThermalZone.CustomAttributesEntry
	1,  // 5: schema.v1alpha1.CoolingDevice.type:type_name -> schema.v1alpha1.CoolingDeviceType
	31, // 6: schema.v1alpha1.CoolingDevice.sensors:type_name -> schema.v1alpha1.Sensor
	2,  // 7: schema.v1alpha1.CoolingDevice.status:type_name -> schema.v1alpha1.CoolingDeviceStatus
	3,  // 8: schema.v1alpha1.CoolingDevice.control_mode:type_name -> schema.v1alpha1.CoolingDeviceControlMode
	29, // 9: schema.v1alpha1.CoolingDevice.location:type_name -> schema.v1alpha1.Location
	30, // 10: schema.v1alpha1.CoolingDevice.last_updated:type_name -> google.protobuf.Timestamp
	27, // 11: schema.v1alpha1.CoolingDevice.custom_attributes:type_name -> schema.v1alpha1.CoolingDevice.CustomAttributesEntry
	4,  // 12: schema.v1alpha1.ThermalProfile.type:type_name -> schema.v1alpha1.CoolingDeviceProfileType
	8,  // 13: schema.v1alpha1.ThermalProfile.custom_settings:type_name -> schema.v1alpha1.PIDSettings
	0,  // 14: schema.v1alpha1.GetThermalZoneRequest.status:type_name -> schema.v1alpha1.ThermalZoneStatus
	29, // 15: schema.v1alpha1.GetThermalZoneRequest.location:type_name -> schema.v1alpha1.Location
	32, // 16: schema.v1alpha1.GetThermalZoneRequest.field_mask:type_name -> google.protobuf.FieldMask
	5,  // 17: schema.v1alpha1.GetThermalZoneResponse.thermal_zones:type_name -> schema.v1alpha1.ThermalZone
	8,  // 18: schema.v1alpha1.SetThermalZoneRequest.pid_settings:type_name -> schema.v1alpha1.PIDSettings
	0,  // 19: schema.v1alpha1.SetThermalZoneRequest.status:type_name -> schema.v1alpha1.ThermalZoneStatus
	32, // 20: schema.v1alpha1.SetThermalZoneRequest.field_mask:type_name -> google.protobuf.FieldMask
	5,  // 21: schema.v1alpha1.SetThermalZoneResponse.thermal_zone:type_name -> schema.v1alpha1.ThermalZone
	32, // 22: schema.v1alpha1.ListThermalZonesRequest.field_mask:type_name -> google.protobuf.FieldMask
	5,  // 23: schema.v1alpha1.ListThermalZonesResponse.thermal_zones:type_name -> schema.v1alpha1.ThermalZone
	30, // 24: schema.v1alpha1.ThermalEmergencyAlert.timestamp:type_name -> google.protobuf.Timestamp
	18, // 25: schema.v1alpha1.ThermalZoneTemperatureResponse.zone_temperatures:type_name -> schema.v1alpha1.ThermalZoneTemperature
	30, // 26: schema.v1alpha1.ThermalZoneTemperature.last_updated:type_name -> google.protobuf.Timestamp
	6,  // 27: schema.v1alpha1.GetCoolingDeviceResponse.cooling_device:type_name -> schema.v1alpha1.CoolingDevice
	6,  // 28: schema.v1alpha1.SetCoolingDeviceResponse.cooling_device:type_name -> schema.v1alpha1.CoolingDevice
	32, // 29: schema.v1alpha1.ListCoolingDevicesRequest.field_mask:type_name -> google.protobuf.FieldMask
	6,  // 30: schema.v1alpha1.ListCoolingDevicesResponse.cooling_devices:type_name -> schema.v1alpha1.CoolingDevice
	30, // 31: schema.v1alpha1.ThermalEventResponse.timestamp:type_name -> google.protobuf.Timestamp
	28, // 32: schema.v1alpha1.ThermalEventResponse.additional_data:type_name -> schema.v1alpha1.ThermalEventResponse.AdditionalDataEntry
	33, // [33:33] is the sub-list for method output_type
	33, // [33:33] is the sub-list for method input_type
	33, // [33:33] is the sub-list for extension type_name
	33, // [33:33] is the sub-list for extension extendee
	0,  // [0:33] is the sub-list for field type_name
}

func init() { file_schema_v1alpha1_thermal_proto_init() }
func file_schema_v1alpha1_thermal_proto_init() {
	if File_schema_v1alpha1_thermal_proto != nil {
		return
	}
	file_schema_v1alpha1_location_proto_init()
	file_schema_v1alpha1_sensor_proto_init()
	file_schema_v1alpha1_thermal_proto_msgTypes[0].OneofWrappers = []any{}
	file_schema_v1alpha1_thermal_proto_msgTypes[1].OneofWrappers = []any{}
	file_schema_v1alpha1_thermal_proto_msgTypes[2].OneofWrappers = []any{}
	file_schema_v1alpha1_thermal_proto_msgTypes[3].OneofWrappers = []any{}
	file_schema_v1alpha1_thermal_proto_msgTypes[4].OneofWrappers = []any{
		(*GetThermalZoneRequest_Name)(nil),
		(*GetThermalZoneRequest_Status)(nil),
		(*GetThermalZoneRequest_Location)(nil),
	}
	file_schema_v1alpha1_thermal_proto_msgTypes[6].OneofWrappers = []any{}
	file_schema_v1alpha1_thermal_proto_msgTypes[10].OneofWrappers = []any{}
	file_schema_v1alpha1_thermal_proto_msgTypes[11].OneofWrappers = []any{}
	file_schema_v1alpha1_thermal_proto_msgTypes[13].OneofWrappers = []any{}
	file_schema_v1alpha1_thermal_proto_msgTypes[16].OneofWrappers = []any{}
	file_schema_v1alpha1_thermal_proto_msgTypes[20].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_schema_v1alpha1_thermal_proto_rawDesc), len(file_schema_v1alpha1_thermal_proto_rawDesc)),
			NumEnums:      5,
			NumMessages:   24,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_schema_v1alpha1_thermal_proto_goTypes,
		DependencyIndexes: file_schema_v1alpha1_thermal_proto_depIdxs,
		EnumInfos:         file_schema_v1alpha1_thermal_proto_enumTypes,
		MessageInfos:      file_schema_v1alpha1_thermal_proto_msgTypes,
	}.Build()
	File_schema_v1alpha1_thermal_proto = out.File
	file_schema_v1alpha1_thermal_proto_goTypes = nil
	file_schema_v1alpha1_thermal_proto_depIdxs = nil
}
