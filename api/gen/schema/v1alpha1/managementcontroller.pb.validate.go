// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: schema/v1alpha1/managementcontroller.proto

package schemav1alpha1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on ManagementController with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ManagementController) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ManagementController with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ManagementControllerMultiError, or nil if none found.
func (m *ManagementController) ValidateAll() error {
	return m.validate(true)
}

func (m *ManagementController) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	if all {
		switch v := interface{}(m.GetAsset()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ManagementControllerValidationError{
					field:  "Asset",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ManagementControllerValidationError{
					field:  "Asset",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAsset()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ManagementControllerValidationError{
				field:  "Asset",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Metadata

	if m.Description != nil {
		// no validation rules for Description
	}

	if m.Type != nil {
		// no validation rules for Type
	}

	if m.CurrentState != nil {
		// no validation rules for CurrentState
	}

	if m.RequestedTransition != nil {
		// no validation rules for RequestedTransition
	}

	if m.Status != nil {
		// no validation rules for Status
	}

	if m.Location != nil {

		if all {
			switch v := interface{}(m.GetLocation()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ManagementControllerValidationError{
						field:  "Location",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ManagementControllerValidationError{
						field:  "Location",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetLocation()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ManagementControllerValidationError{
					field:  "Location",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.Hardware != nil {

		if all {
			switch v := interface{}(m.GetHardware()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ManagementControllerValidationError{
						field:  "Hardware",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ManagementControllerValidationError{
						field:  "Hardware",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetHardware()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ManagementControllerValidationError{
					field:  "Hardware",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.Firmware != nil {

		if all {
			switch v := interface{}(m.GetFirmware()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ManagementControllerValidationError{
						field:  "Firmware",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ManagementControllerValidationError{
						field:  "Firmware",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetFirmware()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ManagementControllerValidationError{
					field:  "Firmware",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.Redundancy != nil {

		if all {
			switch v := interface{}(m.GetRedundancy()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ManagementControllerValidationError{
						field:  "Redundancy",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ManagementControllerValidationError{
						field:  "Redundancy",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetRedundancy()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ManagementControllerValidationError{
					field:  "Redundancy",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.LastReboot != nil {

		if all {
			switch v := interface{}(m.GetLastReboot()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ManagementControllerValidationError{
						field:  "LastReboot",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ManagementControllerValidationError{
						field:  "LastReboot",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetLastReboot()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ManagementControllerValidationError{
					field:  "LastReboot",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.UpdatedAt != nil {

		if all {
			switch v := interface{}(m.GetUpdatedAt()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ManagementControllerValidationError{
						field:  "UpdatedAt",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ManagementControllerValidationError{
						field:  "UpdatedAt",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ManagementControllerValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ManagementControllerMultiError(errors)
	}

	return nil
}

// ManagementControllerMultiError is an error wrapping multiple validation
// errors returned by ManagementController.ValidateAll() if the designated
// constraints aren't met.
type ManagementControllerMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ManagementControllerMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ManagementControllerMultiError) AllErrors() []error { return m }

// ManagementControllerValidationError is the validation error returned by
// ManagementController.Validate if the designated constraints aren't met.
type ManagementControllerValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ManagementControllerValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ManagementControllerValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ManagementControllerValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ManagementControllerValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ManagementControllerValidationError) ErrorName() string {
	return "ManagementControllerValidationError"
}

// Error satisfies the builtin error interface
func (e ManagementControllerValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sManagementController.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ManagementControllerValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ManagementControllerValidationError{}

// Validate checks the field values on ManagementControllerHardware with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ManagementControllerHardware) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ManagementControllerHardware with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ManagementControllerHardwareMultiError, or nil if none found.
func (m *ManagementControllerHardware) ValidateAll() error {
	return m.validate(true)
}

func (m *ManagementControllerHardware) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.Cpu != nil {

		if all {
			switch v := interface{}(m.GetCpu()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ManagementControllerHardwareValidationError{
						field:  "Cpu",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ManagementControllerHardwareValidationError{
						field:  "Cpu",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetCpu()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ManagementControllerHardwareValidationError{
					field:  "Cpu",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.Memory != nil {

		if all {
			switch v := interface{}(m.GetMemory()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ManagementControllerHardwareValidationError{
						field:  "Memory",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ManagementControllerHardwareValidationError{
						field:  "Memory",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetMemory()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ManagementControllerHardwareValidationError{
					field:  "Memory",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.Storage != nil {

		if all {
			switch v := interface{}(m.GetStorage()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ManagementControllerHardwareValidationError{
						field:  "Storage",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ManagementControllerHardwareValidationError{
						field:  "Storage",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetStorage()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ManagementControllerHardwareValidationError{
					field:  "Storage",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ManagementControllerHardwareMultiError(errors)
	}

	return nil
}

// ManagementControllerHardwareMultiError is an error wrapping multiple
// validation errors returned by ManagementControllerHardware.ValidateAll() if
// the designated constraints aren't met.
type ManagementControllerHardwareMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ManagementControllerHardwareMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ManagementControllerHardwareMultiError) AllErrors() []error { return m }

// ManagementControllerHardwareValidationError is the validation error returned
// by ManagementControllerHardware.Validate if the designated constraints
// aren't met.
type ManagementControllerHardwareValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ManagementControllerHardwareValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ManagementControllerHardwareValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ManagementControllerHardwareValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ManagementControllerHardwareValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ManagementControllerHardwareValidationError) ErrorName() string {
	return "ManagementControllerHardwareValidationError"
}

// Error satisfies the builtin error interface
func (e ManagementControllerHardwareValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sManagementControllerHardware.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ManagementControllerHardwareValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ManagementControllerHardwareValidationError{}

// Validate checks the field values on ManagementControllerCPU with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ManagementControllerCPU) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ManagementControllerCPU with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ManagementControllerCPUMultiError, or nil if none found.
func (m *ManagementControllerCPU) ValidateAll() error {
	return m.validate(true)
}

func (m *ManagementControllerCPU) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.Model != nil {
		// no validation rules for Model
	}

	if m.Manufacturer != nil {
		// no validation rules for Manufacturer
	}

	if m.Cores != nil {
		// no validation rules for Cores
	}

	if m.MaxFrequencyMhz != nil {
		// no validation rules for MaxFrequencyMhz
	}

	if m.Architecture != nil {
		// no validation rules for Architecture
	}

	if len(errors) > 0 {
		return ManagementControllerCPUMultiError(errors)
	}

	return nil
}

// ManagementControllerCPUMultiError is an error wrapping multiple validation
// errors returned by ManagementControllerCPU.ValidateAll() if the designated
// constraints aren't met.
type ManagementControllerCPUMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ManagementControllerCPUMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ManagementControllerCPUMultiError) AllErrors() []error { return m }

// ManagementControllerCPUValidationError is the validation error returned by
// ManagementControllerCPU.Validate if the designated constraints aren't met.
type ManagementControllerCPUValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ManagementControllerCPUValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ManagementControllerCPUValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ManagementControllerCPUValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ManagementControllerCPUValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ManagementControllerCPUValidationError) ErrorName() string {
	return "ManagementControllerCPUValidationError"
}

// Error satisfies the builtin error interface
func (e ManagementControllerCPUValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sManagementControllerCPU.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ManagementControllerCPUValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ManagementControllerCPUValidationError{}

// Validate checks the field values on ManagementControllerMemory with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ManagementControllerMemory) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ManagementControllerMemory with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ManagementControllerMemoryMultiError, or nil if none found.
func (m *ManagementControllerMemory) ValidateAll() error {
	return m.validate(true)
}

func (m *ManagementControllerMemory) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.MemoryType != nil {
		// no validation rules for MemoryType
	}

	if m.Capacity != nil {
		// no validation rules for Capacity
	}

	if m.MaxFrequencyMhz != nil {
		// no validation rules for MaxFrequencyMhz
	}

	if len(errors) > 0 {
		return ManagementControllerMemoryMultiError(errors)
	}

	return nil
}

// ManagementControllerMemoryMultiError is an error wrapping multiple
// validation errors returned by ManagementControllerMemory.ValidateAll() if
// the designated constraints aren't met.
type ManagementControllerMemoryMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ManagementControllerMemoryMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ManagementControllerMemoryMultiError) AllErrors() []error { return m }

// ManagementControllerMemoryValidationError is the validation error returned
// by ManagementControllerMemory.Validate if the designated constraints aren't met.
type ManagementControllerMemoryValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ManagementControllerMemoryValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ManagementControllerMemoryValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ManagementControllerMemoryValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ManagementControllerMemoryValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ManagementControllerMemoryValidationError) ErrorName() string {
	return "ManagementControllerMemoryValidationError"
}

// Error satisfies the builtin error interface
func (e ManagementControllerMemoryValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sManagementControllerMemory.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ManagementControllerMemoryValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ManagementControllerMemoryValidationError{}

// Validate checks the field values on ManagementControllerStorage with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ManagementControllerStorage) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ManagementControllerStorage with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ManagementControllerStorageMultiError, or nil if none found.
func (m *ManagementControllerStorage) ValidateAll() error {
	return m.validate(true)
}

func (m *ManagementControllerStorage) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.StorageType != nil {
		// no validation rules for StorageType
	}

	if m.Capacity != nil {
		// no validation rules for Capacity
	}

	if len(errors) > 0 {
		return ManagementControllerStorageMultiError(errors)
	}

	return nil
}

// ManagementControllerStorageMultiError is an error wrapping multiple
// validation errors returned by ManagementControllerStorage.ValidateAll() if
// the designated constraints aren't met.
type ManagementControllerStorageMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ManagementControllerStorageMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ManagementControllerStorageMultiError) AllErrors() []error { return m }

// ManagementControllerStorageValidationError is the validation error returned
// by ManagementControllerStorage.Validate if the designated constraints
// aren't met.
type ManagementControllerStorageValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ManagementControllerStorageValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ManagementControllerStorageValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ManagementControllerStorageValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ManagementControllerStorageValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ManagementControllerStorageValidationError) ErrorName() string {
	return "ManagementControllerStorageValidationError"
}

// Error satisfies the builtin error interface
func (e ManagementControllerStorageValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sManagementControllerStorage.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ManagementControllerStorageValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ManagementControllerStorageValidationError{}

// Validate checks the field values on ManagementControllerRedundancy with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ManagementControllerRedundancy) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ManagementControllerRedundancy with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ManagementControllerRedundancyMultiError, or nil if none found.
func (m *ManagementControllerRedundancy) ValidateAll() error {
	return m.validate(true)
}

func (m *ManagementControllerRedundancy) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RedundancyEnabled

	if m.Role != nil {
		// no validation rules for Role
	}

	if m.DisableRedundancyOverride != nil {
		// no validation rules for DisableRedundancyOverride
	}

	if m.FailoversPaused != nil {
		// no validation rules for FailoversPaused
	}

	if m.RedundancyMode != nil {
		// no validation rules for RedundancyMode
	}

	if m.FailoverStatus != nil {
		// no validation rules for FailoverStatus
	}

	if len(errors) > 0 {
		return ManagementControllerRedundancyMultiError(errors)
	}

	return nil
}

// ManagementControllerRedundancyMultiError is an error wrapping multiple
// validation errors returned by ManagementControllerRedundancy.ValidateAll()
// if the designated constraints aren't met.
type ManagementControllerRedundancyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ManagementControllerRedundancyMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ManagementControllerRedundancyMultiError) AllErrors() []error { return m }

// ManagementControllerRedundancyValidationError is the validation error
// returned by ManagementControllerRedundancy.Validate if the designated
// constraints aren't met.
type ManagementControllerRedundancyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ManagementControllerRedundancyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ManagementControllerRedundancyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ManagementControllerRedundancyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ManagementControllerRedundancyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ManagementControllerRedundancyValidationError) ErrorName() string {
	return "ManagementControllerRedundancyValidationError"
}

// Error satisfies the builtin error interface
func (e ManagementControllerRedundancyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sManagementControllerRedundancy.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ManagementControllerRedundancyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ManagementControllerRedundancyValidationError{}

// Validate checks the field values on ManagementControllerRebootInfo with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ManagementControllerRebootInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ManagementControllerRebootInfo with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ManagementControllerRebootInfoMultiError, or nil if none found.
func (m *ManagementControllerRebootInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *ManagementControllerRebootInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.LastRebootTime != nil {

		if all {
			switch v := interface{}(m.GetLastRebootTime()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ManagementControllerRebootInfoValidationError{
						field:  "LastRebootTime",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ManagementControllerRebootInfoValidationError{
						field:  "LastRebootTime",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetLastRebootTime()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ManagementControllerRebootInfoValidationError{
					field:  "LastRebootTime",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.RebootCause != nil {
		// no validation rules for RebootCause
	}

	if m.RebootCount != nil {
		// no validation rules for RebootCount
	}

	if m.Uptime != nil {

		if all {
			switch v := interface{}(m.GetUptime()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ManagementControllerRebootInfoValidationError{
						field:  "Uptime",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ManagementControllerRebootInfoValidationError{
						field:  "Uptime",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetUptime()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ManagementControllerRebootInfoValidationError{
					field:  "Uptime",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.BootTime != nil {

		if all {
			switch v := interface{}(m.GetBootTime()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ManagementControllerRebootInfoValidationError{
						field:  "BootTime",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ManagementControllerRebootInfoValidationError{
						field:  "BootTime",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetBootTime()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ManagementControllerRebootInfoValidationError{
					field:  "BootTime",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ManagementControllerRebootInfoMultiError(errors)
	}

	return nil
}

// ManagementControllerRebootInfoMultiError is an error wrapping multiple
// validation errors returned by ManagementControllerRebootInfo.ValidateAll()
// if the designated constraints aren't met.
type ManagementControllerRebootInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ManagementControllerRebootInfoMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ManagementControllerRebootInfoMultiError) AllErrors() []error { return m }

// ManagementControllerRebootInfoValidationError is the validation error
// returned by ManagementControllerRebootInfo.Validate if the designated
// constraints aren't met.
type ManagementControllerRebootInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ManagementControllerRebootInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ManagementControllerRebootInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ManagementControllerRebootInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ManagementControllerRebootInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ManagementControllerRebootInfoValidationError) ErrorName() string {
	return "ManagementControllerRebootInfoValidationError"
}

// Error satisfies the builtin error interface
func (e ManagementControllerRebootInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sManagementControllerRebootInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ManagementControllerRebootInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ManagementControllerRebootInfoValidationError{}

// Validate checks the field values on GetManagementControllerRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetManagementControllerRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetManagementControllerRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetManagementControllerRequestMultiError, or nil if none found.
func (m *GetManagementControllerRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetManagementControllerRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch v := m.Identifier.(type) {
	case *GetManagementControllerRequest_ControllerId:
		if v == nil {
			err := GetManagementControllerRequestValidationError{
				field:  "Identifier",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for ControllerId
	case *GetManagementControllerRequest_Name:
		if v == nil {
			err := GetManagementControllerRequestValidationError{
				field:  "Identifier",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for Name
	case *GetManagementControllerRequest_Type:
		if v == nil {
			err := GetManagementControllerRequestValidationError{
				field:  "Identifier",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for Type
	case *GetManagementControllerRequest_Status:
		if v == nil {
			err := GetManagementControllerRequestValidationError{
				field:  "Identifier",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for Status
	case *GetManagementControllerRequest_Location:
		if v == nil {
			err := GetManagementControllerRequestValidationError{
				field:  "Identifier",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetLocation()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetManagementControllerRequestValidationError{
						field:  "Location",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetManagementControllerRequestValidationError{
						field:  "Location",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetLocation()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetManagementControllerRequestValidationError{
					field:  "Location",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if m.FieldMask != nil {

		if all {
			switch v := interface{}(m.GetFieldMask()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetManagementControllerRequestValidationError{
						field:  "FieldMask",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetManagementControllerRequestValidationError{
						field:  "FieldMask",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetFieldMask()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetManagementControllerRequestValidationError{
					field:  "FieldMask",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetManagementControllerRequestMultiError(errors)
	}

	return nil
}

// GetManagementControllerRequestMultiError is an error wrapping multiple
// validation errors returned by GetManagementControllerRequest.ValidateAll()
// if the designated constraints aren't met.
type GetManagementControllerRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetManagementControllerRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetManagementControllerRequestMultiError) AllErrors() []error { return m }

// GetManagementControllerRequestValidationError is the validation error
// returned by GetManagementControllerRequest.Validate if the designated
// constraints aren't met.
type GetManagementControllerRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetManagementControllerRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetManagementControllerRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetManagementControllerRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetManagementControllerRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetManagementControllerRequestValidationError) ErrorName() string {
	return "GetManagementControllerRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetManagementControllerRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetManagementControllerRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetManagementControllerRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetManagementControllerRequestValidationError{}

// Validate checks the field values on GetManagementControllerResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetManagementControllerResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetManagementControllerResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetManagementControllerResponseMultiError, or nil if none found.
func (m *GetManagementControllerResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetManagementControllerResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetControllers() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetManagementControllerResponseValidationError{
						field:  fmt.Sprintf("Controllers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetManagementControllerResponseValidationError{
						field:  fmt.Sprintf("Controllers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetManagementControllerResponseValidationError{
					field:  fmt.Sprintf("Controllers[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetManagementControllerResponseMultiError(errors)
	}

	return nil
}

// GetManagementControllerResponseMultiError is an error wrapping multiple
// validation errors returned by GetManagementControllerResponse.ValidateAll()
// if the designated constraints aren't met.
type GetManagementControllerResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetManagementControllerResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetManagementControllerResponseMultiError) AllErrors() []error { return m }

// GetManagementControllerResponseValidationError is the validation error
// returned by GetManagementControllerResponse.Validate if the designated
// constraints aren't met.
type GetManagementControllerResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetManagementControllerResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetManagementControllerResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetManagementControllerResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetManagementControllerResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetManagementControllerResponseValidationError) ErrorName() string {
	return "GetManagementControllerResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetManagementControllerResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetManagementControllerResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetManagementControllerResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetManagementControllerResponseValidationError{}

// Validate checks the field values on ListManagementControllersRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ListManagementControllersRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListManagementControllersRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ListManagementControllersRequestMultiError, or nil if none found.
func (m *ListManagementControllersRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListManagementControllersRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.Type != nil {
		// no validation rules for Type
	}

	if m.Status != nil {
		// no validation rules for Status
	}

	if m.FieldMask != nil {

		if all {
			switch v := interface{}(m.GetFieldMask()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListManagementControllersRequestValidationError{
						field:  "FieldMask",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListManagementControllersRequestValidationError{
						field:  "FieldMask",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetFieldMask()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListManagementControllersRequestValidationError{
					field:  "FieldMask",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListManagementControllersRequestMultiError(errors)
	}

	return nil
}

// ListManagementControllersRequestMultiError is an error wrapping multiple
// validation errors returned by
// ListManagementControllersRequest.ValidateAll() if the designated
// constraints aren't met.
type ListManagementControllersRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListManagementControllersRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListManagementControllersRequestMultiError) AllErrors() []error { return m }

// ListManagementControllersRequestValidationError is the validation error
// returned by ListManagementControllersRequest.Validate if the designated
// constraints aren't met.
type ListManagementControllersRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListManagementControllersRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListManagementControllersRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListManagementControllersRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListManagementControllersRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListManagementControllersRequestValidationError) ErrorName() string {
	return "ListManagementControllersRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListManagementControllersRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListManagementControllersRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListManagementControllersRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListManagementControllersRequestValidationError{}

// Validate checks the field values on ListManagementControllersResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ListManagementControllersResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListManagementControllersResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ListManagementControllersResponseMultiError, or nil if none found.
func (m *ListManagementControllersResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListManagementControllersResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetControllers() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListManagementControllersResponseValidationError{
						field:  fmt.Sprintf("Controllers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListManagementControllersResponseValidationError{
						field:  fmt.Sprintf("Controllers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListManagementControllersResponseValidationError{
					field:  fmt.Sprintf("Controllers[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListManagementControllersResponseMultiError(errors)
	}

	return nil
}

// ListManagementControllersResponseMultiError is an error wrapping multiple
// validation errors returned by
// ListManagementControllersResponse.ValidateAll() if the designated
// constraints aren't met.
type ListManagementControllersResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListManagementControllersResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListManagementControllersResponseMultiError) AllErrors() []error { return m }

// ListManagementControllersResponseValidationError is the validation error
// returned by ListManagementControllersResponse.Validate if the designated
// constraints aren't met.
type ListManagementControllersResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListManagementControllersResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListManagementControllersResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListManagementControllersResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListManagementControllersResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListManagementControllersResponseValidationError) ErrorName() string {
	return "ListManagementControllersResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListManagementControllersResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListManagementControllersResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListManagementControllersResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListManagementControllersResponseValidationError{}

// Validate checks the field values on UpdateManagementControllerRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *UpdateManagementControllerRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateManagementControllerRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// UpdateManagementControllerRequestMultiError, or nil if none found.
func (m *UpdateManagementControllerRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateManagementControllerRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ControllerId

	if all {
		switch v := interface{}(m.GetController()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateManagementControllerRequestValidationError{
					field:  "Controller",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateManagementControllerRequestValidationError{
					field:  "Controller",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetController()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateManagementControllerRequestValidationError{
				field:  "Controller",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetFieldMask()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateManagementControllerRequestValidationError{
					field:  "FieldMask",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateManagementControllerRequestValidationError{
					field:  "FieldMask",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetFieldMask()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateManagementControllerRequestValidationError{
				field:  "FieldMask",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateManagementControllerRequestMultiError(errors)
	}

	return nil
}

// UpdateManagementControllerRequestMultiError is an error wrapping multiple
// validation errors returned by
// UpdateManagementControllerRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateManagementControllerRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateManagementControllerRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateManagementControllerRequestMultiError) AllErrors() []error { return m }

// UpdateManagementControllerRequestValidationError is the validation error
// returned by UpdateManagementControllerRequest.Validate if the designated
// constraints aren't met.
type UpdateManagementControllerRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateManagementControllerRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateManagementControllerRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateManagementControllerRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateManagementControllerRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateManagementControllerRequestValidationError) ErrorName() string {
	return "UpdateManagementControllerRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateManagementControllerRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateManagementControllerRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateManagementControllerRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateManagementControllerRequestValidationError{}

// Validate checks the field values on UpdateManagementControllerResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *UpdateManagementControllerResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateManagementControllerResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// UpdateManagementControllerResponseMultiError, or nil if none found.
func (m *UpdateManagementControllerResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateManagementControllerResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetController()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateManagementControllerResponseValidationError{
					field:  "Controller",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateManagementControllerResponseValidationError{
					field:  "Controller",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetController()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateManagementControllerResponseValidationError{
				field:  "Controller",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateManagementControllerResponseMultiError(errors)
	}

	return nil
}

// UpdateManagementControllerResponseMultiError is an error wrapping multiple
// validation errors returned by
// UpdateManagementControllerResponse.ValidateAll() if the designated
// constraints aren't met.
type UpdateManagementControllerResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateManagementControllerResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateManagementControllerResponseMultiError) AllErrors() []error { return m }

// UpdateManagementControllerResponseValidationError is the validation error
// returned by UpdateManagementControllerResponse.Validate if the designated
// constraints aren't met.
type UpdateManagementControllerResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateManagementControllerResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateManagementControllerResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateManagementControllerResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateManagementControllerResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateManagementControllerResponseValidationError) ErrorName() string {
	return "UpdateManagementControllerResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateManagementControllerResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateManagementControllerResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateManagementControllerResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateManagementControllerResponseValidationError{}

// Validate checks the field values on ManagementControllerControlRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ManagementControllerControlRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ManagementControllerControlRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ManagementControllerControlRequestMultiError, or nil if none found.
func (m *ManagementControllerControlRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ManagementControllerControlRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ControllerId

	// no validation rules for Action

	// no validation rules for Parameters

	if m.Force != nil {
		// no validation rules for Force
	}

	if len(errors) > 0 {
		return ManagementControllerControlRequestMultiError(errors)
	}

	return nil
}

// ManagementControllerControlRequestMultiError is an error wrapping multiple
// validation errors returned by
// ManagementControllerControlRequest.ValidateAll() if the designated
// constraints aren't met.
type ManagementControllerControlRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ManagementControllerControlRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ManagementControllerControlRequestMultiError) AllErrors() []error { return m }

// ManagementControllerControlRequestValidationError is the validation error
// returned by ManagementControllerControlRequest.Validate if the designated
// constraints aren't met.
type ManagementControllerControlRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ManagementControllerControlRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ManagementControllerControlRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ManagementControllerControlRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ManagementControllerControlRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ManagementControllerControlRequestValidationError) ErrorName() string {
	return "ManagementControllerControlRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ManagementControllerControlRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sManagementControllerControlRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ManagementControllerControlRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ManagementControllerControlRequestValidationError{}

// Validate checks the field values on ManagementControllerControlResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ManagementControllerControlResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ManagementControllerControlResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ManagementControllerControlResponseMultiError, or nil if none found.
func (m *ManagementControllerControlResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ManagementControllerControlResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	if m.CurrentState != nil {
		// no validation rules for CurrentState
	}

	if m.ErrorMessage != nil {
		// no validation rules for ErrorMessage
	}

	if m.EstimatedCompletion != nil {

		if all {
			switch v := interface{}(m.GetEstimatedCompletion()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ManagementControllerControlResponseValidationError{
						field:  "EstimatedCompletion",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ManagementControllerControlResponseValidationError{
						field:  "EstimatedCompletion",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetEstimatedCompletion()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ManagementControllerControlResponseValidationError{
					field:  "EstimatedCompletion",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ManagementControllerControlResponseMultiError(errors)
	}

	return nil
}

// ManagementControllerControlResponseMultiError is an error wrapping multiple
// validation errors returned by
// ManagementControllerControlResponse.ValidateAll() if the designated
// constraints aren't met.
type ManagementControllerControlResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ManagementControllerControlResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ManagementControllerControlResponseMultiError) AllErrors() []error { return m }

// ManagementControllerControlResponseValidationError is the validation error
// returned by ManagementControllerControlResponse.Validate if the designated
// constraints aren't met.
type ManagementControllerControlResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ManagementControllerControlResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ManagementControllerControlResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ManagementControllerControlResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ManagementControllerControlResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ManagementControllerControlResponseValidationError) ErrorName() string {
	return "ManagementControllerControlResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ManagementControllerControlResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sManagementControllerControlResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ManagementControllerControlResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ManagementControllerControlResponseValidationError{}
