// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: schema/v1alpha1/telemetry.proto

package schemav1alpha1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on TelemetryControlMessage with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TelemetryControlMessage) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TelemetryControlMessage with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TelemetryControlMessageMultiError, or nil if none found.
func (m *TelemetryControlMessage) ValidateAll() error {
	return m.validate(true)
}

func (m *TelemetryControlMessage) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Type

	// no validation rules for ServiceName

	switch v := m.Payload.(type) {
	case *TelemetryControlMessage_ProviderConfig:
		if v == nil {
			err := TelemetryControlMessageValidationError{
				field:  "Payload",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetProviderConfig()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TelemetryControlMessageValidationError{
						field:  "ProviderConfig",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TelemetryControlMessageValidationError{
						field:  "ProviderConfig",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetProviderConfig()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TelemetryControlMessageValidationError{
					field:  "ProviderConfig",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *TelemetryControlMessage_ExporterConfig:
		if v == nil {
			err := TelemetryControlMessageValidationError{
				field:  "Payload",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetExporterConfig()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TelemetryControlMessageValidationError{
						field:  "ExporterConfig",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TelemetryControlMessageValidationError{
						field:  "ExporterConfig",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetExporterConfig()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TelemetryControlMessageValidationError{
					field:  "ExporterConfig",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *TelemetryControlMessage_SamplingConfig:
		if v == nil {
			err := TelemetryControlMessageValidationError{
				field:  "Payload",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetSamplingConfig()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TelemetryControlMessageValidationError{
						field:  "SamplingConfig",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TelemetryControlMessageValidationError{
						field:  "SamplingConfig",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetSamplingConfig()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TelemetryControlMessageValidationError{
					field:  "SamplingConfig",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *TelemetryControlMessage_DebugConfig:
		if v == nil {
			err := TelemetryControlMessageValidationError{
				field:  "Payload",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetDebugConfig()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TelemetryControlMessageValidationError{
						field:  "DebugConfig",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TelemetryControlMessageValidationError{
						field:  "DebugConfig",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetDebugConfig()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TelemetryControlMessageValidationError{
					field:  "DebugConfig",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *TelemetryControlMessage_CollectorConfig:
		if v == nil {
			err := TelemetryControlMessageValidationError{
				field:  "Payload",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetCollectorConfig()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TelemetryControlMessageValidationError{
						field:  "CollectorConfig",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TelemetryControlMessageValidationError{
						field:  "CollectorConfig",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetCollectorConfig()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TelemetryControlMessageValidationError{
					field:  "CollectorConfig",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return TelemetryControlMessageMultiError(errors)
	}

	return nil
}

// TelemetryControlMessageMultiError is an error wrapping multiple validation
// errors returned by TelemetryControlMessage.ValidateAll() if the designated
// constraints aren't met.
type TelemetryControlMessageMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TelemetryControlMessageMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TelemetryControlMessageMultiError) AllErrors() []error { return m }

// TelemetryControlMessageValidationError is the validation error returned by
// TelemetryControlMessage.Validate if the designated constraints aren't met.
type TelemetryControlMessageValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TelemetryControlMessageValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TelemetryControlMessageValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TelemetryControlMessageValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TelemetryControlMessageValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TelemetryControlMessageValidationError) ErrorName() string {
	return "TelemetryControlMessageValidationError"
}

// Error satisfies the builtin error interface
func (e TelemetryControlMessageValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTelemetryControlMessage.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TelemetryControlMessageValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TelemetryControlMessageValidationError{}

// Validate checks the field values on ProviderConfig with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ProviderConfig) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ProviderConfig with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ProviderConfigMultiError,
// or nil if none found.
func (m *ProviderConfig) ValidateAll() error {
	return m.validate(true)
}

func (m *ProviderConfig) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for EnableTracing

	// no validation rules for EnableMetrics

	// no validation rules for EnableLogging

	// no validation rules for ResourceAttributes

	if all {
		switch v := interface{}(m.GetTracing()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ProviderConfigValidationError{
					field:  "Tracing",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ProviderConfigValidationError{
					field:  "Tracing",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTracing()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ProviderConfigValidationError{
				field:  "Tracing",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetMetrics()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ProviderConfigValidationError{
					field:  "Metrics",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ProviderConfigValidationError{
					field:  "Metrics",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMetrics()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ProviderConfigValidationError{
				field:  "Metrics",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetLogging()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ProviderConfigValidationError{
					field:  "Logging",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ProviderConfigValidationError{
					field:  "Logging",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetLogging()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ProviderConfigValidationError{
				field:  "Logging",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ProviderConfigMultiError(errors)
	}

	return nil
}

// ProviderConfigMultiError is an error wrapping multiple validation errors
// returned by ProviderConfig.ValidateAll() if the designated constraints
// aren't met.
type ProviderConfigMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProviderConfigMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProviderConfigMultiError) AllErrors() []error { return m }

// ProviderConfigValidationError is the validation error returned by
// ProviderConfig.Validate if the designated constraints aren't met.
type ProviderConfigValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProviderConfigValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProviderConfigValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProviderConfigValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProviderConfigValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProviderConfigValidationError) ErrorName() string { return "ProviderConfigValidationError" }

// Error satisfies the builtin error interface
func (e ProviderConfigValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProviderConfig.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProviderConfigValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProviderConfigValidationError{}

// Validate checks the field values on TracingProviderConfig with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TracingProviderConfig) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TracingProviderConfig with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TracingProviderConfigMultiError, or nil if none found.
func (m *TracingProviderConfig) ValidateAll() error {
	return m.validate(true)
}

func (m *TracingProviderConfig) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetSampling()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TracingProviderConfigValidationError{
					field:  "Sampling",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TracingProviderConfigValidationError{
					field:  "Sampling",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSampling()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TracingProviderConfigValidationError{
				field:  "Sampling",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for MaxExportBatchSize

	if all {
		switch v := interface{}(m.GetBatchTimeout()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TracingProviderConfigValidationError{
					field:  "BatchTimeout",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TracingProviderConfigValidationError{
					field:  "BatchTimeout",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBatchTimeout()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TracingProviderConfigValidationError{
				field:  "BatchTimeout",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for MaxQueueSize

	if len(errors) > 0 {
		return TracingProviderConfigMultiError(errors)
	}

	return nil
}

// TracingProviderConfigMultiError is an error wrapping multiple validation
// errors returned by TracingProviderConfig.ValidateAll() if the designated
// constraints aren't met.
type TracingProviderConfigMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TracingProviderConfigMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TracingProviderConfigMultiError) AllErrors() []error { return m }

// TracingProviderConfigValidationError is the validation error returned by
// TracingProviderConfig.Validate if the designated constraints aren't met.
type TracingProviderConfigValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TracingProviderConfigValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TracingProviderConfigValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TracingProviderConfigValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TracingProviderConfigValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TracingProviderConfigValidationError) ErrorName() string {
	return "TracingProviderConfigValidationError"
}

// Error satisfies the builtin error interface
func (e TracingProviderConfigValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTracingProviderConfig.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TracingProviderConfigValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TracingProviderConfigValidationError{}

// Validate checks the field values on MetricsProviderConfig with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MetricsProviderConfig) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MetricsProviderConfig with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MetricsProviderConfigMultiError, or nil if none found.
func (m *MetricsProviderConfig) ValidateAll() error {
	return m.validate(true)
}

func (m *MetricsProviderConfig) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetReaderInterval()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, MetricsProviderConfigValidationError{
					field:  "ReaderInterval",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, MetricsProviderConfigValidationError{
					field:  "ReaderInterval",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetReaderInterval()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MetricsProviderConfigValidationError{
				field:  "ReaderInterval",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for EnableExemplars

	// no validation rules for MaxCardinality

	if len(errors) > 0 {
		return MetricsProviderConfigMultiError(errors)
	}

	return nil
}

// MetricsProviderConfigMultiError is an error wrapping multiple validation
// errors returned by MetricsProviderConfig.ValidateAll() if the designated
// constraints aren't met.
type MetricsProviderConfigMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MetricsProviderConfigMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MetricsProviderConfigMultiError) AllErrors() []error { return m }

// MetricsProviderConfigValidationError is the validation error returned by
// MetricsProviderConfig.Validate if the designated constraints aren't met.
type MetricsProviderConfigValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MetricsProviderConfigValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MetricsProviderConfigValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MetricsProviderConfigValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MetricsProviderConfigValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MetricsProviderConfigValidationError) ErrorName() string {
	return "MetricsProviderConfigValidationError"
}

// Error satisfies the builtin error interface
func (e MetricsProviderConfigValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMetricsProviderConfig.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MetricsProviderConfigValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MetricsProviderConfigValidationError{}

// Validate checks the field values on LoggingProviderConfig with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *LoggingProviderConfig) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LoggingProviderConfig with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// LoggingProviderConfigMultiError, or nil if none found.
func (m *LoggingProviderConfig) ValidateAll() error {
	return m.validate(true)
}

func (m *LoggingProviderConfig) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for MaxExportBatchSize

	if all {
		switch v := interface{}(m.GetBatchTimeout()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, LoggingProviderConfigValidationError{
					field:  "BatchTimeout",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, LoggingProviderConfigValidationError{
					field:  "BatchTimeout",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBatchTimeout()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return LoggingProviderConfigValidationError{
				field:  "BatchTimeout",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for MaxQueueSize

	if len(errors) > 0 {
		return LoggingProviderConfigMultiError(errors)
	}

	return nil
}

// LoggingProviderConfigMultiError is an error wrapping multiple validation
// errors returned by LoggingProviderConfig.ValidateAll() if the designated
// constraints aren't met.
type LoggingProviderConfigMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LoggingProviderConfigMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LoggingProviderConfigMultiError) AllErrors() []error { return m }

// LoggingProviderConfigValidationError is the validation error returned by
// LoggingProviderConfig.Validate if the designated constraints aren't met.
type LoggingProviderConfigValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LoggingProviderConfigValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LoggingProviderConfigValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LoggingProviderConfigValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LoggingProviderConfigValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LoggingProviderConfigValidationError) ErrorName() string {
	return "LoggingProviderConfigValidationError"
}

// Error satisfies the builtin error interface
func (e LoggingProviderConfigValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLoggingProviderConfig.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LoggingProviderConfigValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LoggingProviderConfigValidationError{}

// Validate checks the field values on ExporterConfig with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ExporterConfig) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ExporterConfig with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ExporterConfigMultiError,
// or nil if none found.
func (m *ExporterConfig) ValidateAll() error {
	return m.validate(true)
}

func (m *ExporterConfig) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Type

	// no validation rules for HttpEndpoint

	// no validation rules for GrpcEndpoint

	// no validation rules for Insecure

	if all {
		switch v := interface{}(m.GetTimeout()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ExporterConfigValidationError{
					field:  "Timeout",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ExporterConfigValidationError{
					field:  "Timeout",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTimeout()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ExporterConfigValidationError{
				field:  "Timeout",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Headers

	if all {
		switch v := interface{}(m.GetTls()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ExporterConfigValidationError{
					field:  "Tls",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ExporterConfigValidationError{
					field:  "Tls",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTls()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ExporterConfigValidationError{
				field:  "Tls",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ExporterConfigMultiError(errors)
	}

	return nil
}

// ExporterConfigMultiError is an error wrapping multiple validation errors
// returned by ExporterConfig.ValidateAll() if the designated constraints
// aren't met.
type ExporterConfigMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ExporterConfigMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ExporterConfigMultiError) AllErrors() []error { return m }

// ExporterConfigValidationError is the validation error returned by
// ExporterConfig.Validate if the designated constraints aren't met.
type ExporterConfigValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExporterConfigValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExporterConfigValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExporterConfigValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExporterConfigValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExporterConfigValidationError) ErrorName() string { return "ExporterConfigValidationError" }

// Error satisfies the builtin error interface
func (e ExporterConfigValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExporterConfig.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExporterConfigValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExporterConfigValidationError{}

// Validate checks the field values on TLSConfig with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *TLSConfig) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TLSConfig with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in TLSConfigMultiError, or nil
// if none found.
func (m *TLSConfig) ValidateAll() error {
	return m.validate(true)
}

func (m *TLSConfig) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CaFile

	// no validation rules for CertFile

	// no validation rules for KeyFile

	// no validation rules for InsecureSkipVerify

	// no validation rules for ServerName

	if len(errors) > 0 {
		return TLSConfigMultiError(errors)
	}

	return nil
}

// TLSConfigMultiError is an error wrapping multiple validation errors returned
// by TLSConfig.ValidateAll() if the designated constraints aren't met.
type TLSConfigMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TLSConfigMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TLSConfigMultiError) AllErrors() []error { return m }

// TLSConfigValidationError is the validation error returned by
// TLSConfig.Validate if the designated constraints aren't met.
type TLSConfigValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TLSConfigValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TLSConfigValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TLSConfigValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TLSConfigValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TLSConfigValidationError) ErrorName() string { return "TLSConfigValidationError" }

// Error satisfies the builtin error interface
func (e TLSConfigValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTLSConfig.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TLSConfigValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TLSConfigValidationError{}

// Validate checks the field values on SamplingConfig with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SamplingConfig) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SamplingConfig with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SamplingConfigMultiError,
// or nil if none found.
func (m *SamplingConfig) ValidateAll() error {
	return m.validate(true)
}

func (m *SamplingConfig) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for DefaultRatio

	// no validation rules for ServiceOverrides

	// no validation rules for Strategy

	if len(errors) > 0 {
		return SamplingConfigMultiError(errors)
	}

	return nil
}

// SamplingConfigMultiError is an error wrapping multiple validation errors
// returned by SamplingConfig.ValidateAll() if the designated constraints
// aren't met.
type SamplingConfigMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SamplingConfigMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SamplingConfigMultiError) AllErrors() []error { return m }

// SamplingConfigValidationError is the validation error returned by
// SamplingConfig.Validate if the designated constraints aren't met.
type SamplingConfigValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SamplingConfigValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SamplingConfigValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SamplingConfigValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SamplingConfigValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SamplingConfigValidationError) ErrorName() string { return "SamplingConfigValidationError" }

// Error satisfies the builtin error interface
func (e SamplingConfigValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSamplingConfig.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SamplingConfigValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SamplingConfigValidationError{}

// Validate checks the field values on DebugConfig with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DebugConfig) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DebugConfig with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DebugConfigMultiError, or
// nil if none found.
func (m *DebugConfig) ValidateAll() error {
	return m.validate(true)
}

func (m *DebugConfig) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Enabled

	// no validation rules for Level

	if all {
		switch v := interface{}(m.GetDuration()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DebugConfigValidationError{
					field:  "Duration",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DebugConfigValidationError{
					field:  "Duration",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDuration()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DebugConfigValidationError{
				field:  "Duration",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return DebugConfigMultiError(errors)
	}

	return nil
}

// DebugConfigMultiError is an error wrapping multiple validation errors
// returned by DebugConfig.ValidateAll() if the designated constraints aren't met.
type DebugConfigMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DebugConfigMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DebugConfigMultiError) AllErrors() []error { return m }

// DebugConfigValidationError is the validation error returned by
// DebugConfig.Validate if the designated constraints aren't met.
type DebugConfigValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DebugConfigValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DebugConfigValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DebugConfigValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DebugConfigValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DebugConfigValidationError) ErrorName() string { return "DebugConfigValidationError" }

// Error satisfies the builtin error interface
func (e DebugConfigValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDebugConfig.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DebugConfigValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DebugConfigValidationError{}

// Validate checks the field values on CollectorConfig with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CollectorConfig) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CollectorConfig with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CollectorConfigMultiError, or nil if none found.
func (m *CollectorConfig) ValidateAll() error {
	return m.validate(true)
}

func (m *CollectorConfig) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for EnableCollection

	// no validation rules for EnablePreprocessing

	if all {
		switch v := interface{}(m.GetCollectionInterval()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CollectorConfigValidationError{
					field:  "CollectionInterval",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CollectorConfigValidationError{
					field:  "CollectionInterval",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCollectionInterval()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CollectorConfigValidationError{
				field:  "CollectionInterval",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for MaxBatchSize

	for idx, item := range m.GetFilterRules() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CollectorConfigValidationError{
						field:  fmt.Sprintf("FilterRules[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CollectorConfigValidationError{
						field:  fmt.Sprintf("FilterRules[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CollectorConfigValidationError{
					field:  fmt.Sprintf("FilterRules[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetAggregationRules() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CollectorConfigValidationError{
						field:  fmt.Sprintf("AggregationRules[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CollectorConfigValidationError{
						field:  fmt.Sprintf("AggregationRules[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CollectorConfigValidationError{
					field:  fmt.Sprintf("AggregationRules[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return CollectorConfigMultiError(errors)
	}

	return nil
}

// CollectorConfigMultiError is an error wrapping multiple validation errors
// returned by CollectorConfig.ValidateAll() if the designated constraints
// aren't met.
type CollectorConfigMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CollectorConfigMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CollectorConfigMultiError) AllErrors() []error { return m }

// CollectorConfigValidationError is the validation error returned by
// CollectorConfig.Validate if the designated constraints aren't met.
type CollectorConfigValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CollectorConfigValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CollectorConfigValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CollectorConfigValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CollectorConfigValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CollectorConfigValidationError) ErrorName() string { return "CollectorConfigValidationError" }

// Error satisfies the builtin error interface
func (e CollectorConfigValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCollectorConfig.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CollectorConfigValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CollectorConfigValidationError{}

// Validate checks the field values on FilterRule with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *FilterRule) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FilterRule with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in FilterRuleMultiError, or
// nil if none found.
func (m *FilterRule) ValidateAll() error {
	return m.validate(true)
}

func (m *FilterRule) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for SignalType

	if all {
		switch v := interface{}(m.GetCriteria()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, FilterRuleValidationError{
					field:  "Criteria",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, FilterRuleValidationError{
					field:  "Criteria",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCriteria()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FilterRuleValidationError{
				field:  "Criteria",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Action

	if len(errors) > 0 {
		return FilterRuleMultiError(errors)
	}

	return nil
}

// FilterRuleMultiError is an error wrapping multiple validation errors
// returned by FilterRule.ValidateAll() if the designated constraints aren't met.
type FilterRuleMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FilterRuleMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FilterRuleMultiError) AllErrors() []error { return m }

// FilterRuleValidationError is the validation error returned by
// FilterRule.Validate if the designated constraints aren't met.
type FilterRuleValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FilterRuleValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FilterRuleValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FilterRuleValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FilterRuleValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FilterRuleValidationError) ErrorName() string { return "FilterRuleValidationError" }

// Error satisfies the builtin error interface
func (e FilterRuleValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFilterRule.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FilterRuleValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FilterRuleValidationError{}

// Validate checks the field values on FilterCriteria with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *FilterCriteria) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FilterCriteria with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in FilterCriteriaMultiError,
// or nil if none found.
func (m *FilterCriteria) ValidateAll() error {
	return m.validate(true)
}

func (m *FilterCriteria) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ServiceNamePattern

	// no validation rules for AttributeFilters

	// no validation rules for ResourceFilters

	// no validation rules for NamePattern

	if len(errors) > 0 {
		return FilterCriteriaMultiError(errors)
	}

	return nil
}

// FilterCriteriaMultiError is an error wrapping multiple validation errors
// returned by FilterCriteria.ValidateAll() if the designated constraints
// aren't met.
type FilterCriteriaMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FilterCriteriaMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FilterCriteriaMultiError) AllErrors() []error { return m }

// FilterCriteriaValidationError is the validation error returned by
// FilterCriteria.Validate if the designated constraints aren't met.
type FilterCriteriaValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FilterCriteriaValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FilterCriteriaValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FilterCriteriaValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FilterCriteriaValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FilterCriteriaValidationError) ErrorName() string { return "FilterCriteriaValidationError" }

// Error satisfies the builtin error interface
func (e FilterCriteriaValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFilterCriteria.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FilterCriteriaValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FilterCriteriaValidationError{}

// Validate checks the field values on AggregationRule with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *AggregationRule) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AggregationRule with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AggregationRuleMultiError, or nil if none found.
func (m *AggregationRule) ValidateAll() error {
	return m.validate(true)
}

func (m *AggregationRule) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for SignalType

	if all {
		switch v := interface{}(m.GetCriteria()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AggregationRuleValidationError{
					field:  "Criteria",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AggregationRuleValidationError{
					field:  "Criteria",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCriteria()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AggregationRuleValidationError{
				field:  "Criteria",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetSettings()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AggregationRuleValidationError{
					field:  "Settings",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AggregationRuleValidationError{
					field:  "Settings",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSettings()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AggregationRuleValidationError{
				field:  "Settings",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return AggregationRuleMultiError(errors)
	}

	return nil
}

// AggregationRuleMultiError is an error wrapping multiple validation errors
// returned by AggregationRule.ValidateAll() if the designated constraints
// aren't met.
type AggregationRuleMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AggregationRuleMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AggregationRuleMultiError) AllErrors() []error { return m }

// AggregationRuleValidationError is the validation error returned by
// AggregationRule.Validate if the designated constraints aren't met.
type AggregationRuleValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AggregationRuleValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AggregationRuleValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AggregationRuleValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AggregationRuleValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AggregationRuleValidationError) ErrorName() string { return "AggregationRuleValidationError" }

// Error satisfies the builtin error interface
func (e AggregationRuleValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAggregationRule.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AggregationRuleValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AggregationRuleValidationError{}

// Validate checks the field values on AggregationCriteria with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AggregationCriteria) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AggregationCriteria with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AggregationCriteriaMultiError, or nil if none found.
func (m *AggregationCriteria) ValidateAll() error {
	return m.validate(true)
}

func (m *AggregationCriteria) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ServiceNamePattern

	// no validation rules for MetricNamePattern

	if len(errors) > 0 {
		return AggregationCriteriaMultiError(errors)
	}

	return nil
}

// AggregationCriteriaMultiError is an error wrapping multiple validation
// errors returned by AggregationCriteria.ValidateAll() if the designated
// constraints aren't met.
type AggregationCriteriaMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AggregationCriteriaMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AggregationCriteriaMultiError) AllErrors() []error { return m }

// AggregationCriteriaValidationError is the validation error returned by
// AggregationCriteria.Validate if the designated constraints aren't met.
type AggregationCriteriaValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AggregationCriteriaValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AggregationCriteriaValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AggregationCriteriaValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AggregationCriteriaValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AggregationCriteriaValidationError) ErrorName() string {
	return "AggregationCriteriaValidationError"
}

// Error satisfies the builtin error interface
func (e AggregationCriteriaValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAggregationCriteria.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AggregationCriteriaValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AggregationCriteriaValidationError{}

// Validate checks the field values on AggregationSettings with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AggregationSettings) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AggregationSettings with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AggregationSettingsMultiError, or nil if none found.
func (m *AggregationSettings) ValidateAll() error {
	return m.validate(true)
}

func (m *AggregationSettings) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetWindowSize()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AggregationSettingsValidationError{
					field:  "WindowSize",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AggregationSettingsValidationError{
					field:  "WindowSize",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetWindowSize()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AggregationSettingsValidationError{
				field:  "WindowSize",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Type

	// no validation rules for MaxCardinality

	if len(errors) > 0 {
		return AggregationSettingsMultiError(errors)
	}

	return nil
}

// AggregationSettingsMultiError is an error wrapping multiple validation
// errors returned by AggregationSettings.ValidateAll() if the designated
// constraints aren't met.
type AggregationSettingsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AggregationSettingsMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AggregationSettingsMultiError) AllErrors() []error { return m }

// AggregationSettingsValidationError is the validation error returned by
// AggregationSettings.Validate if the designated constraints aren't met.
type AggregationSettingsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AggregationSettingsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AggregationSettingsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AggregationSettingsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AggregationSettingsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AggregationSettingsValidationError) ErrorName() string {
	return "AggregationSettingsValidationError"
}

// Error satisfies the builtin error interface
func (e AggregationSettingsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAggregationSettings.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AggregationSettingsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AggregationSettingsValidationError{}

// Validate checks the field values on TelemetryStatus with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *TelemetryStatus) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TelemetryStatus with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TelemetryStatusMultiError, or nil if none found.
func (m *TelemetryStatus) ValidateAll() error {
	return m.validate(true)
}

func (m *TelemetryStatus) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Healthy

	// no validation rules for ConfigSummary

	if all {
		switch v := interface{}(m.GetStats()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TelemetryStatusValidationError{
					field:  "Stats",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TelemetryStatusValidationError{
					field:  "Stats",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStats()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TelemetryStatusValidationError{
				field:  "Stats",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return TelemetryStatusMultiError(errors)
	}

	return nil
}

// TelemetryStatusMultiError is an error wrapping multiple validation errors
// returned by TelemetryStatus.ValidateAll() if the designated constraints
// aren't met.
type TelemetryStatusMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TelemetryStatusMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TelemetryStatusMultiError) AllErrors() []error { return m }

// TelemetryStatusValidationError is the validation error returned by
// TelemetryStatus.Validate if the designated constraints aren't met.
type TelemetryStatusValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TelemetryStatusValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TelemetryStatusValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TelemetryStatusValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TelemetryStatusValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TelemetryStatusValidationError) ErrorName() string { return "TelemetryStatusValidationError" }

// Error satisfies the builtin error interface
func (e TelemetryStatusValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTelemetryStatus.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TelemetryStatusValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TelemetryStatusValidationError{}

// Validate checks the field values on TelemetryStats with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *TelemetryStats) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TelemetryStats with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in TelemetryStatsMultiError,
// or nil if none found.
func (m *TelemetryStats) ValidateAll() error {
	return m.validate(true)
}

func (m *TelemetryStats) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TracesProcessed

	// no validation rules for MetricsProcessed

	// no validation rules for LogsProcessed

	// no validation rules for TracesExported

	// no validation rules for MetricsExported

	// no validation rules for LogsExported

	// no validation rules for ExportErrors

	// no validation rules for ProcessingErrors

	if all {
		switch v := interface{}(m.GetAvgProcessingLatency()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TelemetryStatsValidationError{
					field:  "AvgProcessingLatency",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TelemetryStatsValidationError{
					field:  "AvgProcessingLatency",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAvgProcessingLatency()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TelemetryStatsValidationError{
				field:  "AvgProcessingLatency",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetAvgExportLatency()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TelemetryStatsValidationError{
					field:  "AvgExportLatency",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TelemetryStatsValidationError{
					field:  "AvgExportLatency",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAvgExportLatency()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TelemetryStatsValidationError{
				field:  "AvgExportLatency",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return TelemetryStatsMultiError(errors)
	}

	return nil
}

// TelemetryStatsMultiError is an error wrapping multiple validation errors
// returned by TelemetryStats.ValidateAll() if the designated constraints
// aren't met.
type TelemetryStatsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TelemetryStatsMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TelemetryStatsMultiError) AllErrors() []error { return m }

// TelemetryStatsValidationError is the validation error returned by
// TelemetryStats.Validate if the designated constraints aren't met.
type TelemetryStatsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TelemetryStatsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TelemetryStatsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TelemetryStatsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TelemetryStatsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TelemetryStatsValidationError) ErrorName() string { return "TelemetryStatsValidationError" }

// Error satisfies the builtin error interface
func (e TelemetryStatsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTelemetryStats.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TelemetryStatsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TelemetryStatsValidationError{}
