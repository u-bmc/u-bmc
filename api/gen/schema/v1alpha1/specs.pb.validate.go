// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: schema/v1alpha1/specs.proto

package schemav1alpha1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on PhysicalDimensions with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PhysicalDimensions) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PhysicalDimensions with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PhysicalDimensionsMultiError, or nil if none found.
func (m *PhysicalDimensions) ValidateAll() error {
	return m.validate(true)
}

func (m *PhysicalDimensions) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for WidthMm

	// no validation rules for HeightMm

	// no validation rules for DepthMm

	// no validation rules for WeightGrams

	if len(errors) > 0 {
		return PhysicalDimensionsMultiError(errors)
	}

	return nil
}

// PhysicalDimensionsMultiError is an error wrapping multiple validation errors
// returned by PhysicalDimensions.ValidateAll() if the designated constraints
// aren't met.
type PhysicalDimensionsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PhysicalDimensionsMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PhysicalDimensionsMultiError) AllErrors() []error { return m }

// PhysicalDimensionsValidationError is the validation error returned by
// PhysicalDimensions.Validate if the designated constraints aren't met.
type PhysicalDimensionsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PhysicalDimensionsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PhysicalDimensionsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PhysicalDimensionsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PhysicalDimensionsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PhysicalDimensionsValidationError) ErrorName() string {
	return "PhysicalDimensionsValidationError"
}

// Error satisfies the builtin error interface
func (e PhysicalDimensionsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPhysicalDimensions.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PhysicalDimensionsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PhysicalDimensionsValidationError{}

// Validate checks the field values on EnvironmentalSpecs with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *EnvironmentalSpecs) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EnvironmentalSpecs with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// EnvironmentalSpecsMultiError, or nil if none found.
func (m *EnvironmentalSpecs) ValidateAll() error {
	return m.validate(true)
}

func (m *EnvironmentalSpecs) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.OperatingTemperature != nil {

		if all {
			switch v := interface{}(m.GetOperatingTemperature()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, EnvironmentalSpecsValidationError{
						field:  "OperatingTemperature",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, EnvironmentalSpecsValidationError{
						field:  "OperatingTemperature",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetOperatingTemperature()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return EnvironmentalSpecsValidationError{
					field:  "OperatingTemperature",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.StorageTemperature != nil {

		if all {
			switch v := interface{}(m.GetStorageTemperature()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, EnvironmentalSpecsValidationError{
						field:  "StorageTemperature",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, EnvironmentalSpecsValidationError{
						field:  "StorageTemperature",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetStorageTemperature()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return EnvironmentalSpecsValidationError{
					field:  "StorageTemperature",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.OperatingHumidity != nil {

		if all {
			switch v := interface{}(m.GetOperatingHumidity()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, EnvironmentalSpecsValidationError{
						field:  "OperatingHumidity",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, EnvironmentalSpecsValidationError{
						field:  "OperatingHumidity",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetOperatingHumidity()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return EnvironmentalSpecsValidationError{
					field:  "OperatingHumidity",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.StorageHumidity != nil {

		if all {
			switch v := interface{}(m.GetStorageHumidity()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, EnvironmentalSpecsValidationError{
						field:  "StorageHumidity",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, EnvironmentalSpecsValidationError{
						field:  "StorageHumidity",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetStorageHumidity()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return EnvironmentalSpecsValidationError{
					field:  "StorageHumidity",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.MaxAltitudeMeters != nil {
		// no validation rules for MaxAltitudeMeters
	}

	if len(errors) > 0 {
		return EnvironmentalSpecsMultiError(errors)
	}

	return nil
}

// EnvironmentalSpecsMultiError is an error wrapping multiple validation errors
// returned by EnvironmentalSpecs.ValidateAll() if the designated constraints
// aren't met.
type EnvironmentalSpecsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EnvironmentalSpecsMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EnvironmentalSpecsMultiError) AllErrors() []error { return m }

// EnvironmentalSpecsValidationError is the validation error returned by
// EnvironmentalSpecs.Validate if the designated constraints aren't met.
type EnvironmentalSpecsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EnvironmentalSpecsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EnvironmentalSpecsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EnvironmentalSpecsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EnvironmentalSpecsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EnvironmentalSpecsValidationError) ErrorName() string {
	return "EnvironmentalSpecsValidationError"
}

// Error satisfies the builtin error interface
func (e EnvironmentalSpecsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEnvironmentalSpecs.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EnvironmentalSpecsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EnvironmentalSpecsValidationError{}

// Validate checks the field values on TemperatureRange with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *TemperatureRange) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TemperatureRange with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TemperatureRangeMultiError, or nil if none found.
func (m *TemperatureRange) ValidateAll() error {
	return m.validate(true)
}

func (m *TemperatureRange) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for MinCelsius

	// no validation rules for MaxCelsius

	if len(errors) > 0 {
		return TemperatureRangeMultiError(errors)
	}

	return nil
}

// TemperatureRangeMultiError is an error wrapping multiple validation errors
// returned by TemperatureRange.ValidateAll() if the designated constraints
// aren't met.
type TemperatureRangeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TemperatureRangeMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TemperatureRangeMultiError) AllErrors() []error { return m }

// TemperatureRangeValidationError is the validation error returned by
// TemperatureRange.Validate if the designated constraints aren't met.
type TemperatureRangeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TemperatureRangeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TemperatureRangeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TemperatureRangeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TemperatureRangeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TemperatureRangeValidationError) ErrorName() string { return "TemperatureRangeValidationError" }

// Error satisfies the builtin error interface
func (e TemperatureRangeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTemperatureRange.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TemperatureRangeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TemperatureRangeValidationError{}

// Validate checks the field values on HumidityRange with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *HumidityRange) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on HumidityRange with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in HumidityRangeMultiError, or
// nil if none found.
func (m *HumidityRange) ValidateAll() error {
	return m.validate(true)
}

func (m *HumidityRange) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for MinPercent

	// no validation rules for MaxPercent

	if len(errors) > 0 {
		return HumidityRangeMultiError(errors)
	}

	return nil
}

// HumidityRangeMultiError is an error wrapping multiple validation errors
// returned by HumidityRange.ValidateAll() if the designated constraints
// aren't met.
type HumidityRangeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m HumidityRangeMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m HumidityRangeMultiError) AllErrors() []error { return m }

// HumidityRangeValidationError is the validation error returned by
// HumidityRange.Validate if the designated constraints aren't met.
type HumidityRangeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HumidityRangeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HumidityRangeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HumidityRangeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HumidityRangeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HumidityRangeValidationError) ErrorName() string { return "HumidityRangeValidationError" }

// Error satisfies the builtin error interface
func (e HumidityRangeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHumidityRange.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HumidityRangeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HumidityRangeValidationError{}
