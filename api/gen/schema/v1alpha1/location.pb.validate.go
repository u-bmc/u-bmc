// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: schema/v1alpha1/location.proto

package schemav1alpha1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Location with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Location) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Location with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in LocationMultiError, or nil
// if none found.
func (m *Location) ValidateAll() error {
	return m.validate(true)
}

func (m *Location) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CustomAttributes

	if m.GeographicalLocation != nil {

		if all {
			switch v := interface{}(m.GetGeographicalLocation()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, LocationValidationError{
						field:  "GeographicalLocation",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, LocationValidationError{
						field:  "GeographicalLocation",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetGeographicalLocation()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return LocationValidationError{
					field:  "GeographicalLocation",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.FacilityLocation != nil {

		if all {
			switch v := interface{}(m.GetFacilityLocation()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, LocationValidationError{
						field:  "FacilityLocation",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, LocationValidationError{
						field:  "FacilityLocation",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetFacilityLocation()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return LocationValidationError{
					field:  "FacilityLocation",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.RackLocation != nil {

		if all {
			switch v := interface{}(m.GetRackLocation()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, LocationValidationError{
						field:  "RackLocation",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, LocationValidationError{
						field:  "RackLocation",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetRackLocation()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return LocationValidationError{
					field:  "RackLocation",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.ChassisLocation != nil {

		if all {
			switch v := interface{}(m.GetChassisLocation()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, LocationValidationError{
						field:  "ChassisLocation",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, LocationValidationError{
						field:  "ChassisLocation",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetChassisLocation()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return LocationValidationError{
					field:  "ChassisLocation",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.ComponentLocation != nil {

		if all {
			switch v := interface{}(m.GetComponentLocation()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, LocationValidationError{
						field:  "ComponentLocation",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, LocationValidationError{
						field:  "ComponentLocation",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetComponentLocation()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return LocationValidationError{
					field:  "ComponentLocation",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.Accuracy != nil {
		// no validation rules for Accuracy
	}

	if len(errors) > 0 {
		return LocationMultiError(errors)
	}

	return nil
}

// LocationMultiError is an error wrapping multiple validation errors returned
// by Location.ValidateAll() if the designated constraints aren't met.
type LocationMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LocationMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LocationMultiError) AllErrors() []error { return m }

// LocationValidationError is the validation error returned by
// Location.Validate if the designated constraints aren't met.
type LocationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LocationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LocationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LocationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LocationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LocationValidationError) ErrorName() string { return "LocationValidationError" }

// Error satisfies the builtin error interface
func (e LocationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLocation.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LocationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LocationValidationError{}

// Validate checks the field values on GeographicalLocation with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GeographicalLocation) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GeographicalLocation with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GeographicalLocationMultiError, or nil if none found.
func (m *GeographicalLocation) ValidateAll() error {
	return m.validate(true)
}

func (m *GeographicalLocation) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.Address != nil {

		if all {
			switch v := interface{}(m.GetAddress()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GeographicalLocationValidationError{
						field:  "Address",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GeographicalLocationValidationError{
						field:  "Address",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetAddress()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GeographicalLocationValidationError{
					field:  "Address",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.Coordinates != nil {

		if all {
			switch v := interface{}(m.GetCoordinates()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GeographicalLocationValidationError{
						field:  "Coordinates",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GeographicalLocationValidationError{
						field:  "Coordinates",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetCoordinates()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GeographicalLocationValidationError{
					field:  "Coordinates",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.AltitudeMeters != nil {
		// no validation rules for AltitudeMeters
	}

	if m.Timezone != nil {
		// no validation rules for Timezone
	}

	if m.CountryCode != nil {
		// no validation rules for CountryCode
	}

	if len(errors) > 0 {
		return GeographicalLocationMultiError(errors)
	}

	return nil
}

// GeographicalLocationMultiError is an error wrapping multiple validation
// errors returned by GeographicalLocation.ValidateAll() if the designated
// constraints aren't met.
type GeographicalLocationMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GeographicalLocationMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GeographicalLocationMultiError) AllErrors() []error { return m }

// GeographicalLocationValidationError is the validation error returned by
// GeographicalLocation.Validate if the designated constraints aren't met.
type GeographicalLocationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GeographicalLocationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GeographicalLocationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GeographicalLocationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GeographicalLocationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GeographicalLocationValidationError) ErrorName() string {
	return "GeographicalLocationValidationError"
}

// Error satisfies the builtin error interface
func (e GeographicalLocationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGeographicalLocation.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GeographicalLocationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GeographicalLocationValidationError{}

// Validate checks the field values on FacilityLocation with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *FacilityLocation) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FacilityLocation with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FacilityLocationMultiError, or nil if none found.
func (m *FacilityLocation) ValidateAll() error {
	return m.validate(true)
}

func (m *FacilityLocation) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	if m.Site != nil {
		// no validation rules for Site
	}

	if m.Building != nil {
		// no validation rules for Building
	}

	if m.Floor != nil {
		// no validation rules for Floor
	}

	if m.Room != nil {
		// no validation rules for Room
	}

	if len(errors) > 0 {
		return FacilityLocationMultiError(errors)
	}

	return nil
}

// FacilityLocationMultiError is an error wrapping multiple validation errors
// returned by FacilityLocation.ValidateAll() if the designated constraints
// aren't met.
type FacilityLocationMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FacilityLocationMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FacilityLocationMultiError) AllErrors() []error { return m }

// FacilityLocationValidationError is the validation error returned by
// FacilityLocation.Validate if the designated constraints aren't met.
type FacilityLocationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FacilityLocationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FacilityLocationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FacilityLocationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FacilityLocationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FacilityLocationValidationError) ErrorName() string { return "FacilityLocationValidationError" }

// Error satisfies the builtin error interface
func (e FacilityLocationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFacilityLocation.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FacilityLocationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FacilityLocationValidationError{}

// Validate checks the field values on RackLocation with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *RackLocation) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RackLocation with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in RackLocationMultiError, or
// nil if none found.
func (m *RackLocation) ValidateAll() error {
	return m.validate(true)
}

func (m *RackLocation) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	if m.Zone != nil {
		// no validation rules for Zone
	}

	if m.Aisle != nil {
		// no validation rules for Aisle
	}

	if m.Row != nil {
		// no validation rules for Row
	}

	if len(errors) > 0 {
		return RackLocationMultiError(errors)
	}

	return nil
}

// RackLocationMultiError is an error wrapping multiple validation errors
// returned by RackLocation.ValidateAll() if the designated constraints aren't met.
type RackLocationMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RackLocationMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RackLocationMultiError) AllErrors() []error { return m }

// RackLocationValidationError is the validation error returned by
// RackLocation.Validate if the designated constraints aren't met.
type RackLocationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RackLocationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RackLocationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RackLocationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RackLocationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RackLocationValidationError) ErrorName() string { return "RackLocationValidationError" }

// Error satisfies the builtin error interface
func (e RackLocationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRackLocation.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RackLocationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RackLocationValidationError{}

// Validate checks the field values on ChassisLocation with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ChassisLocation) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ChassisLocation with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ChassisLocationMultiError, or nil if none found.
func (m *ChassisLocation) ValidateAll() error {
	return m.validate(true)
}

func (m *ChassisLocation) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	if m.RackUnit != nil {
		// no validation rules for RackUnit
	}

	if m.HeightUnit != nil {
		// no validation rules for HeightUnit
	}

	if m.Slot != nil {
		// no validation rules for Slot
	}

	if m.Bay != nil {
		// no validation rules for Bay
	}

	if m.Position != nil {
		// no validation rules for Position
	}

	if len(errors) > 0 {
		return ChassisLocationMultiError(errors)
	}

	return nil
}

// ChassisLocationMultiError is an error wrapping multiple validation errors
// returned by ChassisLocation.ValidateAll() if the designated constraints
// aren't met.
type ChassisLocationMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChassisLocationMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChassisLocationMultiError) AllErrors() []error { return m }

// ChassisLocationValidationError is the validation error returned by
// ChassisLocation.Validate if the designated constraints aren't met.
type ChassisLocationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChassisLocationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChassisLocationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChassisLocationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChassisLocationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChassisLocationValidationError) ErrorName() string { return "ChassisLocationValidationError" }

// Error satisfies the builtin error interface
func (e ChassisLocationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChassisLocation.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChassisLocationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChassisLocationValidationError{}

// Validate checks the field values on ComponentLocation with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ComponentLocation) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ComponentLocation with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ComponentLocationMultiError, or nil if none found.
func (m *ComponentLocation) ValidateAll() error {
	return m.validate(true)
}

func (m *ComponentLocation) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	if m.Socket != nil {
		// no validation rules for Socket
	}

	if m.Slot != nil {
		// no validation rules for Slot
	}

	if m.Bay != nil {
		// no validation rules for Bay
	}

	if m.Position != nil {
		// no validation rules for Position
	}

	if len(errors) > 0 {
		return ComponentLocationMultiError(errors)
	}

	return nil
}

// ComponentLocationMultiError is an error wrapping multiple validation errors
// returned by ComponentLocation.ValidateAll() if the designated constraints
// aren't met.
type ComponentLocationMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ComponentLocationMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ComponentLocationMultiError) AllErrors() []error { return m }

// ComponentLocationValidationError is the validation error returned by
// ComponentLocation.Validate if the designated constraints aren't met.
type ComponentLocationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ComponentLocationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ComponentLocationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ComponentLocationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ComponentLocationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ComponentLocationValidationError) ErrorName() string {
	return "ComponentLocationValidationError"
}

// Error satisfies the builtin error interface
func (e ComponentLocationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sComponentLocation.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ComponentLocationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ComponentLocationValidationError{}
