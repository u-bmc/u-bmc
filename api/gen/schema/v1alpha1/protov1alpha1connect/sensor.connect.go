// SPDX-License-Identifier: BSD-3-Clause

// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: schema/v1alpha1/sensor.proto

package protov1alpha1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1alpha1 "github.com/u-bmc/u-bmc/api/gen/schema/v1alpha1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// SensorServiceName is the fully-qualified name of the SensorService service.
	SensorServiceName = "proto.v1alpha1.SensorService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// SensorServiceGetSensorProcedure is the fully-qualified name of the SensorService's GetSensor RPC.
	SensorServiceGetSensorProcedure = "/proto.v1alpha1.SensorService/GetSensor"
	// SensorServiceListSensorsProcedure is the fully-qualified name of the SensorService's ListSensors
	// RPC.
	SensorServiceListSensorsProcedure = "/proto.v1alpha1.SensorService/ListSensors"
)

// SensorServiceClient is a client for the proto.v1alpha1.SensorService service.
type SensorServiceClient interface {
	// Get a sensor by ID
	GetSensor(context.Context, *connect.Request[v1alpha1.GetSensorRequest]) (*connect.Response[v1alpha1.GetSensorResponse], error)
	// List all sensors with optional filtering
	ListSensors(context.Context, *connect.Request[v1alpha1.ListSensorsRequest]) (*connect.Response[v1alpha1.ListSensorsResponse], error)
}

// NewSensorServiceClient constructs a client for the proto.v1alpha1.SensorService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewSensorServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) SensorServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	sensorServiceMethods := v1alpha1.File_schema_v1alpha1_sensor_proto.Services().ByName("SensorService").Methods()
	return &sensorServiceClient{
		getSensor: connect.NewClient[v1alpha1.GetSensorRequest, v1alpha1.GetSensorResponse](
			httpClient,
			baseURL+SensorServiceGetSensorProcedure,
			connect.WithSchema(sensorServiceMethods.ByName("GetSensor")),
			connect.WithClientOptions(opts...),
		),
		listSensors: connect.NewClient[v1alpha1.ListSensorsRequest, v1alpha1.ListSensorsResponse](
			httpClient,
			baseURL+SensorServiceListSensorsProcedure,
			connect.WithSchema(sensorServiceMethods.ByName("ListSensors")),
			connect.WithClientOptions(opts...),
		),
	}
}

// sensorServiceClient implements SensorServiceClient.
type sensorServiceClient struct {
	getSensor   *connect.Client[v1alpha1.GetSensorRequest, v1alpha1.GetSensorResponse]
	listSensors *connect.Client[v1alpha1.ListSensorsRequest, v1alpha1.ListSensorsResponse]
}

// GetSensor calls proto.v1alpha1.SensorService.GetSensor.
func (c *sensorServiceClient) GetSensor(ctx context.Context, req *connect.Request[v1alpha1.GetSensorRequest]) (*connect.Response[v1alpha1.GetSensorResponse], error) {
	return c.getSensor.CallUnary(ctx, req)
}

// ListSensors calls proto.v1alpha1.SensorService.ListSensors.
func (c *sensorServiceClient) ListSensors(ctx context.Context, req *connect.Request[v1alpha1.ListSensorsRequest]) (*connect.Response[v1alpha1.ListSensorsResponse], error) {
	return c.listSensors.CallUnary(ctx, req)
}

// SensorServiceHandler is an implementation of the proto.v1alpha1.SensorService service.
type SensorServiceHandler interface {
	// Get a sensor by ID
	GetSensor(context.Context, *connect.Request[v1alpha1.GetSensorRequest]) (*connect.Response[v1alpha1.GetSensorResponse], error)
	// List all sensors with optional filtering
	ListSensors(context.Context, *connect.Request[v1alpha1.ListSensorsRequest]) (*connect.Response[v1alpha1.ListSensorsResponse], error)
}

// NewSensorServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewSensorServiceHandler(svc SensorServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	sensorServiceMethods := v1alpha1.File_schema_v1alpha1_sensor_proto.Services().ByName("SensorService").Methods()
	sensorServiceGetSensorHandler := connect.NewUnaryHandler(
		SensorServiceGetSensorProcedure,
		svc.GetSensor,
		connect.WithSchema(sensorServiceMethods.ByName("GetSensor")),
		connect.WithHandlerOptions(opts...),
	)
	sensorServiceListSensorsHandler := connect.NewUnaryHandler(
		SensorServiceListSensorsProcedure,
		svc.ListSensors,
		connect.WithSchema(sensorServiceMethods.ByName("ListSensors")),
		connect.WithHandlerOptions(opts...),
	)
	return "/proto.v1alpha1.SensorService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case SensorServiceGetSensorProcedure:
			sensorServiceGetSensorHandler.ServeHTTP(w, r)
		case SensorServiceListSensorsProcedure:
			sensorServiceListSensorsHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedSensorServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedSensorServiceHandler struct{}

func (UnimplementedSensorServiceHandler) GetSensor(context.Context, *connect.Request[v1alpha1.GetSensorRequest]) (*connect.Response[v1alpha1.GetSensorResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("proto.v1alpha1.SensorService.GetSensor is not implemented"))
}

func (UnimplementedSensorServiceHandler) ListSensors(context.Context, *connect.Request[v1alpha1.ListSensorsRequest]) (*connect.Response[v1alpha1.ListSensorsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("proto.v1alpha1.SensorService.ListSensors is not implemented"))
}
