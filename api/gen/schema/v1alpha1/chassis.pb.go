// SPDX-License-Identifier: BSD-3-Clause

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: schema/v1alpha1/chassis.proto

package schemav1alpha1

import (
	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	fieldmaskpb "google.golang.org/protobuf/types/known/fieldmaskpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ChassisType int32

const (
	ChassisType_CHASSIS_TYPE_UNSPECIFIED ChassisType = 0
	ChassisType_CHASSIS_TYPE_RACK_MOUNT  ChassisType = 1
	ChassisType_CHASSIS_TYPE_BLADE       ChassisType = 2
	ChassisType_CHASSIS_TYPE_STANDALONE  ChassisType = 3
	ChassisType_CHASSIS_TYPE_CARD        ChassisType = 4
	ChassisType_CHASSIS_TYPE_TOWER       ChassisType = 5
	ChassisType_CHASSIS_TYPE_DESKTOP     ChassisType = 6
	ChassisType_CHASSIS_TYPE_ENCLOSURE   ChassisType = 7
)

// Enum value maps for ChassisType.
var (
	ChassisType_name = map[int32]string{
		0: "CHASSIS_TYPE_UNSPECIFIED",
		1: "CHASSIS_TYPE_RACK_MOUNT",
		2: "CHASSIS_TYPE_BLADE",
		3: "CHASSIS_TYPE_STANDALONE",
		4: "CHASSIS_TYPE_CARD",
		5: "CHASSIS_TYPE_TOWER",
		6: "CHASSIS_TYPE_DESKTOP",
		7: "CHASSIS_TYPE_ENCLOSURE",
	}
	ChassisType_value = map[string]int32{
		"CHASSIS_TYPE_UNSPECIFIED": 0,
		"CHASSIS_TYPE_RACK_MOUNT":  1,
		"CHASSIS_TYPE_BLADE":       2,
		"CHASSIS_TYPE_STANDALONE":  3,
		"CHASSIS_TYPE_CARD":        4,
		"CHASSIS_TYPE_TOWER":       5,
		"CHASSIS_TYPE_DESKTOP":     6,
		"CHASSIS_TYPE_ENCLOSURE":   7,
	}
)

func (x ChassisType) Enum() *ChassisType {
	p := new(ChassisType)
	*p = x
	return p
}

func (x ChassisType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ChassisType) Descriptor() protoreflect.EnumDescriptor {
	return file_schema_v1alpha1_chassis_proto_enumTypes[0].Descriptor()
}

func (ChassisType) Type() protoreflect.EnumType {
	return &file_schema_v1alpha1_chassis_proto_enumTypes[0]
}

func (x ChassisType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ChassisType.Descriptor instead.
func (ChassisType) EnumDescriptor() ([]byte, []int) {
	return file_schema_v1alpha1_chassis_proto_rawDescGZIP(), []int{0}
}

type ChassisFormFactor int32

const (
	ChassisFormFactor_CHASSIS_FORM_FACTOR_UNSPECIFIED ChassisFormFactor = 0
	ChassisFormFactor_CHASSIS_FORM_FACTOR_1U          ChassisFormFactor = 1
	ChassisFormFactor_CHASSIS_FORM_FACTOR_2U          ChassisFormFactor = 2
	ChassisFormFactor_CHASSIS_FORM_FACTOR_3U          ChassisFormFactor = 3
	ChassisFormFactor_CHASSIS_FORM_FACTOR_4U          ChassisFormFactor = 4
	ChassisFormFactor_CHASSIS_FORM_FACTOR_5U          ChassisFormFactor = 5
	ChassisFormFactor_CHASSIS_FORM_FACTOR_6U          ChassisFormFactor = 6
	ChassisFormFactor_CHASSIS_FORM_FACTOR_HALF_WIDTH  ChassisFormFactor = 7
	ChassisFormFactor_CHASSIS_FORM_FACTOR_FULL_WIDTH  ChassisFormFactor = 8
	ChassisFormFactor_CHASSIS_FORM_FACTOR_CUSTOM      ChassisFormFactor = 9
)

// Enum value maps for ChassisFormFactor.
var (
	ChassisFormFactor_name = map[int32]string{
		0: "CHASSIS_FORM_FACTOR_UNSPECIFIED",
		1: "CHASSIS_FORM_FACTOR_1U",
		2: "CHASSIS_FORM_FACTOR_2U",
		3: "CHASSIS_FORM_FACTOR_3U",
		4: "CHASSIS_FORM_FACTOR_4U",
		5: "CHASSIS_FORM_FACTOR_5U",
		6: "CHASSIS_FORM_FACTOR_6U",
		7: "CHASSIS_FORM_FACTOR_HALF_WIDTH",
		8: "CHASSIS_FORM_FACTOR_FULL_WIDTH",
		9: "CHASSIS_FORM_FACTOR_CUSTOM",
	}
	ChassisFormFactor_value = map[string]int32{
		"CHASSIS_FORM_FACTOR_UNSPECIFIED": 0,
		"CHASSIS_FORM_FACTOR_1U":          1,
		"CHASSIS_FORM_FACTOR_2U":          2,
		"CHASSIS_FORM_FACTOR_3U":          3,
		"CHASSIS_FORM_FACTOR_4U":          4,
		"CHASSIS_FORM_FACTOR_5U":          5,
		"CHASSIS_FORM_FACTOR_6U":          6,
		"CHASSIS_FORM_FACTOR_HALF_WIDTH":  7,
		"CHASSIS_FORM_FACTOR_FULL_WIDTH":  8,
		"CHASSIS_FORM_FACTOR_CUSTOM":      9,
	}
)

func (x ChassisFormFactor) Enum() *ChassisFormFactor {
	p := new(ChassisFormFactor)
	*p = x
	return p
}

func (x ChassisFormFactor) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ChassisFormFactor) Descriptor() protoreflect.EnumDescriptor {
	return file_schema_v1alpha1_chassis_proto_enumTypes[1].Descriptor()
}

func (ChassisFormFactor) Type() protoreflect.EnumType {
	return &file_schema_v1alpha1_chassis_proto_enumTypes[1]
}

func (x ChassisFormFactor) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ChassisFormFactor.Descriptor instead.
func (ChassisFormFactor) EnumDescriptor() ([]byte, []int) {
	return file_schema_v1alpha1_chassis_proto_rawDescGZIP(), []int{1}
}

type ChassisStatus int32

const (
	ChassisStatus_CHASSIS_STATUS_UNSPECIFIED   ChassisStatus = 0
	ChassisStatus_CHASSIS_STATUS_ON            ChassisStatus = 1
	ChassisStatus_CHASSIS_STATUS_OFF           ChassisStatus = 2
	ChassisStatus_CHASSIS_STATUS_TRANSITIONING ChassisStatus = 3
	ChassisStatus_CHASSIS_STATUS_WARNING       ChassisStatus = 4
	ChassisStatus_CHASSIS_STATUS_CRITICAL      ChassisStatus = 5
	ChassisStatus_CHASSIS_STATUS_FAILED        ChassisStatus = 6
	ChassisStatus_CHASSIS_STATUS_UNKNOWN       ChassisStatus = 7
)

// Enum value maps for ChassisStatus.
var (
	ChassisStatus_name = map[int32]string{
		0: "CHASSIS_STATUS_UNSPECIFIED",
		1: "CHASSIS_STATUS_ON",
		2: "CHASSIS_STATUS_OFF",
		3: "CHASSIS_STATUS_TRANSITIONING",
		4: "CHASSIS_STATUS_WARNING",
		5: "CHASSIS_STATUS_CRITICAL",
		6: "CHASSIS_STATUS_FAILED",
		7: "CHASSIS_STATUS_UNKNOWN",
	}
	ChassisStatus_value = map[string]int32{
		"CHASSIS_STATUS_UNSPECIFIED":   0,
		"CHASSIS_STATUS_ON":            1,
		"CHASSIS_STATUS_OFF":           2,
		"CHASSIS_STATUS_TRANSITIONING": 3,
		"CHASSIS_STATUS_WARNING":       4,
		"CHASSIS_STATUS_CRITICAL":      5,
		"CHASSIS_STATUS_FAILED":        6,
		"CHASSIS_STATUS_UNKNOWN":       7,
	}
)

func (x ChassisStatus) Enum() *ChassisStatus {
	p := new(ChassisStatus)
	*p = x
	return p
}

func (x ChassisStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ChassisStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_schema_v1alpha1_chassis_proto_enumTypes[2].Descriptor()
}

func (ChassisStatus) Type() protoreflect.EnumType {
	return &file_schema_v1alpha1_chassis_proto_enumTypes[2]
}

func (x ChassisStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ChassisStatus.Descriptor instead.
func (ChassisStatus) EnumDescriptor() ([]byte, []int) {
	return file_schema_v1alpha1_chassis_proto_rawDescGZIP(), []int{2}
}

type ChassisTransition int32

const (
	ChassisTransition_CHASSIS_TRANSITION_UNSPECIFIED ChassisTransition = 0
	ChassisTransition_CHASSIS_TRANSITION_ON          ChassisTransition = 1
	ChassisTransition_CHASSIS_TRANSITION_OFF         ChassisTransition = 2
	ChassisTransition_CHASSIS_TRANSITION_POWER_CYCLE ChassisTransition = 3
)

// Enum value maps for ChassisTransition.
var (
	ChassisTransition_name = map[int32]string{
		0: "CHASSIS_TRANSITION_UNSPECIFIED",
		1: "CHASSIS_TRANSITION_ON",
		2: "CHASSIS_TRANSITION_OFF",
		3: "CHASSIS_TRANSITION_POWER_CYCLE",
	}
	ChassisTransition_value = map[string]int32{
		"CHASSIS_TRANSITION_UNSPECIFIED": 0,
		"CHASSIS_TRANSITION_ON":          1,
		"CHASSIS_TRANSITION_OFF":         2,
		"CHASSIS_TRANSITION_POWER_CYCLE": 3,
	}
)

func (x ChassisTransition) Enum() *ChassisTransition {
	p := new(ChassisTransition)
	*p = x
	return p
}

func (x ChassisTransition) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ChassisTransition) Descriptor() protoreflect.EnumDescriptor {
	return file_schema_v1alpha1_chassis_proto_enumTypes[3].Descriptor()
}

func (ChassisTransition) Type() protoreflect.EnumType {
	return &file_schema_v1alpha1_chassis_proto_enumTypes[3]
}

func (x ChassisTransition) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ChassisTransition.Descriptor instead.
func (ChassisTransition) EnumDescriptor() ([]byte, []int) {
	return file_schema_v1alpha1_chassis_proto_rawDescGZIP(), []int{3}
}

type ChassisPowerSupplyType int32

const (
	ChassisPowerSupplyType_CHASSIS_POWER_SUPPLY_TYPE_UNSPECIFIED ChassisPowerSupplyType = 0
	ChassisPowerSupplyType_CHASSIS_POWER_SUPPLY_TYPE_AC          ChassisPowerSupplyType = 1
	ChassisPowerSupplyType_CHASSIS_POWER_SUPPLY_TYPE_DC          ChassisPowerSupplyType = 2
	ChassisPowerSupplyType_CHASSIS_POWER_SUPPLY_TYPE_UPS         ChassisPowerSupplyType = 3
	ChassisPowerSupplyType_CHASSIS_POWER_SUPPLY_TYPE_REDUNDANT   ChassisPowerSupplyType = 4
)

// Enum value maps for ChassisPowerSupplyType.
var (
	ChassisPowerSupplyType_name = map[int32]string{
		0: "CHASSIS_POWER_SUPPLY_TYPE_UNSPECIFIED",
		1: "CHASSIS_POWER_SUPPLY_TYPE_AC",
		2: "CHASSIS_POWER_SUPPLY_TYPE_DC",
		3: "CHASSIS_POWER_SUPPLY_TYPE_UPS",
		4: "CHASSIS_POWER_SUPPLY_TYPE_REDUNDANT",
	}
	ChassisPowerSupplyType_value = map[string]int32{
		"CHASSIS_POWER_SUPPLY_TYPE_UNSPECIFIED": 0,
		"CHASSIS_POWER_SUPPLY_TYPE_AC":          1,
		"CHASSIS_POWER_SUPPLY_TYPE_DC":          2,
		"CHASSIS_POWER_SUPPLY_TYPE_UPS":         3,
		"CHASSIS_POWER_SUPPLY_TYPE_REDUNDANT":   4,
	}
)

func (x ChassisPowerSupplyType) Enum() *ChassisPowerSupplyType {
	p := new(ChassisPowerSupplyType)
	*p = x
	return p
}

func (x ChassisPowerSupplyType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ChassisPowerSupplyType) Descriptor() protoreflect.EnumDescriptor {
	return file_schema_v1alpha1_chassis_proto_enumTypes[4].Descriptor()
}

func (ChassisPowerSupplyType) Type() protoreflect.EnumType {
	return &file_schema_v1alpha1_chassis_proto_enumTypes[4]
}

func (x ChassisPowerSupplyType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ChassisPowerSupplyType.Descriptor instead.
func (ChassisPowerSupplyType) EnumDescriptor() ([]byte, []int) {
	return file_schema_v1alpha1_chassis_proto_rawDescGZIP(), []int{4}
}

type ChassisPowerSupplyStatus int32

const (
	ChassisPowerSupplyStatus_CHASSIS_POWER_SUPPLY_STATUS_UNSPECIFIED ChassisPowerSupplyStatus = 0
	ChassisPowerSupplyStatus_CHASSIS_POWER_SUPPLY_STATUS_OK          ChassisPowerSupplyStatus = 1
	ChassisPowerSupplyStatus_CHASSIS_POWER_SUPPLY_STATUS_WARNING     ChassisPowerSupplyStatus = 2
	ChassisPowerSupplyStatus_CHASSIS_POWER_SUPPLY_STATUS_CRITICAL    ChassisPowerSupplyStatus = 3
	ChassisPowerSupplyStatus_CHASSIS_POWER_SUPPLY_STATUS_FAILED      ChassisPowerSupplyStatus = 4
	ChassisPowerSupplyStatus_CHASSIS_POWER_SUPPLY_STATUS_NOT_PRESENT ChassisPowerSupplyStatus = 5
	ChassisPowerSupplyStatus_CHASSIS_POWER_SUPPLY_STATUS_INPUT_LOST  ChassisPowerSupplyStatus = 6
)

// Enum value maps for ChassisPowerSupplyStatus.
var (
	ChassisPowerSupplyStatus_name = map[int32]string{
		0: "CHASSIS_POWER_SUPPLY_STATUS_UNSPECIFIED",
		1: "CHASSIS_POWER_SUPPLY_STATUS_OK",
		2: "CHASSIS_POWER_SUPPLY_STATUS_WARNING",
		3: "CHASSIS_POWER_SUPPLY_STATUS_CRITICAL",
		4: "CHASSIS_POWER_SUPPLY_STATUS_FAILED",
		5: "CHASSIS_POWER_SUPPLY_STATUS_NOT_PRESENT",
		6: "CHASSIS_POWER_SUPPLY_STATUS_INPUT_LOST",
	}
	ChassisPowerSupplyStatus_value = map[string]int32{
		"CHASSIS_POWER_SUPPLY_STATUS_UNSPECIFIED": 0,
		"CHASSIS_POWER_SUPPLY_STATUS_OK":          1,
		"CHASSIS_POWER_SUPPLY_STATUS_WARNING":     2,
		"CHASSIS_POWER_SUPPLY_STATUS_CRITICAL":    3,
		"CHASSIS_POWER_SUPPLY_STATUS_FAILED":      4,
		"CHASSIS_POWER_SUPPLY_STATUS_NOT_PRESENT": 5,
		"CHASSIS_POWER_SUPPLY_STATUS_INPUT_LOST":  6,
	}
)

func (x ChassisPowerSupplyStatus) Enum() *ChassisPowerSupplyStatus {
	p := new(ChassisPowerSupplyStatus)
	*p = x
	return p
}

func (x ChassisPowerSupplyStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ChassisPowerSupplyStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_schema_v1alpha1_chassis_proto_enumTypes[5].Descriptor()
}

func (ChassisPowerSupplyStatus) Type() protoreflect.EnumType {
	return &file_schema_v1alpha1_chassis_proto_enumTypes[5]
}

func (x ChassisPowerSupplyStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ChassisPowerSupplyStatus.Descriptor instead.
func (ChassisPowerSupplyStatus) EnumDescriptor() ([]byte, []int) {
	return file_schema_v1alpha1_chassis_proto_rawDescGZIP(), []int{5}
}

type ChassisLEDState int32

const (
	ChassisLEDState_CHASSIS_LED_STATE_UNSPECIFIED ChassisLEDState = 0
	ChassisLEDState_CHASSIS_LED_STATE_OFF         ChassisLEDState = 1
	ChassisLEDState_CHASSIS_LED_STATE_ON          ChassisLEDState = 2
	ChassisLEDState_CHASSIS_LED_STATE_BLINKING    ChassisLEDState = 3
	ChassisLEDState_CHASSIS_LED_STATE_UNKNOWN     ChassisLEDState = 4
)

// Enum value maps for ChassisLEDState.
var (
	ChassisLEDState_name = map[int32]string{
		0: "CHASSIS_LED_STATE_UNSPECIFIED",
		1: "CHASSIS_LED_STATE_OFF",
		2: "CHASSIS_LED_STATE_ON",
		3: "CHASSIS_LED_STATE_BLINKING",
		4: "CHASSIS_LED_STATE_UNKNOWN",
	}
	ChassisLEDState_value = map[string]int32{
		"CHASSIS_LED_STATE_UNSPECIFIED": 0,
		"CHASSIS_LED_STATE_OFF":         1,
		"CHASSIS_LED_STATE_ON":          2,
		"CHASSIS_LED_STATE_BLINKING":    3,
		"CHASSIS_LED_STATE_UNKNOWN":     4,
	}
)

func (x ChassisLEDState) Enum() *ChassisLEDState {
	p := new(ChassisLEDState)
	*p = x
	return p
}

func (x ChassisLEDState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ChassisLEDState) Descriptor() protoreflect.EnumDescriptor {
	return file_schema_v1alpha1_chassis_proto_enumTypes[6].Descriptor()
}

func (ChassisLEDState) Type() protoreflect.EnumType {
	return &file_schema_v1alpha1_chassis_proto_enumTypes[6]
}

func (x ChassisLEDState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ChassisLEDState.Descriptor instead.
func (ChassisLEDState) EnumDescriptor() ([]byte, []int) {
	return file_schema_v1alpha1_chassis_proto_rawDescGZIP(), []int{6}
}

type ChassisLEDType int32

const (
	ChassisLEDType_CHASSIS_LED_TYPE_UNSPECIFIED ChassisLEDType = 0
	ChassisLEDType_CHASSIS_LED_TYPE_POWER       ChassisLEDType = 1
	ChassisLEDType_CHASSIS_LED_TYPE_FAULT       ChassisLEDType = 2
	ChassisLEDType_CHASSIS_LED_TYPE_IDENTIFY    ChassisLEDType = 3
	ChassisLEDType_CHASSIS_LED_TYPE_STATUS      ChassisLEDType = 4
	ChassisLEDType_CHASSIS_LED_TYPE_HEARTBEAT   ChassisLEDType = 5
)

// Enum value maps for ChassisLEDType.
var (
	ChassisLEDType_name = map[int32]string{
		0: "CHASSIS_LED_TYPE_UNSPECIFIED",
		1: "CHASSIS_LED_TYPE_POWER",
		2: "CHASSIS_LED_TYPE_FAULT",
		3: "CHASSIS_LED_TYPE_IDENTIFY",
		4: "CHASSIS_LED_TYPE_STATUS",
		5: "CHASSIS_LED_TYPE_HEARTBEAT",
	}
	ChassisLEDType_value = map[string]int32{
		"CHASSIS_LED_TYPE_UNSPECIFIED": 0,
		"CHASSIS_LED_TYPE_POWER":       1,
		"CHASSIS_LED_TYPE_FAULT":       2,
		"CHASSIS_LED_TYPE_IDENTIFY":    3,
		"CHASSIS_LED_TYPE_STATUS":      4,
		"CHASSIS_LED_TYPE_HEARTBEAT":   5,
	}
)

func (x ChassisLEDType) Enum() *ChassisLEDType {
	p := new(ChassisLEDType)
	*p = x
	return p
}

func (x ChassisLEDType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ChassisLEDType) Descriptor() protoreflect.EnumDescriptor {
	return file_schema_v1alpha1_chassis_proto_enumTypes[7].Descriptor()
}

func (ChassisLEDType) Type() protoreflect.EnumType {
	return &file_schema_v1alpha1_chassis_proto_enumTypes[7]
}

func (x ChassisLEDType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ChassisLEDType.Descriptor instead.
func (ChassisLEDType) EnumDescriptor() ([]byte, []int) {
	return file_schema_v1alpha1_chassis_proto_rawDescGZIP(), []int{7}
}

type ChassisControlAction int32

const (
	ChassisControlAction_CHASSIS_CONTROL_ACTION_UNSPECIFIED        ChassisControlAction = 0
	ChassisControlAction_CHASSIS_CONTROL_ACTION_POWER_ON           ChassisControlAction = 1
	ChassisControlAction_CHASSIS_CONTROL_ACTION_POWER_OFF          ChassisControlAction = 2
	ChassisControlAction_CHASSIS_CONTROL_ACTION_POWER_CYCLE        ChassisControlAction = 3
	ChassisControlAction_CHASSIS_CONTROL_ACTION_RESET              ChassisControlAction = 4
	ChassisControlAction_CHASSIS_CONTROL_ACTION_IDENTIFY_ON        ChassisControlAction = 5
	ChassisControlAction_CHASSIS_CONTROL_ACTION_IDENTIFY_OFF       ChassisControlAction = 6
	ChassisControlAction_CHASSIS_CONTROL_ACTION_EMERGENCY_SHUTDOWN ChassisControlAction = 7
)

// Enum value maps for ChassisControlAction.
var (
	ChassisControlAction_name = map[int32]string{
		0: "CHASSIS_CONTROL_ACTION_UNSPECIFIED",
		1: "CHASSIS_CONTROL_ACTION_POWER_ON",
		2: "CHASSIS_CONTROL_ACTION_POWER_OFF",
		3: "CHASSIS_CONTROL_ACTION_POWER_CYCLE",
		4: "CHASSIS_CONTROL_ACTION_RESET",
		5: "CHASSIS_CONTROL_ACTION_IDENTIFY_ON",
		6: "CHASSIS_CONTROL_ACTION_IDENTIFY_OFF",
		7: "CHASSIS_CONTROL_ACTION_EMERGENCY_SHUTDOWN",
	}
	ChassisControlAction_value = map[string]int32{
		"CHASSIS_CONTROL_ACTION_UNSPECIFIED":        0,
		"CHASSIS_CONTROL_ACTION_POWER_ON":           1,
		"CHASSIS_CONTROL_ACTION_POWER_OFF":          2,
		"CHASSIS_CONTROL_ACTION_POWER_CYCLE":        3,
		"CHASSIS_CONTROL_ACTION_RESET":              4,
		"CHASSIS_CONTROL_ACTION_IDENTIFY_ON":        5,
		"CHASSIS_CONTROL_ACTION_IDENTIFY_OFF":       6,
		"CHASSIS_CONTROL_ACTION_EMERGENCY_SHUTDOWN": 7,
	}
)

func (x ChassisControlAction) Enum() *ChassisControlAction {
	p := new(ChassisControlAction)
	*p = x
	return p
}

func (x ChassisControlAction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ChassisControlAction) Descriptor() protoreflect.EnumDescriptor {
	return file_schema_v1alpha1_chassis_proto_enumTypes[8].Descriptor()
}

func (ChassisControlAction) Type() protoreflect.EnumType {
	return &file_schema_v1alpha1_chassis_proto_enumTypes[8]
}

func (x ChassisControlAction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ChassisControlAction.Descriptor instead.
func (ChassisControlAction) EnumDescriptor() ([]byte, []int) {
	return file_schema_v1alpha1_chassis_proto_rawDescGZIP(), []int{8}
}

type Chassis struct {
	state                   protoimpl.MessageState `protogen:"open.v1"`
	Name                    string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Asset                   *AssetInfo             `protobuf:"bytes,2,opt,name=asset,proto3" json:"asset,omitempty"`
	Description             *string                `protobuf:"bytes,3,opt,name=description,proto3,oneof" json:"description,omitempty"`
	Type                    *ChassisType           `protobuf:"varint,4,opt,name=type,proto3,enum=schema.v1alpha1.ChassisType,oneof" json:"type,omitempty"`
	FormFactor              *ChassisFormFactor     `protobuf:"varint,5,opt,name=form_factor,json=formFactor,proto3,enum=schema.v1alpha1.ChassisFormFactor,oneof" json:"form_factor,omitempty"`
	Status                  *ChassisStatus         `protobuf:"varint,6,opt,name=status,proto3,enum=schema.v1alpha1.ChassisStatus,oneof" json:"status,omitempty"`
	RequestedTransition     *ChassisTransition     `protobuf:"varint,7,opt,name=requested_transition,json=requestedTransition,proto3,enum=schema.v1alpha1.ChassisTransition,oneof" json:"requested_transition,omitempty"`
	Location                *Location              `protobuf:"bytes,8,opt,name=location,proto3,oneof" json:"location,omitempty"`
	Dimensions              *PhysicalDimensions    `protobuf:"bytes,9,opt,name=dimensions,proto3,oneof" json:"dimensions,omitempty"`
	PowerInfo               *ChassisPowerInfo      `protobuf:"bytes,10,opt,name=power_info,json=powerInfo,proto3,oneof" json:"power_info,omitempty"`
	Sensors                 []*Sensor              `protobuf:"bytes,11,rep,name=sensors,proto3" json:"sensors,omitempty"`
	ThermalZones            []*ThermalZone         `protobuf:"bytes,12,rep,name=thermal_zones,json=thermalZones,proto3" json:"thermal_zones,omitempty"`
	CoolingDevices          []*CoolingDevice       `protobuf:"bytes,13,rep,name=cooling_devices,json=coolingDevices,proto3" json:"cooling_devices,omitempty"`
	HostNames               []string               `protobuf:"bytes,14,rep,name=host_names,json=hostNames,proto3" json:"host_names,omitempty"`
	ManagementControllerIds []string               `protobuf:"bytes,15,rep,name=management_controller_ids,json=managementControllerIds,proto3" json:"management_controller_ids,omitempty"`
	Leds                    []*ChassisLED          `protobuf:"bytes,16,rep,name=leds,proto3" json:"leds,omitempty"`
	Intrusion               *ChassisIntrusion      `protobuf:"bytes,17,opt,name=intrusion,proto3,oneof" json:"intrusion,omitempty"`
	ContainedAssets         []*AssetInfo           `protobuf:"bytes,18,rep,name=contained_assets,json=containedAssets,proto3" json:"contained_assets,omitempty"`
	UpdatedAt               *timestamppb.Timestamp `protobuf:"bytes,19,opt,name=updated_at,json=updatedAt,proto3,oneof" json:"updated_at,omitempty"`
	Metadata                map[string]string      `protobuf:"bytes,20,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields           protoimpl.UnknownFields
	sizeCache               protoimpl.SizeCache
}

func (x *Chassis) Reset() {
	*x = Chassis{}
	mi := &file_schema_v1alpha1_chassis_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Chassis) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Chassis) ProtoMessage() {}

func (x *Chassis) ProtoReflect() protoreflect.Message {
	mi := &file_schema_v1alpha1_chassis_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Chassis.ProtoReflect.Descriptor instead.
func (*Chassis) Descriptor() ([]byte, []int) {
	return file_schema_v1alpha1_chassis_proto_rawDescGZIP(), []int{0}
}

func (x *Chassis) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Chassis) GetAsset() *AssetInfo {
	if x != nil {
		return x.Asset
	}
	return nil
}

func (x *Chassis) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *Chassis) GetType() ChassisType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return ChassisType_CHASSIS_TYPE_UNSPECIFIED
}

func (x *Chassis) GetFormFactor() ChassisFormFactor {
	if x != nil && x.FormFactor != nil {
		return *x.FormFactor
	}
	return ChassisFormFactor_CHASSIS_FORM_FACTOR_UNSPECIFIED
}

func (x *Chassis) GetStatus() ChassisStatus {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return ChassisStatus_CHASSIS_STATUS_UNSPECIFIED
}

func (x *Chassis) GetRequestedTransition() ChassisTransition {
	if x != nil && x.RequestedTransition != nil {
		return *x.RequestedTransition
	}
	return ChassisTransition_CHASSIS_TRANSITION_UNSPECIFIED
}

func (x *Chassis) GetLocation() *Location {
	if x != nil {
		return x.Location
	}
	return nil
}

func (x *Chassis) GetDimensions() *PhysicalDimensions {
	if x != nil {
		return x.Dimensions
	}
	return nil
}

func (x *Chassis) GetPowerInfo() *ChassisPowerInfo {
	if x != nil {
		return x.PowerInfo
	}
	return nil
}

func (x *Chassis) GetSensors() []*Sensor {
	if x != nil {
		return x.Sensors
	}
	return nil
}

func (x *Chassis) GetThermalZones() []*ThermalZone {
	if x != nil {
		return x.ThermalZones
	}
	return nil
}

func (x *Chassis) GetCoolingDevices() []*CoolingDevice {
	if x != nil {
		return x.CoolingDevices
	}
	return nil
}

func (x *Chassis) GetHostNames() []string {
	if x != nil {
		return x.HostNames
	}
	return nil
}

func (x *Chassis) GetManagementControllerIds() []string {
	if x != nil {
		return x.ManagementControllerIds
	}
	return nil
}

func (x *Chassis) GetLeds() []*ChassisLED {
	if x != nil {
		return x.Leds
	}
	return nil
}

func (x *Chassis) GetIntrusion() *ChassisIntrusion {
	if x != nil {
		return x.Intrusion
	}
	return nil
}

func (x *Chassis) GetContainedAssets() []*AssetInfo {
	if x != nil {
		return x.ContainedAssets
	}
	return nil
}

func (x *Chassis) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *Chassis) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

type ChassisPowerInfo struct {
	state              protoimpl.MessageState      `protogen:"open.v1"`
	PowerCapacityWatts *uint32                     `protobuf:"varint,1,opt,name=power_capacity_watts,json=powerCapacityWatts,proto3,oneof" json:"power_capacity_watts,omitempty"`
	PowerConsumedWatts *uint32                     `protobuf:"varint,2,opt,name=power_consumed_watts,json=powerConsumedWatts,proto3,oneof" json:"power_consumed_watts,omitempty"`
	PowerSupplies      []*ChassisPowerSupply       `protobuf:"bytes,3,rep,name=power_supplies,json=powerSupplies,proto3" json:"power_supplies,omitempty"`
	PowerDistribution  []*ChassisPowerDistribution `protobuf:"bytes,4,rep,name=power_distribution,json=powerDistribution,proto3" json:"power_distribution,omitempty"`
	Redundancy         *ChassisPowerRedundancy     `protobuf:"bytes,5,opt,name=redundancy,proto3,oneof" json:"redundancy,omitempty"`
	PowerBudgets       []*ChassisPowerBudget       `protobuf:"bytes,6,rep,name=power_budgets,json=powerBudgets,proto3" json:"power_budgets,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *ChassisPowerInfo) Reset() {
	*x = ChassisPowerInfo{}
	mi := &file_schema_v1alpha1_chassis_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChassisPowerInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChassisPowerInfo) ProtoMessage() {}

func (x *ChassisPowerInfo) ProtoReflect() protoreflect.Message {
	mi := &file_schema_v1alpha1_chassis_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChassisPowerInfo.ProtoReflect.Descriptor instead.
func (*ChassisPowerInfo) Descriptor() ([]byte, []int) {
	return file_schema_v1alpha1_chassis_proto_rawDescGZIP(), []int{1}
}

func (x *ChassisPowerInfo) GetPowerCapacityWatts() uint32 {
	if x != nil && x.PowerCapacityWatts != nil {
		return *x.PowerCapacityWatts
	}
	return 0
}

func (x *ChassisPowerInfo) GetPowerConsumedWatts() uint32 {
	if x != nil && x.PowerConsumedWatts != nil {
		return *x.PowerConsumedWatts
	}
	return 0
}

func (x *ChassisPowerInfo) GetPowerSupplies() []*ChassisPowerSupply {
	if x != nil {
		return x.PowerSupplies
	}
	return nil
}

func (x *ChassisPowerInfo) GetPowerDistribution() []*ChassisPowerDistribution {
	if x != nil {
		return x.PowerDistribution
	}
	return nil
}

func (x *ChassisPowerInfo) GetRedundancy() *ChassisPowerRedundancy {
	if x != nil {
		return x.Redundancy
	}
	return nil
}

func (x *ChassisPowerInfo) GetPowerBudgets() []*ChassisPowerBudget {
	if x != nil {
		return x.PowerBudgets
	}
	return nil
}

type ChassisPowerSupply struct {
	state              protoimpl.MessageState    `protogen:"open.v1"`
	Name               string                    `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Asset              *AssetInfo                `protobuf:"bytes,2,opt,name=asset,proto3" json:"asset,omitempty"`
	Type               *ChassisPowerSupplyType   `protobuf:"varint,3,opt,name=type,proto3,enum=schema.v1alpha1.ChassisPowerSupplyType,oneof" json:"type,omitempty"`
	Status             *ChassisPowerSupplyStatus `protobuf:"varint,4,opt,name=status,proto3,enum=schema.v1alpha1.ChassisPowerSupplyStatus,oneof" json:"status,omitempty"`
	CapacityWatts      *uint32                   `protobuf:"varint,5,opt,name=capacity_watts,json=capacityWatts,proto3,oneof" json:"capacity_watts,omitempty"`
	OutputWatts        *uint32                   `protobuf:"varint,6,opt,name=output_watts,json=outputWatts,proto3,oneof" json:"output_watts,omitempty"`
	EfficiencyRating   *string                   `protobuf:"bytes,7,opt,name=efficiency_rating,json=efficiencyRating,proto3,oneof" json:"efficiency_rating,omitempty"`
	InputVoltage       *float64                  `protobuf:"fixed64,8,opt,name=input_voltage,json=inputVoltage,proto3,oneof" json:"input_voltage,omitempty"`
	OutputVoltage      *float64                  `protobuf:"fixed64,9,opt,name=output_voltage,json=outputVoltage,proto3,oneof" json:"output_voltage,omitempty"`
	InputCurrent       *float64                  `protobuf:"fixed64,10,opt,name=input_current,json=inputCurrent,proto3,oneof" json:"input_current,omitempty"`
	OutputCurrent      *float64                  `protobuf:"fixed64,11,opt,name=output_current,json=outputCurrent,proto3,oneof" json:"output_current,omitempty"`
	TemperatureCelsius *float64                  `protobuf:"fixed64,12,opt,name=temperature_celsius,json=temperatureCelsius,proto3,oneof" json:"temperature_celsius,omitempty"`
	FanSpeedRpm        *uint32                   `protobuf:"varint,13,opt,name=fan_speed_rpm,json=fanSpeedRpm,proto3,oneof" json:"fan_speed_rpm,omitempty"`
	HotSwappable       *bool                     `protobuf:"varint,14,opt,name=hot_swappable,json=hotSwappable,proto3,oneof" json:"hot_swappable,omitempty"`
	Redundant          *bool                     `protobuf:"varint,15,opt,name=redundant,proto3,oneof" json:"redundant,omitempty"`
	Location           *Location                 `protobuf:"bytes,16,opt,name=location,proto3,oneof" json:"location,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *ChassisPowerSupply) Reset() {
	*x = ChassisPowerSupply{}
	mi := &file_schema_v1alpha1_chassis_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChassisPowerSupply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChassisPowerSupply) ProtoMessage() {}

func (x *ChassisPowerSupply) ProtoReflect() protoreflect.Message {
	mi := &file_schema_v1alpha1_chassis_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChassisPowerSupply.ProtoReflect.Descriptor instead.
func (*ChassisPowerSupply) Descriptor() ([]byte, []int) {
	return file_schema_v1alpha1_chassis_proto_rawDescGZIP(), []int{2}
}

func (x *ChassisPowerSupply) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ChassisPowerSupply) GetAsset() *AssetInfo {
	if x != nil {
		return x.Asset
	}
	return nil
}

func (x *ChassisPowerSupply) GetType() ChassisPowerSupplyType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return ChassisPowerSupplyType_CHASSIS_POWER_SUPPLY_TYPE_UNSPECIFIED
}

func (x *ChassisPowerSupply) GetStatus() ChassisPowerSupplyStatus {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return ChassisPowerSupplyStatus_CHASSIS_POWER_SUPPLY_STATUS_UNSPECIFIED
}

func (x *ChassisPowerSupply) GetCapacityWatts() uint32 {
	if x != nil && x.CapacityWatts != nil {
		return *x.CapacityWatts
	}
	return 0
}

func (x *ChassisPowerSupply) GetOutputWatts() uint32 {
	if x != nil && x.OutputWatts != nil {
		return *x.OutputWatts
	}
	return 0
}

func (x *ChassisPowerSupply) GetEfficiencyRating() string {
	if x != nil && x.EfficiencyRating != nil {
		return *x.EfficiencyRating
	}
	return ""
}

func (x *ChassisPowerSupply) GetInputVoltage() float64 {
	if x != nil && x.InputVoltage != nil {
		return *x.InputVoltage
	}
	return 0
}

func (x *ChassisPowerSupply) GetOutputVoltage() float64 {
	if x != nil && x.OutputVoltage != nil {
		return *x.OutputVoltage
	}
	return 0
}

func (x *ChassisPowerSupply) GetInputCurrent() float64 {
	if x != nil && x.InputCurrent != nil {
		return *x.InputCurrent
	}
	return 0
}

func (x *ChassisPowerSupply) GetOutputCurrent() float64 {
	if x != nil && x.OutputCurrent != nil {
		return *x.OutputCurrent
	}
	return 0
}

func (x *ChassisPowerSupply) GetTemperatureCelsius() float64 {
	if x != nil && x.TemperatureCelsius != nil {
		return *x.TemperatureCelsius
	}
	return 0
}

func (x *ChassisPowerSupply) GetFanSpeedRpm() uint32 {
	if x != nil && x.FanSpeedRpm != nil {
		return *x.FanSpeedRpm
	}
	return 0
}

func (x *ChassisPowerSupply) GetHotSwappable() bool {
	if x != nil && x.HotSwappable != nil {
		return *x.HotSwappable
	}
	return false
}

func (x *ChassisPowerSupply) GetRedundant() bool {
	if x != nil && x.Redundant != nil {
		return *x.Redundant
	}
	return false
}

func (x *ChassisPowerSupply) GetLocation() *Location {
	if x != nil {
		return x.Location
	}
	return nil
}

type ChassisPowerDistribution struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	CapacityWatts *uint32                `protobuf:"varint,2,opt,name=capacity_watts,json=capacityWatts,proto3,oneof" json:"capacity_watts,omitempty"`
	LoadWatts     *uint32                `protobuf:"varint,3,opt,name=load_watts,json=loadWatts,proto3,oneof" json:"load_watts,omitempty"`
	Circuits      []*PowerCircuit        `protobuf:"bytes,4,rep,name=circuits,proto3" json:"circuits,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ChassisPowerDistribution) Reset() {
	*x = ChassisPowerDistribution{}
	mi := &file_schema_v1alpha1_chassis_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChassisPowerDistribution) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChassisPowerDistribution) ProtoMessage() {}

func (x *ChassisPowerDistribution) ProtoReflect() protoreflect.Message {
	mi := &file_schema_v1alpha1_chassis_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChassisPowerDistribution.ProtoReflect.Descriptor instead.
func (*ChassisPowerDistribution) Descriptor() ([]byte, []int) {
	return file_schema_v1alpha1_chassis_proto_rawDescGZIP(), []int{3}
}

func (x *ChassisPowerDistribution) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ChassisPowerDistribution) GetCapacityWatts() uint32 {
	if x != nil && x.CapacityWatts != nil {
		return *x.CapacityWatts
	}
	return 0
}

func (x *ChassisPowerDistribution) GetLoadWatts() uint32 {
	if x != nil && x.LoadWatts != nil {
		return *x.LoadWatts
	}
	return 0
}

func (x *ChassisPowerDistribution) GetCircuits() []*PowerCircuit {
	if x != nil {
		return x.Circuits
	}
	return nil
}

type PowerCircuit struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	Name              string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Voltage           *float64               `protobuf:"fixed64,2,opt,name=voltage,proto3,oneof" json:"voltage,omitempty"`
	CurrentAmps       *float64               `protobuf:"fixed64,3,opt,name=current_amps,json=currentAmps,proto3,oneof" json:"current_amps,omitempty"`
	PowerWatts        *float64               `protobuf:"fixed64,4,opt,name=power_watts,json=powerWatts,proto3,oneof" json:"power_watts,omitempty"`
	BreakerRatingAmps *float64               `protobuf:"fixed64,5,opt,name=breaker_rating_amps,json=breakerRatingAmps,proto3,oneof" json:"breaker_rating_amps,omitempty"`
	ConnectedLoads    []string               `protobuf:"bytes,6,rep,name=connected_loads,json=connectedLoads,proto3" json:"connected_loads,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *PowerCircuit) Reset() {
	*x = PowerCircuit{}
	mi := &file_schema_v1alpha1_chassis_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PowerCircuit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PowerCircuit) ProtoMessage() {}

func (x *PowerCircuit) ProtoReflect() protoreflect.Message {
	mi := &file_schema_v1alpha1_chassis_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PowerCircuit.ProtoReflect.Descriptor instead.
func (*PowerCircuit) Descriptor() ([]byte, []int) {
	return file_schema_v1alpha1_chassis_proto_rawDescGZIP(), []int{4}
}

func (x *PowerCircuit) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PowerCircuit) GetVoltage() float64 {
	if x != nil && x.Voltage != nil {
		return *x.Voltage
	}
	return 0
}

func (x *PowerCircuit) GetCurrentAmps() float64 {
	if x != nil && x.CurrentAmps != nil {
		return *x.CurrentAmps
	}
	return 0
}

func (x *PowerCircuit) GetPowerWatts() float64 {
	if x != nil && x.PowerWatts != nil {
		return *x.PowerWatts
	}
	return 0
}

func (x *PowerCircuit) GetBreakerRatingAmps() float64 {
	if x != nil && x.BreakerRatingAmps != nil {
		return *x.BreakerRatingAmps
	}
	return 0
}

func (x *PowerCircuit) GetConnectedLoads() []string {
	if x != nil {
		return x.ConnectedLoads
	}
	return nil
}

type ChassisPowerRedundancy struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	Enabled           bool                   `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	Mode              *string                `protobuf:"bytes,2,opt,name=mode,proto3,oneof" json:"mode,omitempty"`
	RequiredSupplies  *uint32                `protobuf:"varint,3,opt,name=required_supplies,json=requiredSupplies,proto3,oneof" json:"required_supplies,omitempty"`
	AvailableSupplies *uint32                `protobuf:"varint,4,opt,name=available_supplies,json=availableSupplies,proto3,oneof" json:"available_supplies,omitempty"`
	Status            *string                `protobuf:"bytes,5,opt,name=status,proto3,oneof" json:"status,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *ChassisPowerRedundancy) Reset() {
	*x = ChassisPowerRedundancy{}
	mi := &file_schema_v1alpha1_chassis_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChassisPowerRedundancy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChassisPowerRedundancy) ProtoMessage() {}

func (x *ChassisPowerRedundancy) ProtoReflect() protoreflect.Message {
	mi := &file_schema_v1alpha1_chassis_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChassisPowerRedundancy.ProtoReflect.Descriptor instead.
func (*ChassisPowerRedundancy) Descriptor() ([]byte, []int) {
	return file_schema_v1alpha1_chassis_proto_rawDescGZIP(), []int{5}
}

func (x *ChassisPowerRedundancy) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *ChassisPowerRedundancy) GetMode() string {
	if x != nil && x.Mode != nil {
		return *x.Mode
	}
	return ""
}

func (x *ChassisPowerRedundancy) GetRequiredSupplies() uint32 {
	if x != nil && x.RequiredSupplies != nil {
		return *x.RequiredSupplies
	}
	return 0
}

func (x *ChassisPowerRedundancy) GetAvailableSupplies() uint32 {
	if x != nil && x.AvailableSupplies != nil {
		return *x.AvailableSupplies
	}
	return 0
}

func (x *ChassisPowerRedundancy) GetStatus() string {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return ""
}

type ChassisPowerBudget struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	AllocatedTo    string                 `protobuf:"bytes,1,opt,name=allocated_to,json=allocatedTo,proto3" json:"allocated_to,omitempty"`
	AllocatedWatts *uint32                `protobuf:"varint,2,opt,name=allocated_watts,json=allocatedWatts,proto3,oneof" json:"allocated_watts,omitempty"`
	UsedWatts      *uint32                `protobuf:"varint,3,opt,name=used_watts,json=usedWatts,proto3,oneof" json:"used_watts,omitempty"`
	MaxWatts       *uint32                `protobuf:"varint,4,opt,name=max_watts,json=maxWatts,proto3,oneof" json:"max_watts,omitempty"`
	Priority       *uint32                `protobuf:"varint,5,opt,name=priority,proto3,oneof" json:"priority,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *ChassisPowerBudget) Reset() {
	*x = ChassisPowerBudget{}
	mi := &file_schema_v1alpha1_chassis_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChassisPowerBudget) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChassisPowerBudget) ProtoMessage() {}

func (x *ChassisPowerBudget) ProtoReflect() protoreflect.Message {
	mi := &file_schema_v1alpha1_chassis_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChassisPowerBudget.ProtoReflect.Descriptor instead.
func (*ChassisPowerBudget) Descriptor() ([]byte, []int) {
	return file_schema_v1alpha1_chassis_proto_rawDescGZIP(), []int{6}
}

func (x *ChassisPowerBudget) GetAllocatedTo() string {
	if x != nil {
		return x.AllocatedTo
	}
	return ""
}

func (x *ChassisPowerBudget) GetAllocatedWatts() uint32 {
	if x != nil && x.AllocatedWatts != nil {
		return *x.AllocatedWatts
	}
	return 0
}

func (x *ChassisPowerBudget) GetUsedWatts() uint32 {
	if x != nil && x.UsedWatts != nil {
		return *x.UsedWatts
	}
	return 0
}

func (x *ChassisPowerBudget) GetMaxWatts() uint32 {
	if x != nil && x.MaxWatts != nil {
		return *x.MaxWatts
	}
	return 0
}

func (x *ChassisPowerBudget) GetPriority() uint32 {
	if x != nil && x.Priority != nil {
		return *x.Priority
	}
	return 0
}

type ChassisLED struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Type          *ChassisLEDType        `protobuf:"varint,2,opt,name=type,proto3,enum=schema.v1alpha1.ChassisLEDType,oneof" json:"type,omitempty"`
	State         *ChassisLEDState       `protobuf:"varint,3,opt,name=state,proto3,enum=schema.v1alpha1.ChassisLEDState,oneof" json:"state,omitempty"`
	Color         *string                `protobuf:"bytes,4,opt,name=color,proto3,oneof" json:"color,omitempty"`
	BlinkPattern  *string                `protobuf:"bytes,5,opt,name=blink_pattern,json=blinkPattern,proto3,oneof" json:"blink_pattern,omitempty"`
	Controllable  *bool                  `protobuf:"varint,6,opt,name=controllable,proto3,oneof" json:"controllable,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ChassisLED) Reset() {
	*x = ChassisLED{}
	mi := &file_schema_v1alpha1_chassis_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChassisLED) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChassisLED) ProtoMessage() {}

func (x *ChassisLED) ProtoReflect() protoreflect.Message {
	mi := &file_schema_v1alpha1_chassis_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChassisLED.ProtoReflect.Descriptor instead.
func (*ChassisLED) Descriptor() ([]byte, []int) {
	return file_schema_v1alpha1_chassis_proto_rawDescGZIP(), []int{7}
}

func (x *ChassisLED) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ChassisLED) GetType() ChassisLEDType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return ChassisLEDType_CHASSIS_LED_TYPE_UNSPECIFIED
}

func (x *ChassisLED) GetState() ChassisLEDState {
	if x != nil && x.State != nil {
		return *x.State
	}
	return ChassisLEDState_CHASSIS_LED_STATE_UNSPECIFIED
}

func (x *ChassisLED) GetColor() string {
	if x != nil && x.Color != nil {
		return *x.Color
	}
	return ""
}

func (x *ChassisLED) GetBlinkPattern() string {
	if x != nil && x.BlinkPattern != nil {
		return *x.BlinkPattern
	}
	return ""
}

func (x *ChassisLED) GetControllable() bool {
	if x != nil && x.Controllable != nil {
		return *x.Controllable
	}
	return false
}

type ChassisIntrusion struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	Enabled           bool                   `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	IntrusionDetected bool                   `protobuf:"varint,2,opt,name=intrusion_detected,json=intrusionDetected,proto3" json:"intrusion_detected,omitempty"`
	LastIntrusion     *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=last_intrusion,json=lastIntrusion,proto3,oneof" json:"last_intrusion,omitempty"`
	IntrusionCount    *uint32                `protobuf:"varint,4,opt,name=intrusion_count,json=intrusionCount,proto3,oneof" json:"intrusion_count,omitempty"`
	ResetCount        *bool                  `protobuf:"varint,5,opt,name=reset_count,json=resetCount,proto3,oneof" json:"reset_count,omitempty"`
	SensorStatus      *string                `protobuf:"bytes,6,opt,name=sensor_status,json=sensorStatus,proto3,oneof" json:"sensor_status,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *ChassisIntrusion) Reset() {
	*x = ChassisIntrusion{}
	mi := &file_schema_v1alpha1_chassis_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChassisIntrusion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChassisIntrusion) ProtoMessage() {}

func (x *ChassisIntrusion) ProtoReflect() protoreflect.Message {
	mi := &file_schema_v1alpha1_chassis_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChassisIntrusion.ProtoReflect.Descriptor instead.
func (*ChassisIntrusion) Descriptor() ([]byte, []int) {
	return file_schema_v1alpha1_chassis_proto_rawDescGZIP(), []int{8}
}

func (x *ChassisIntrusion) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *ChassisIntrusion) GetIntrusionDetected() bool {
	if x != nil {
		return x.IntrusionDetected
	}
	return false
}

func (x *ChassisIntrusion) GetLastIntrusion() *timestamppb.Timestamp {
	if x != nil {
		return x.LastIntrusion
	}
	return nil
}

func (x *ChassisIntrusion) GetIntrusionCount() uint32 {
	if x != nil && x.IntrusionCount != nil {
		return *x.IntrusionCount
	}
	return 0
}

func (x *ChassisIntrusion) GetResetCount() bool {
	if x != nil && x.ResetCount != nil {
		return *x.ResetCount
	}
	return false
}

func (x *ChassisIntrusion) GetSensorStatus() string {
	if x != nil && x.SensorStatus != nil {
		return *x.SensorStatus
	}
	return ""
}

type ExpansionBay struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	Name               string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	BayType            *string                `protobuf:"bytes,2,opt,name=bay_type,json=bayType,proto3,oneof" json:"bay_type,omitempty"`
	Occupied           *bool                  `protobuf:"varint,3,opt,name=occupied,proto3,oneof" json:"occupied,omitempty"`
	InstalledComponent *string                `protobuf:"bytes,4,opt,name=installed_component,json=installedComponent,proto3,oneof" json:"installed_component,omitempty"`
	Location           *Location              `protobuf:"bytes,5,opt,name=location,proto3,oneof" json:"location,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *ExpansionBay) Reset() {
	*x = ExpansionBay{}
	mi := &file_schema_v1alpha1_chassis_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExpansionBay) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExpansionBay) ProtoMessage() {}

func (x *ExpansionBay) ProtoReflect() protoreflect.Message {
	mi := &file_schema_v1alpha1_chassis_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExpansionBay.ProtoReflect.Descriptor instead.
func (*ExpansionBay) Descriptor() ([]byte, []int) {
	return file_schema_v1alpha1_chassis_proto_rawDescGZIP(), []int{9}
}

func (x *ExpansionBay) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ExpansionBay) GetBayType() string {
	if x != nil && x.BayType != nil {
		return *x.BayType
	}
	return ""
}

func (x *ExpansionBay) GetOccupied() bool {
	if x != nil && x.Occupied != nil {
		return *x.Occupied
	}
	return false
}

func (x *ExpansionBay) GetInstalledComponent() string {
	if x != nil && x.InstalledComponent != nil {
		return *x.InstalledComponent
	}
	return ""
}

func (x *ExpansionBay) GetLocation() *Location {
	if x != nil {
		return x.Location
	}
	return nil
}

type Slot struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	Name               string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	SlotType           *string                `protobuf:"bytes,2,opt,name=slot_type,json=slotType,proto3,oneof" json:"slot_type,omitempty"`
	Occupied           *bool                  `protobuf:"varint,3,opt,name=occupied,proto3,oneof" json:"occupied,omitempty"`
	InstalledComponent *string                `protobuf:"bytes,4,opt,name=installed_component,json=installedComponent,proto3,oneof" json:"installed_component,omitempty"`
	Location           *Location              `protobuf:"bytes,5,opt,name=location,proto3,oneof" json:"location,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *Slot) Reset() {
	*x = Slot{}
	mi := &file_schema_v1alpha1_chassis_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Slot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Slot) ProtoMessage() {}

func (x *Slot) ProtoReflect() protoreflect.Message {
	mi := &file_schema_v1alpha1_chassis_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Slot.ProtoReflect.Descriptor instead.
func (*Slot) Descriptor() ([]byte, []int) {
	return file_schema_v1alpha1_chassis_proto_rawDescGZIP(), []int{10}
}

func (x *Slot) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Slot) GetSlotType() string {
	if x != nil && x.SlotType != nil {
		return *x.SlotType
	}
	return ""
}

func (x *Slot) GetOccupied() bool {
	if x != nil && x.Occupied != nil {
		return *x.Occupied
	}
	return false
}

func (x *Slot) GetInstalledComponent() string {
	if x != nil && x.InstalledComponent != nil {
		return *x.InstalledComponent
	}
	return ""
}

func (x *Slot) GetLocation() *Location {
	if x != nil {
		return x.Location
	}
	return nil
}

type GetChassisRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Identifier:
	//
	//	*GetChassisRequest_Name
	//	*GetChassisRequest_Type
	//	*GetChassisRequest_Status
	//	*GetChassisRequest_Location
	Identifier    isGetChassisRequest_Identifier `protobuf_oneof:"identifier"`
	FieldMask     *fieldmaskpb.FieldMask         `protobuf:"bytes,5,opt,name=field_mask,json=fieldMask,proto3,oneof" json:"field_mask,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetChassisRequest) Reset() {
	*x = GetChassisRequest{}
	mi := &file_schema_v1alpha1_chassis_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetChassisRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetChassisRequest) ProtoMessage() {}

func (x *GetChassisRequest) ProtoReflect() protoreflect.Message {
	mi := &file_schema_v1alpha1_chassis_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetChassisRequest.ProtoReflect.Descriptor instead.
func (*GetChassisRequest) Descriptor() ([]byte, []int) {
	return file_schema_v1alpha1_chassis_proto_rawDescGZIP(), []int{11}
}

func (x *GetChassisRequest) GetIdentifier() isGetChassisRequest_Identifier {
	if x != nil {
		return x.Identifier
	}
	return nil
}

func (x *GetChassisRequest) GetName() string {
	if x != nil {
		if x, ok := x.Identifier.(*GetChassisRequest_Name); ok {
			return x.Name
		}
	}
	return ""
}

func (x *GetChassisRequest) GetType() ChassisType {
	if x != nil {
		if x, ok := x.Identifier.(*GetChassisRequest_Type); ok {
			return x.Type
		}
	}
	return ChassisType_CHASSIS_TYPE_UNSPECIFIED
}

func (x *GetChassisRequest) GetStatus() ChassisStatus {
	if x != nil {
		if x, ok := x.Identifier.(*GetChassisRequest_Status); ok {
			return x.Status
		}
	}
	return ChassisStatus_CHASSIS_STATUS_UNSPECIFIED
}

func (x *GetChassisRequest) GetLocation() *Location {
	if x != nil {
		if x, ok := x.Identifier.(*GetChassisRequest_Location); ok {
			return x.Location
		}
	}
	return nil
}

func (x *GetChassisRequest) GetFieldMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.FieldMask
	}
	return nil
}

type isGetChassisRequest_Identifier interface {
	isGetChassisRequest_Identifier()
}

type GetChassisRequest_Name struct {
	Name string `protobuf:"bytes,1,opt,name=name,proto3,oneof"`
}

type GetChassisRequest_Type struct {
	Type ChassisType `protobuf:"varint,2,opt,name=type,proto3,enum=schema.v1alpha1.ChassisType,oneof"`
}

type GetChassisRequest_Status struct {
	Status ChassisStatus `protobuf:"varint,3,opt,name=status,proto3,enum=schema.v1alpha1.ChassisStatus,oneof"`
}

type GetChassisRequest_Location struct {
	Location *Location `protobuf:"bytes,4,opt,name=location,proto3,oneof"`
}

func (*GetChassisRequest_Name) isGetChassisRequest_Identifier() {}

func (*GetChassisRequest_Type) isGetChassisRequest_Identifier() {}

func (*GetChassisRequest_Status) isGetChassisRequest_Identifier() {}

func (*GetChassisRequest_Location) isGetChassisRequest_Identifier() {}

type GetChassisResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Chassis       []*Chassis             `protobuf:"bytes,1,rep,name=chassis,proto3" json:"chassis,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetChassisResponse) Reset() {
	*x = GetChassisResponse{}
	mi := &file_schema_v1alpha1_chassis_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetChassisResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetChassisResponse) ProtoMessage() {}

func (x *GetChassisResponse) ProtoReflect() protoreflect.Message {
	mi := &file_schema_v1alpha1_chassis_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetChassisResponse.ProtoReflect.Descriptor instead.
func (*GetChassisResponse) Descriptor() ([]byte, []int) {
	return file_schema_v1alpha1_chassis_proto_rawDescGZIP(), []int{12}
}

func (x *GetChassisResponse) GetChassis() []*Chassis {
	if x != nil {
		return x.Chassis
	}
	return nil
}

type ListChassisRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Type          *ChassisType           `protobuf:"varint,1,opt,name=type,proto3,enum=schema.v1alpha1.ChassisType,oneof" json:"type,omitempty"`
	Status        *ChassisStatus         `protobuf:"varint,2,opt,name=status,proto3,enum=schema.v1alpha1.ChassisStatus,oneof" json:"status,omitempty"`
	FieldMask     *fieldmaskpb.FieldMask `protobuf:"bytes,3,opt,name=field_mask,json=fieldMask,proto3,oneof" json:"field_mask,omitempty"`
	PageSize      *uint32                `protobuf:"varint,4,opt,name=page_size,json=pageSize,proto3,oneof" json:"page_size,omitempty"`
	PageToken     *string                `protobuf:"bytes,5,opt,name=page_token,json=pageToken,proto3,oneof" json:"page_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListChassisRequest) Reset() {
	*x = ListChassisRequest{}
	mi := &file_schema_v1alpha1_chassis_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListChassisRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListChassisRequest) ProtoMessage() {}

func (x *ListChassisRequest) ProtoReflect() protoreflect.Message {
	mi := &file_schema_v1alpha1_chassis_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListChassisRequest.ProtoReflect.Descriptor instead.
func (*ListChassisRequest) Descriptor() ([]byte, []int) {
	return file_schema_v1alpha1_chassis_proto_rawDescGZIP(), []int{13}
}

func (x *ListChassisRequest) GetType() ChassisType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return ChassisType_CHASSIS_TYPE_UNSPECIFIED
}

func (x *ListChassisRequest) GetStatus() ChassisStatus {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return ChassisStatus_CHASSIS_STATUS_UNSPECIFIED
}

func (x *ListChassisRequest) GetFieldMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.FieldMask
	}
	return nil
}

func (x *ListChassisRequest) GetPageSize() uint32 {
	if x != nil && x.PageSize != nil {
		return *x.PageSize
	}
	return 0
}

func (x *ListChassisRequest) GetPageToken() string {
	if x != nil && x.PageToken != nil {
		return *x.PageToken
	}
	return ""
}

type ListChassisResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Chassis       []*Chassis             `protobuf:"bytes,1,rep,name=chassis,proto3" json:"chassis,omitempty"`
	NextPageToken *string                `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3,oneof" json:"next_page_token,omitempty"`
	TotalSize     *uint32                `protobuf:"varint,3,opt,name=total_size,json=totalSize,proto3,oneof" json:"total_size,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListChassisResponse) Reset() {
	*x = ListChassisResponse{}
	mi := &file_schema_v1alpha1_chassis_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListChassisResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListChassisResponse) ProtoMessage() {}

func (x *ListChassisResponse) ProtoReflect() protoreflect.Message {
	mi := &file_schema_v1alpha1_chassis_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListChassisResponse.ProtoReflect.Descriptor instead.
func (*ListChassisResponse) Descriptor() ([]byte, []int) {
	return file_schema_v1alpha1_chassis_proto_rawDescGZIP(), []int{14}
}

func (x *ListChassisResponse) GetChassis() []*Chassis {
	if x != nil {
		return x.Chassis
	}
	return nil
}

func (x *ListChassisResponse) GetNextPageToken() string {
	if x != nil && x.NextPageToken != nil {
		return *x.NextPageToken
	}
	return ""
}

func (x *ListChassisResponse) GetTotalSize() uint32 {
	if x != nil && x.TotalSize != nil {
		return *x.TotalSize
	}
	return 0
}

type UpdateChassisRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ChassisName   string                 `protobuf:"bytes,1,opt,name=chassis_name,json=chassisName,proto3" json:"chassis_name,omitempty"`
	Chassis       *Chassis               `protobuf:"bytes,2,opt,name=chassis,proto3" json:"chassis,omitempty"`
	FieldMask     *fieldmaskpb.FieldMask `protobuf:"bytes,3,opt,name=field_mask,json=fieldMask,proto3" json:"field_mask,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateChassisRequest) Reset() {
	*x = UpdateChassisRequest{}
	mi := &file_schema_v1alpha1_chassis_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateChassisRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateChassisRequest) ProtoMessage() {}

func (x *UpdateChassisRequest) ProtoReflect() protoreflect.Message {
	mi := &file_schema_v1alpha1_chassis_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateChassisRequest.ProtoReflect.Descriptor instead.
func (*UpdateChassisRequest) Descriptor() ([]byte, []int) {
	return file_schema_v1alpha1_chassis_proto_rawDescGZIP(), []int{15}
}

func (x *UpdateChassisRequest) GetChassisName() string {
	if x != nil {
		return x.ChassisName
	}
	return ""
}

func (x *UpdateChassisRequest) GetChassis() *Chassis {
	if x != nil {
		return x.Chassis
	}
	return nil
}

func (x *UpdateChassisRequest) GetFieldMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.FieldMask
	}
	return nil
}

type UpdateChassisResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Chassis       *Chassis               `protobuf:"bytes,1,opt,name=chassis,proto3" json:"chassis,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateChassisResponse) Reset() {
	*x = UpdateChassisResponse{}
	mi := &file_schema_v1alpha1_chassis_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateChassisResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateChassisResponse) ProtoMessage() {}

func (x *UpdateChassisResponse) ProtoReflect() protoreflect.Message {
	mi := &file_schema_v1alpha1_chassis_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateChassisResponse.ProtoReflect.Descriptor instead.
func (*UpdateChassisResponse) Descriptor() ([]byte, []int) {
	return file_schema_v1alpha1_chassis_proto_rawDescGZIP(), []int{16}
}

func (x *UpdateChassisResponse) GetChassis() *Chassis {
	if x != nil {
		return x.Chassis
	}
	return nil
}

type ChassisChangeStateRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ChassisName   string                 `protobuf:"bytes,1,opt,name=chassis_name,json=chassisName,proto3" json:"chassis_name,omitempty"`
	Transition    ChassisTransition      `protobuf:"varint,2,opt,name=transition,proto3,enum=schema.v1alpha1.ChassisTransition" json:"transition,omitempty"`
	Force         *bool                  `protobuf:"varint,3,opt,name=force,proto3,oneof" json:"force,omitempty"`
	FieldMask     *fieldmaskpb.FieldMask `protobuf:"bytes,4,opt,name=field_mask,json=fieldMask,proto3,oneof" json:"field_mask,omitempty"`
	Metadata      map[string]string      `protobuf:"bytes,5,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ChassisChangeStateRequest) Reset() {
	*x = ChassisChangeStateRequest{}
	mi := &file_schema_v1alpha1_chassis_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChassisChangeStateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChassisChangeStateRequest) ProtoMessage() {}

func (x *ChassisChangeStateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_schema_v1alpha1_chassis_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChassisChangeStateRequest.ProtoReflect.Descriptor instead.
func (*ChassisChangeStateRequest) Descriptor() ([]byte, []int) {
	return file_schema_v1alpha1_chassis_proto_rawDescGZIP(), []int{17}
}

func (x *ChassisChangeStateRequest) GetChassisName() string {
	if x != nil {
		return x.ChassisName
	}
	return ""
}

func (x *ChassisChangeStateRequest) GetTransition() ChassisTransition {
	if x != nil {
		return x.Transition
	}
	return ChassisTransition_CHASSIS_TRANSITION_UNSPECIFIED
}

func (x *ChassisChangeStateRequest) GetForce() bool {
	if x != nil && x.Force != nil {
		return *x.Force
	}
	return false
}

func (x *ChassisChangeStateRequest) GetFieldMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.FieldMask
	}
	return nil
}

func (x *ChassisChangeStateRequest) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

type ChassisChangeStateResponse struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	Success             bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	ErrorMessage        *string                `protobuf:"bytes,2,opt,name=error_message,json=errorMessage,proto3,oneof" json:"error_message,omitempty"`
	Status              *ChassisStatus         `protobuf:"varint,3,opt,name=status,proto3,enum=schema.v1alpha1.ChassisStatus,oneof" json:"status,omitempty"`
	TransitionId        *string                `protobuf:"bytes,4,opt,name=transition_id,json=transitionId,proto3,oneof" json:"transition_id,omitempty"`
	EstimatedCompletion *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=estimated_completion,json=estimatedCompletion,proto3,oneof" json:"estimated_completion,omitempty"`
	Metadata            map[string]string      `protobuf:"bytes,6,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *ChassisChangeStateResponse) Reset() {
	*x = ChassisChangeStateResponse{}
	mi := &file_schema_v1alpha1_chassis_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChassisChangeStateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChassisChangeStateResponse) ProtoMessage() {}

func (x *ChassisChangeStateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_schema_v1alpha1_chassis_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChassisChangeStateResponse.ProtoReflect.Descriptor instead.
func (*ChassisChangeStateResponse) Descriptor() ([]byte, []int) {
	return file_schema_v1alpha1_chassis_proto_rawDescGZIP(), []int{18}
}

func (x *ChassisChangeStateResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *ChassisChangeStateResponse) GetErrorMessage() string {
	if x != nil && x.ErrorMessage != nil {
		return *x.ErrorMessage
	}
	return ""
}

func (x *ChassisChangeStateResponse) GetStatus() ChassisStatus {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return ChassisStatus_CHASSIS_STATUS_UNSPECIFIED
}

func (x *ChassisChangeStateResponse) GetTransitionId() string {
	if x != nil && x.TransitionId != nil {
		return *x.TransitionId
	}
	return ""
}

func (x *ChassisChangeStateResponse) GetEstimatedCompletion() *timestamppb.Timestamp {
	if x != nil {
		return x.EstimatedCompletion
	}
	return nil
}

func (x *ChassisChangeStateResponse) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

type ChassisControlRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ChassisName   string                 `protobuf:"bytes,1,opt,name=chassis_name,json=chassisName,proto3" json:"chassis_name,omitempty"`
	Action        ChassisControlAction   `protobuf:"varint,2,opt,name=action,proto3,enum=schema.v1alpha1.ChassisControlAction" json:"action,omitempty"`
	Force         *bool                  `protobuf:"varint,3,opt,name=force,proto3,oneof" json:"force,omitempty"`
	FieldMask     *fieldmaskpb.FieldMask `protobuf:"bytes,4,opt,name=field_mask,json=fieldMask,proto3,oneof" json:"field_mask,omitempty"`
	Parameters    map[string]string      `protobuf:"bytes,5,rep,name=parameters,proto3" json:"parameters,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ChassisControlRequest) Reset() {
	*x = ChassisControlRequest{}
	mi := &file_schema_v1alpha1_chassis_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChassisControlRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChassisControlRequest) ProtoMessage() {}

func (x *ChassisControlRequest) ProtoReflect() protoreflect.Message {
	mi := &file_schema_v1alpha1_chassis_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChassisControlRequest.ProtoReflect.Descriptor instead.
func (*ChassisControlRequest) Descriptor() ([]byte, []int) {
	return file_schema_v1alpha1_chassis_proto_rawDescGZIP(), []int{19}
}

func (x *ChassisControlRequest) GetChassisName() string {
	if x != nil {
		return x.ChassisName
	}
	return ""
}

func (x *ChassisControlRequest) GetAction() ChassisControlAction {
	if x != nil {
		return x.Action
	}
	return ChassisControlAction_CHASSIS_CONTROL_ACTION_UNSPECIFIED
}

func (x *ChassisControlRequest) GetForce() bool {
	if x != nil && x.Force != nil {
		return *x.Force
	}
	return false
}

func (x *ChassisControlRequest) GetFieldMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.FieldMask
	}
	return nil
}

func (x *ChassisControlRequest) GetParameters() map[string]string {
	if x != nil {
		return x.Parameters
	}
	return nil
}

type ChassisControlResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	ErrorMessage  *string                `protobuf:"bytes,2,opt,name=error_message,json=errorMessage,proto3,oneof" json:"error_message,omitempty"`
	Status        *ChassisStatus         `protobuf:"varint,3,opt,name=status,proto3,enum=schema.v1alpha1.ChassisStatus,oneof" json:"status,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ChassisControlResponse) Reset() {
	*x = ChassisControlResponse{}
	mi := &file_schema_v1alpha1_chassis_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChassisControlResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChassisControlResponse) ProtoMessage() {}

func (x *ChassisControlResponse) ProtoReflect() protoreflect.Message {
	mi := &file_schema_v1alpha1_chassis_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChassisControlResponse.ProtoReflect.Descriptor instead.
func (*ChassisControlResponse) Descriptor() ([]byte, []int) {
	return file_schema_v1alpha1_chassis_proto_rawDescGZIP(), []int{20}
}

func (x *ChassisControlResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *ChassisControlResponse) GetErrorMessage() string {
	if x != nil && x.ErrorMessage != nil {
		return *x.ErrorMessage
	}
	return ""
}

func (x *ChassisControlResponse) GetStatus() ChassisStatus {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return ChassisStatus_CHASSIS_STATUS_UNSPECIFIED
}

var File_schema_v1alpha1_chassis_proto protoreflect.FileDescriptor

const file_schema_v1alpha1_chassis_proto_rawDesc = "" +
	"\n" +
	"\x1dschema/v1alpha1/chassis.proto\x12\x0fschema.v1alpha1\x1a\x1bbuf/validate/validate.proto\x1a google/protobuf/field_mask.proto\x1a\x1fgoogle/protobuf/timestamp.proto\x1a\x1bschema/v1alpha1/asset.proto\x1a\x1eschema/v1alpha1/location.proto\x1a\x1cschema/v1alpha1/sensor.proto\x1a\x1bschema/v1alpha1/specs.proto\x1a\x1dschema/v1alpha1/thermal.proto\"\xe8\r\n" +
	"\aChassis\x12\x1b\n" +
	"\x04name\x18\x01 \x01(\tB\a\xbaH\x04r\x02\x10\x01R\x04name\x128\n" +
	"\x05asset\x18\x02 \x01(\v2\x1a.schema.v1alpha1.AssetInfoB\x06\xbaH\x03\xc8\x01\x01R\x05asset\x12%\n" +
	"\vdescription\x18\x03 \x01(\tH\x00R\vdescription\x88\x01\x01\x12?\n" +
	"\x04type\x18\x04 \x01(\x0e2\x1c.schema.v1alpha1.ChassisTypeB\b\xbaH\x05\x82\x01\x02\x10\x01H\x01R\x04type\x88\x01\x01\x12R\n" +
	"\vform_factor\x18\x05 \x01(\x0e2\".schema.v1alpha1.ChassisFormFactorB\b\xbaH\x05\x82\x01\x02\x10\x01H\x02R\n" +
	"formFactor\x88\x01\x01\x12E\n" +
	"\x06status\x18\x06 \x01(\x0e2\x1e.schema.v1alpha1.ChassisStatusB\b\xbaH\x05\x82\x01\x02\x10\x01H\x03R\x06status\x88\x01\x01\x12d\n" +
	"\x14requested_transition\x18\a \x01(\x0e2\".schema.v1alpha1.ChassisTransitionB\b\xbaH\x05\x82\x01\x02\x10\x01H\x04R\x13requestedTransition\x88\x01\x01\x12:\n" +
	"\blocation\x18\b \x01(\v2\x19.schema.v1alpha1.LocationH\x05R\blocation\x88\x01\x01\x12H\n" +
	"\n" +
	"dimensions\x18\t \x01(\v2#.schema.v1alpha1.PhysicalDimensionsH\x06R\n" +
	"dimensions\x88\x01\x01\x12E\n" +
	"\n" +
	"power_info\x18\n" +
	" \x01(\v2!.schema.v1alpha1.ChassisPowerInfoH\aR\tpowerInfo\x88\x01\x01\x121\n" +
	"\asensors\x18\v \x03(\v2\x17.schema.v1alpha1.SensorR\asensors\x12A\n" +
	"\rthermal_zones\x18\f \x03(\v2\x1c.schema.v1alpha1.ThermalZoneR\fthermalZones\x12G\n" +
	"\x0fcooling_devices\x18\r \x03(\v2\x1e.schema.v1alpha1.CoolingDeviceR\x0ecoolingDevices\x12\x1d\n" +
	"\n" +
	"host_names\x18\x0e \x03(\tR\thostNames\x12:\n" +
	"\x19management_controller_ids\x18\x0f \x03(\tR\x17managementControllerIds\x12/\n" +
	"\x04leds\x18\x10 \x03(\v2\x1b.schema.v1alpha1.ChassisLEDR\x04leds\x12D\n" +
	"\tintrusion\x18\x11 \x01(\v2!.schema.v1alpha1.ChassisIntrusionH\bR\tintrusion\x88\x01\x01\x12E\n" +
	"\x10contained_assets\x18\x12 \x03(\v2\x1a.schema.v1alpha1.AssetInfoR\x0fcontainedAssets\x12>\n" +
	"\n" +
	"updated_at\x18\x13 \x01(\v2\x1a.google.protobuf.TimestampH\tR\tupdatedAt\x88\x01\x01\x12B\n" +
	"\bmetadata\x18\x14 \x03(\v2&.schema.v1alpha1.Chassis.MetadataEntryR\bmetadata\x1a;\n" +
	"\rMetadataEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01:\xa1\x02\xbaH\x9d\x02\x1a\x9a\x02\n" +
	"\x19chassis_power_consumption\x129power_consumed_watts must not exceed power_capacity_watts\x1a\xc1\x01!has(this.power_info) || !has(this.power_info.power_consumed_watts) || !has(this.power_info.power_capacity_watts) || this.power_info.power_consumed_watts <= this.power_info.power_capacity_wattsB\x0e\n" +
	"\f_descriptionB\a\n" +
	"\x05_typeB\x0e\n" +
	"\f_form_factorB\t\n" +
	"\a_statusB\x17\n" +
	"\x15_requested_transitionB\v\n" +
	"\t_locationB\r\n" +
	"\v_dimensionsB\r\n" +
	"\v_power_infoB\f\n" +
	"\n" +
	"_intrusionB\r\n" +
	"\v_updated_at\"\xec\x05\n" +
	"\x10ChassisPowerInfo\x12>\n" +
	"\x14power_capacity_watts\x18\x01 \x01(\rB\a\xbaH\x04*\x02 \x00H\x00R\x12powerCapacityWatts\x88\x01\x01\x12>\n" +
	"\x14power_consumed_watts\x18\x02 \x01(\rB\a\xbaH\x04*\x02(\x00H\x01R\x12powerConsumedWatts\x88\x01\x01\x12J\n" +
	"\x0epower_supplies\x18\x03 \x03(\v2#.schema.v1alpha1.ChassisPowerSupplyR\rpowerSupplies\x12X\n" +
	"\x12power_distribution\x18\x04 \x03(\v2).schema.v1alpha1.ChassisPowerDistributionR\x11powerDistribution\x12L\n" +
	"\n" +
	"redundancy\x18\x05 \x01(\v2'.schema.v1alpha1.ChassisPowerRedundancyH\x02R\n" +
	"redundancy\x88\x01\x01\x12H\n" +
	"\rpower_budgets\x18\x06 \x03(\v2#.schema.v1alpha1.ChassisPowerBudgetR\fpowerBudgets:\xd8\x01\xbaH\xd4\x01\x1a\xd1\x01\n" +
	"\x16chassis_power_capacity\x129power_consumed_watts must not exceed power_capacity_watts\x1a|!has(this.power_consumed_watts) || !has(this.power_capacity_watts) || this.power_consumed_watts <= this.power_capacity_wattsB\x17\n" +
	"\x15_power_capacity_wattsB\x17\n" +
	"\x15_power_consumed_wattsB\r\n" +
	"\v_redundancy\"\xed\b\n" +
	"\x12ChassisPowerSupply\x12\x1b\n" +
	"\x04name\x18\x01 \x01(\tB\a\xbaH\x04r\x02\x10\x01R\x04name\x128\n" +
	"\x05asset\x18\x02 \x01(\v2\x1a.schema.v1alpha1.AssetInfoB\x06\xbaH\x03\xc8\x01\x01R\x05asset\x12J\n" +
	"\x04type\x18\x03 \x01(\x0e2'.schema.v1alpha1.ChassisPowerSupplyTypeB\b\xbaH\x05\x82\x01\x02\x10\x01H\x00R\x04type\x88\x01\x01\x12P\n" +
	"\x06status\x18\x04 \x01(\x0e2).schema.v1alpha1.ChassisPowerSupplyStatusB\b\xbaH\x05\x82\x01\x02\x10\x01H\x01R\x06status\x88\x01\x01\x123\n" +
	"\x0ecapacity_watts\x18\x05 \x01(\rB\a\xbaH\x04*\x02 \x00H\x02R\rcapacityWatts\x88\x01\x01\x12/\n" +
	"\foutput_watts\x18\x06 \x01(\rB\a\xbaH\x04*\x02(\x00H\x03R\voutputWatts\x88\x01\x01\x120\n" +
	"\x11efficiency_rating\x18\a \x01(\tH\x04R\x10efficiencyRating\x88\x01\x01\x128\n" +
	"\rinput_voltage\x18\b \x01(\x01B\x0e\xbaH\v\x12\t)\x00\x00\x00\x00\x00\x00\x00\x00H\x05R\finputVoltage\x88\x01\x01\x12:\n" +
	"\x0eoutput_voltage\x18\t \x01(\x01B\x0e\xbaH\v\x12\t)\x00\x00\x00\x00\x00\x00\x00\x00H\x06R\routputVoltage\x88\x01\x01\x128\n" +
	"\rinput_current\x18\n" +
	" \x01(\x01B\x0e\xbaH\v\x12\t)\x00\x00\x00\x00\x00\x00\x00\x00H\aR\finputCurrent\x88\x01\x01\x12:\n" +
	"\x0eoutput_current\x18\v \x01(\x01B\x0e\xbaH\v\x12\t)\x00\x00\x00\x00\x00\x00\x00\x00H\bR\routputCurrent\x88\x01\x01\x124\n" +
	"\x13temperature_celsius\x18\f \x01(\x01H\tR\x12temperatureCelsius\x88\x01\x01\x120\n" +
	"\rfan_speed_rpm\x18\r \x01(\rB\a\xbaH\x04*\x02(\x00H\n" +
	"R\vfanSpeedRpm\x88\x01\x01\x12(\n" +
	"\rhot_swappable\x18\x0e \x01(\bH\vR\fhotSwappable\x88\x01\x01\x12!\n" +
	"\tredundant\x18\x0f \x01(\bH\fR\tredundant\x88\x01\x01\x12:\n" +
	"\blocation\x18\x10 \x01(\v2\x19.schema.v1alpha1.LocationH\rR\blocation\x88\x01\x01B\a\n" +
	"\x05_typeB\t\n" +
	"\a_statusB\x11\n" +
	"\x0f_capacity_wattsB\x0f\n" +
	"\r_output_wattsB\x14\n" +
	"\x12_efficiency_ratingB\x10\n" +
	"\x0e_input_voltageB\x11\n" +
	"\x0f_output_voltageB\x10\n" +
	"\x0e_input_currentB\x11\n" +
	"\x0f_output_currentB\x16\n" +
	"\x14_temperature_celsiusB\x10\n" +
	"\x0e_fan_speed_rpmB\x10\n" +
	"\x0e_hot_swappableB\f\n" +
	"\n" +
	"_redundantB\v\n" +
	"\t_location\"\xf6\x01\n" +
	"\x18ChassisPowerDistribution\x12\x1b\n" +
	"\x04name\x18\x01 \x01(\tB\a\xbaH\x04r\x02\x10\x01R\x04name\x123\n" +
	"\x0ecapacity_watts\x18\x02 \x01(\rB\a\xbaH\x04*\x02 \x00H\x00R\rcapacityWatts\x88\x01\x01\x12+\n" +
	"\n" +
	"load_watts\x18\x03 \x01(\rB\a\xbaH\x04*\x02(\x00H\x01R\tloadWatts\x88\x01\x01\x129\n" +
	"\bcircuits\x18\x04 \x03(\v2\x1d.schema.v1alpha1.PowerCircuitR\bcircuitsB\x11\n" +
	"\x0f_capacity_wattsB\r\n" +
	"\v_load_watts\"\xfb\x02\n" +
	"\fPowerCircuit\x12\x1b\n" +
	"\x04name\x18\x01 \x01(\tB\a\xbaH\x04r\x02\x10\x01R\x04name\x12-\n" +
	"\avoltage\x18\x02 \x01(\x01B\x0e\xbaH\v\x12\t)\x00\x00\x00\x00\x00\x00\x00\x00H\x00R\avoltage\x88\x01\x01\x126\n" +
	"\fcurrent_amps\x18\x03 \x01(\x01B\x0e\xbaH\v\x12\t)\x00\x00\x00\x00\x00\x00\x00\x00H\x01R\vcurrentAmps\x88\x01\x01\x124\n" +
	"\vpower_watts\x18\x04 \x01(\x01B\x0e\xbaH\v\x12\t)\x00\x00\x00\x00\x00\x00\x00\x00H\x02R\n" +
	"powerWatts\x88\x01\x01\x12C\n" +
	"\x13breaker_rating_amps\x18\x05 \x01(\x01B\x0e\xbaH\v\x12\t)\x00\x00\x00\x00\x00\x00\x00\x00H\x03R\x11breakerRatingAmps\x88\x01\x01\x12'\n" +
	"\x0fconnected_loads\x18\x06 \x03(\tR\x0econnectedLoadsB\n" +
	"\n" +
	"\b_voltageB\x0f\n" +
	"\r_current_ampsB\x0e\n" +
	"\f_power_wattsB\x16\n" +
	"\x14_breaker_rating_amps\"\xa1\x02\n" +
	"\x16ChassisPowerRedundancy\x12\x18\n" +
	"\aenabled\x18\x01 \x01(\bR\aenabled\x12\x17\n" +
	"\x04mode\x18\x02 \x01(\tH\x00R\x04mode\x88\x01\x01\x129\n" +
	"\x11required_supplies\x18\x03 \x01(\rB\a\xbaH\x04*\x02(\x01H\x01R\x10requiredSupplies\x88\x01\x01\x12;\n" +
	"\x12available_supplies\x18\x04 \x01(\rB\a\xbaH\x04*\x02(\x00H\x02R\x11availableSupplies\x88\x01\x01\x12\x1b\n" +
	"\x06status\x18\x05 \x01(\tH\x03R\x06status\x88\x01\x01B\a\n" +
	"\x05_modeB\x14\n" +
	"\x12_required_suppliesB\x15\n" +
	"\x13_available_suppliesB\t\n" +
	"\a_status\"\xfb\x04\n" +
	"\x12ChassisPowerBudget\x12*\n" +
	"\fallocated_to\x18\x01 \x01(\tB\a\xbaH\x04r\x02\x10\x01R\vallocatedTo\x125\n" +
	"\x0fallocated_watts\x18\x02 \x01(\rB\a\xbaH\x04*\x02(\x00H\x00R\x0eallocatedWatts\x88\x01\x01\x12+\n" +
	"\n" +
	"used_watts\x18\x03 \x01(\rB\a\xbaH\x04*\x02(\x00H\x01R\tusedWatts\x88\x01\x01\x12)\n" +
	"\tmax_watts\x18\x04 \x01(\rB\a\xbaH\x04*\x02 \x00H\x02R\bmaxWatts\x88\x01\x01\x12\x1f\n" +
	"\bpriority\x18\x05 \x01(\rH\x03R\bpriority\x88\x01\x01:\xca\x02\xbaH\xc6\x02\x1a\xa5\x01\n" +
	"\x17power_budget_allocation\x12*used_watts must not exceed allocated_watts\x1a^!has(this.used_watts) || !has(this.allocated_watts) || this.used_watts <= this.allocated_watts\x1a\x9b\x01\n" +
	"\x10power_budget_max\x12)allocated_watts must not exceed max_watts\x1a\\!has(this.allocated_watts) || !has(this.max_watts) || this.allocated_watts <= this.max_wattsB\x12\n" +
	"\x10_allocated_wattsB\r\n" +
	"\v_used_wattsB\f\n" +
	"\n" +
	"_max_wattsB\v\n" +
	"\t_priority\"\xe2\x02\n" +
	"\n" +
	"ChassisLED\x12\x1b\n" +
	"\x04name\x18\x01 \x01(\tB\a\xbaH\x04r\x02\x10\x01R\x04name\x12B\n" +
	"\x04type\x18\x02 \x01(\x0e2\x1f.schema.v1alpha1.ChassisLEDTypeB\b\xbaH\x05\x82\x01\x02\x10\x01H\x00R\x04type\x88\x01\x01\x12E\n" +
	"\x05state\x18\x03 \x01(\x0e2 .schema.v1alpha1.ChassisLEDStateB\b\xbaH\x05\x82\x01\x02\x10\x01H\x01R\x05state\x88\x01\x01\x12\x19\n" +
	"\x05color\x18\x04 \x01(\tH\x02R\x05color\x88\x01\x01\x12(\n" +
	"\rblink_pattern\x18\x05 \x01(\tH\x03R\fblinkPattern\x88\x01\x01\x12'\n" +
	"\fcontrollable\x18\x06 \x01(\bH\x04R\fcontrollable\x88\x01\x01B\a\n" +
	"\x05_typeB\b\n" +
	"\x06_stateB\b\n" +
	"\x06_colorB\x10\n" +
	"\x0e_blink_patternB\x0f\n" +
	"\r_controllable\"\xea\x02\n" +
	"\x10ChassisIntrusion\x12\x18\n" +
	"\aenabled\x18\x01 \x01(\bR\aenabled\x12-\n" +
	"\x12intrusion_detected\x18\x02 \x01(\bR\x11intrusionDetected\x12F\n" +
	"\x0elast_intrusion\x18\x03 \x01(\v2\x1a.google.protobuf.TimestampH\x00R\rlastIntrusion\x88\x01\x01\x12,\n" +
	"\x0fintrusion_count\x18\x04 \x01(\rH\x01R\x0eintrusionCount\x88\x01\x01\x12$\n" +
	"\vreset_count\x18\x05 \x01(\bH\x02R\n" +
	"resetCount\x88\x01\x01\x12(\n" +
	"\rsensor_status\x18\x06 \x01(\tH\x03R\fsensorStatus\x88\x01\x01B\x11\n" +
	"\x0f_last_intrusionB\x12\n" +
	"\x10_intrusion_countB\x0e\n" +
	"\f_reset_countB\x10\n" +
	"\x0e_sensor_status\"\x9d\x02\n" +
	"\fExpansionBay\x12\x1b\n" +
	"\x04name\x18\x01 \x01(\tB\a\xbaH\x04r\x02\x10\x01R\x04name\x12\x1e\n" +
	"\bbay_type\x18\x02 \x01(\tH\x00R\abayType\x88\x01\x01\x12\x1f\n" +
	"\boccupied\x18\x03 \x01(\bH\x01R\boccupied\x88\x01\x01\x124\n" +
	"\x13installed_component\x18\x04 \x01(\tH\x02R\x12installedComponent\x88\x01\x01\x12:\n" +
	"\blocation\x18\x05 \x01(\v2\x19.schema.v1alpha1.LocationH\x03R\blocation\x88\x01\x01B\v\n" +
	"\t_bay_typeB\v\n" +
	"\t_occupiedB\x16\n" +
	"\x14_installed_componentB\v\n" +
	"\t_location\"\x98\x02\n" +
	"\x04Slot\x12\x1b\n" +
	"\x04name\x18\x01 \x01(\tB\a\xbaH\x04r\x02\x10\x01R\x04name\x12 \n" +
	"\tslot_type\x18\x02 \x01(\tH\x00R\bslotType\x88\x01\x01\x12\x1f\n" +
	"\boccupied\x18\x03 \x01(\bH\x01R\boccupied\x88\x01\x01\x124\n" +
	"\x13installed_component\x18\x04 \x01(\tH\x02R\x12installedComponent\x88\x01\x01\x12:\n" +
	"\blocation\x18\x05 \x01(\v2\x19.schema.v1alpha1.LocationH\x03R\blocation\x88\x01\x01B\f\n" +
	"\n" +
	"_slot_typeB\v\n" +
	"\t_occupiedB\x16\n" +
	"\x14_installed_componentB\v\n" +
	"\t_location\"\xb4\x02\n" +
	"\x11GetChassisRequest\x12\x14\n" +
	"\x04name\x18\x01 \x01(\tH\x00R\x04name\x122\n" +
	"\x04type\x18\x02 \x01(\x0e2\x1c.schema.v1alpha1.ChassisTypeH\x00R\x04type\x128\n" +
	"\x06status\x18\x03 \x01(\x0e2\x1e.schema.v1alpha1.ChassisStatusH\x00R\x06status\x127\n" +
	"\blocation\x18\x04 \x01(\v2\x19.schema.v1alpha1.LocationH\x00R\blocation\x12>\n" +
	"\n" +
	"field_mask\x18\x05 \x01(\v2\x1a.google.protobuf.FieldMaskH\x01R\tfieldMask\x88\x01\x01B\x13\n" +
	"\n" +
	"identifier\x12\x05\xbaH\x02\b\x01B\r\n" +
	"\v_field_mask\"H\n" +
	"\x12GetChassisResponse\x122\n" +
	"\achassis\x18\x01 \x03(\v2\x18.schema.v1alpha1.ChassisR\achassis\"\xec\x02\n" +
	"\x12ListChassisRequest\x12?\n" +
	"\x04type\x18\x01 \x01(\x0e2\x1c.schema.v1alpha1.ChassisTypeB\b\xbaH\x05\x82\x01\x02\x10\x01H\x00R\x04type\x88\x01\x01\x12E\n" +
	"\x06status\x18\x02 \x01(\x0e2\x1e.schema.v1alpha1.ChassisStatusB\b\xbaH\x05\x82\x01\x02\x10\x01H\x01R\x06status\x88\x01\x01\x12>\n" +
	"\n" +
	"field_mask\x18\x03 \x01(\v2\x1a.google.protobuf.FieldMaskH\x02R\tfieldMask\x88\x01\x01\x12*\n" +
	"\tpage_size\x18\x04 \x01(\rB\b\xbaH\x05*\x03\x18\xe8\aH\x03R\bpageSize\x88\x01\x01\x12\"\n" +
	"\n" +
	"page_token\x18\x05 \x01(\tH\x04R\tpageToken\x88\x01\x01B\a\n" +
	"\x05_typeB\t\n" +
	"\a_statusB\r\n" +
	"\v_field_maskB\f\n" +
	"\n" +
	"_page_sizeB\r\n" +
	"\v_page_token\"\xbd\x01\n" +
	"\x13ListChassisResponse\x122\n" +
	"\achassis\x18\x01 \x03(\v2\x18.schema.v1alpha1.ChassisR\achassis\x12+\n" +
	"\x0fnext_page_token\x18\x02 \x01(\tH\x00R\rnextPageToken\x88\x01\x01\x12\"\n" +
	"\n" +
	"total_size\x18\x03 \x01(\rH\x01R\ttotalSize\x88\x01\x01B\x12\n" +
	"\x10_next_page_tokenB\r\n" +
	"\v_total_size\"\xb9\x01\n" +
	"\x14UpdateChassisRequest\x12*\n" +
	"\fchassis_name\x18\x01 \x01(\tB\a\xbaH\x04r\x02\x10\x01R\vchassisName\x12:\n" +
	"\achassis\x18\x02 \x01(\v2\x18.schema.v1alpha1.ChassisB\x06\xbaH\x03\xc8\x01\x01R\achassis\x129\n" +
	"\n" +
	"field_mask\x18\x03 \x01(\v2\x1a.google.protobuf.FieldMaskR\tfieldMask\"K\n" +
	"\x15UpdateChassisResponse\x122\n" +
	"\achassis\x18\x01 \x01(\v2\x18.schema.v1alpha1.ChassisR\achassis\"\x9c\x03\n" +
	"\x19ChassisChangeStateRequest\x12*\n" +
	"\fchassis_name\x18\x01 \x01(\tB\a\xbaH\x04r\x02\x10\x01R\vchassisName\x12L\n" +
	"\n" +
	"transition\x18\x02 \x01(\x0e2\".schema.v1alpha1.ChassisTransitionB\b\xbaH\x05\x82\x01\x02\x10\x01R\n" +
	"transition\x12\x19\n" +
	"\x05force\x18\x03 \x01(\bH\x00R\x05force\x88\x01\x01\x12>\n" +
	"\n" +
	"field_mask\x18\x04 \x01(\v2\x1a.google.protobuf.FieldMaskH\x01R\tfieldMask\x88\x01\x01\x12T\n" +
	"\bmetadata\x18\x05 \x03(\v28.schema.v1alpha1.ChassisChangeStateRequest.MetadataEntryR\bmetadata\x1a;\n" +
	"\rMetadataEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01B\b\n" +
	"\x06_forceB\r\n" +
	"\v_field_mask\"\x81\x04\n" +
	"\x1aChassisChangeStateResponse\x12\x18\n" +
	"\asuccess\x18\x01 \x01(\bR\asuccess\x12(\n" +
	"\rerror_message\x18\x02 \x01(\tH\x00R\ferrorMessage\x88\x01\x01\x12E\n" +
	"\x06status\x18\x03 \x01(\x0e2\x1e.schema.v1alpha1.ChassisStatusB\b\xbaH\x05\x82\x01\x02\x10\x01H\x01R\x06status\x88\x01\x01\x12(\n" +
	"\rtransition_id\x18\x04 \x01(\tH\x02R\ftransitionId\x88\x01\x01\x12R\n" +
	"\x14estimated_completion\x18\x05 \x01(\v2\x1a.google.protobuf.TimestampH\x03R\x13estimatedCompletion\x88\x01\x01\x12U\n" +
	"\bmetadata\x18\x06 \x03(\v29.schema.v1alpha1.ChassisChangeStateResponse.MetadataEntryR\bmetadata\x1a;\n" +
	"\rMetadataEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01B\x10\n" +
	"\x0e_error_messageB\t\n" +
	"\a_statusB\x10\n" +
	"\x0e_transition_idB\x17\n" +
	"\x15_estimated_completion\"\x97\x03\n" +
	"\x15ChassisControlRequest\x12*\n" +
	"\fchassis_name\x18\x01 \x01(\tB\a\xbaH\x04r\x02\x10\x01R\vchassisName\x12G\n" +
	"\x06action\x18\x02 \x01(\x0e2%.schema.v1alpha1.ChassisControlActionB\b\xbaH\x05\x82\x01\x02\x10\x01R\x06action\x12\x19\n" +
	"\x05force\x18\x03 \x01(\bH\x00R\x05force\x88\x01\x01\x12>\n" +
	"\n" +
	"field_mask\x18\x04 \x01(\v2\x1a.google.protobuf.FieldMaskH\x01R\tfieldMask\x88\x01\x01\x12V\n" +
	"\n" +
	"parameters\x18\x05 \x03(\v26.schema.v1alpha1.ChassisControlRequest.ParametersEntryR\n" +
	"parameters\x1a=\n" +
	"\x0fParametersEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01B\b\n" +
	"\x06_forceB\r\n" +
	"\v_field_mask\"\xc0\x01\n" +
	"\x16ChassisControlResponse\x12\x18\n" +
	"\asuccess\x18\x01 \x01(\bR\asuccess\x12(\n" +
	"\rerror_message\x18\x02 \x01(\tH\x00R\ferrorMessage\x88\x01\x01\x12E\n" +
	"\x06status\x18\x03 \x01(\x0e2\x1e.schema.v1alpha1.ChassisStatusB\b\xbaH\x05\x82\x01\x02\x10\x01H\x01R\x06status\x88\x01\x01B\x10\n" +
	"\x0e_error_messageB\t\n" +
	"\a_status*\xe2\x01\n" +
	"\vChassisType\x12\x1c\n" +
	"\x18CHASSIS_TYPE_UNSPECIFIED\x10\x00\x12\x1b\n" +
	"\x17CHASSIS_TYPE_RACK_MOUNT\x10\x01\x12\x16\n" +
	"\x12CHASSIS_TYPE_BLADE\x10\x02\x12\x1b\n" +
	"\x17CHASSIS_TYPE_STANDALONE\x10\x03\x12\x15\n" +
	"\x11CHASSIS_TYPE_CARD\x10\x04\x12\x16\n" +
	"\x12CHASSIS_TYPE_TOWER\x10\x05\x12\x18\n" +
	"\x14CHASSIS_TYPE_DESKTOP\x10\x06\x12\x1a\n" +
	"\x16CHASSIS_TYPE_ENCLOSURE\x10\a*\xc8\x02\n" +
	"\x11ChassisFormFactor\x12#\n" +
	"\x1fCHASSIS_FORM_FACTOR_UNSPECIFIED\x10\x00\x12\x1a\n" +
	"\x16CHASSIS_FORM_FACTOR_1U\x10\x01\x12\x1a\n" +
	"\x16CHASSIS_FORM_FACTOR_2U\x10\x02\x12\x1a\n" +
	"\x16CHASSIS_FORM_FACTOR_3U\x10\x03\x12\x1a\n" +
	"\x16CHASSIS_FORM_FACTOR_4U\x10\x04\x12\x1a\n" +
	"\x16CHASSIS_FORM_FACTOR_5U\x10\x05\x12\x1a\n" +
	"\x16CHASSIS_FORM_FACTOR_6U\x10\x06\x12\"\n" +
	"\x1eCHASSIS_FORM_FACTOR_HALF_WIDTH\x10\a\x12\"\n" +
	"\x1eCHASSIS_FORM_FACTOR_FULL_WIDTH\x10\b\x12\x1e\n" +
	"\x1aCHASSIS_FORM_FACTOR_CUSTOM\x10\t*\xf0\x01\n" +
	"\rChassisStatus\x12\x1e\n" +
	"\x1aCHASSIS_STATUS_UNSPECIFIED\x10\x00\x12\x15\n" +
	"\x11CHASSIS_STATUS_ON\x10\x01\x12\x16\n" +
	"\x12CHASSIS_STATUS_OFF\x10\x02\x12 \n" +
	"\x1cCHASSIS_STATUS_TRANSITIONING\x10\x03\x12\x1a\n" +
	"\x16CHASSIS_STATUS_WARNING\x10\x04\x12\x1b\n" +
	"\x17CHASSIS_STATUS_CRITICAL\x10\x05\x12\x19\n" +
	"\x15CHASSIS_STATUS_FAILED\x10\x06\x12\x1a\n" +
	"\x16CHASSIS_STATUS_UNKNOWN\x10\a*\x92\x01\n" +
	"\x11ChassisTransition\x12\"\n" +
	"\x1eCHASSIS_TRANSITION_UNSPECIFIED\x10\x00\x12\x19\n" +
	"\x15CHASSIS_TRANSITION_ON\x10\x01\x12\x1a\n" +
	"\x16CHASSIS_TRANSITION_OFF\x10\x02\x12\"\n" +
	"\x1eCHASSIS_TRANSITION_POWER_CYCLE\x10\x03*\xd3\x01\n" +
	"\x16ChassisPowerSupplyType\x12)\n" +
	"%CHASSIS_POWER_SUPPLY_TYPE_UNSPECIFIED\x10\x00\x12 \n" +
	"\x1cCHASSIS_POWER_SUPPLY_TYPE_AC\x10\x01\x12 \n" +
	"\x1cCHASSIS_POWER_SUPPLY_TYPE_DC\x10\x02\x12!\n" +
	"\x1dCHASSIS_POWER_SUPPLY_TYPE_UPS\x10\x03\x12'\n" +
	"#CHASSIS_POWER_SUPPLY_TYPE_REDUNDANT\x10\x04*\xbf\x02\n" +
	"\x18ChassisPowerSupplyStatus\x12+\n" +
	"'CHASSIS_POWER_SUPPLY_STATUS_UNSPECIFIED\x10\x00\x12\"\n" +
	"\x1eCHASSIS_POWER_SUPPLY_STATUS_OK\x10\x01\x12'\n" +
	"#CHASSIS_POWER_SUPPLY_STATUS_WARNING\x10\x02\x12(\n" +
	"$CHASSIS_POWER_SUPPLY_STATUS_CRITICAL\x10\x03\x12&\n" +
	"\"CHASSIS_POWER_SUPPLY_STATUS_FAILED\x10\x04\x12+\n" +
	"'CHASSIS_POWER_SUPPLY_STATUS_NOT_PRESENT\x10\x05\x12*\n" +
	"&CHASSIS_POWER_SUPPLY_STATUS_INPUT_LOST\x10\x06*\xa8\x01\n" +
	"\x0fChassisLEDState\x12!\n" +
	"\x1dCHASSIS_LED_STATE_UNSPECIFIED\x10\x00\x12\x19\n" +
	"\x15CHASSIS_LED_STATE_OFF\x10\x01\x12\x18\n" +
	"\x14CHASSIS_LED_STATE_ON\x10\x02\x12\x1e\n" +
	"\x1aCHASSIS_LED_STATE_BLINKING\x10\x03\x12\x1d\n" +
	"\x19CHASSIS_LED_STATE_UNKNOWN\x10\x04*\xc6\x01\n" +
	"\x0eChassisLEDType\x12 \n" +
	"\x1cCHASSIS_LED_TYPE_UNSPECIFIED\x10\x00\x12\x1a\n" +
	"\x16CHASSIS_LED_TYPE_POWER\x10\x01\x12\x1a\n" +
	"\x16CHASSIS_LED_TYPE_FAULT\x10\x02\x12\x1d\n" +
	"\x19CHASSIS_LED_TYPE_IDENTIFY\x10\x03\x12\x1b\n" +
	"\x17CHASSIS_LED_TYPE_STATUS\x10\x04\x12\x1e\n" +
	"\x1aCHASSIS_LED_TYPE_HEARTBEAT\x10\x05*\xd3\x02\n" +
	"\x14ChassisControlAction\x12&\n" +
	"\"CHASSIS_CONTROL_ACTION_UNSPECIFIED\x10\x00\x12#\n" +
	"\x1fCHASSIS_CONTROL_ACTION_POWER_ON\x10\x01\x12$\n" +
	" CHASSIS_CONTROL_ACTION_POWER_OFF\x10\x02\x12&\n" +
	"\"CHASSIS_CONTROL_ACTION_POWER_CYCLE\x10\x03\x12 \n" +
	"\x1cCHASSIS_CONTROL_ACTION_RESET\x10\x04\x12&\n" +
	"\"CHASSIS_CONTROL_ACTION_IDENTIFY_ON\x10\x05\x12'\n" +
	"#CHASSIS_CONTROL_ACTION_IDENTIFY_OFF\x10\x06\x12-\n" +
	")CHASSIS_CONTROL_ACTION_EMERGENCY_SHUTDOWN\x10\aB\xbf\x01\n" +
	"\x13com.schema.v1alpha1B\fChassisProtoP\x01Z=github.com/u-bmc/u-bmc/api/gen/schema/v1alpha1;schemav1alpha1\xa2\x02\x03SXX\xaa\x02\x0fSchema.V1alpha1\xca\x02\x0fSchema\\V1alpha1\xe2\x02\x1bSchema\\V1alpha1\\GPBMetadata\xea\x02\x10Schema::V1alpha1b\x06proto3"

var (
	file_schema_v1alpha1_chassis_proto_rawDescOnce sync.Once
	file_schema_v1alpha1_chassis_proto_rawDescData []byte
)

func file_schema_v1alpha1_chassis_proto_rawDescGZIP() []byte {
	file_schema_v1alpha1_chassis_proto_rawDescOnce.Do(func() {
		file_schema_v1alpha1_chassis_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_schema_v1alpha1_chassis_proto_rawDesc), len(file_schema_v1alpha1_chassis_proto_rawDesc)))
	})
	return file_schema_v1alpha1_chassis_proto_rawDescData
}

var file_schema_v1alpha1_chassis_proto_enumTypes = make([]protoimpl.EnumInfo, 9)
var file_schema_v1alpha1_chassis_proto_msgTypes = make([]protoimpl.MessageInfo, 25)
var file_schema_v1alpha1_chassis_proto_goTypes = []any{
	(ChassisType)(0),                   // 0: schema.v1alpha1.ChassisType
	(ChassisFormFactor)(0),             // 1: schema.v1alpha1.ChassisFormFactor
	(ChassisStatus)(0),                 // 2: schema.v1alpha1.ChassisStatus
	(ChassisTransition)(0),             // 3: schema.v1alpha1.ChassisTransition
	(ChassisPowerSupplyType)(0),        // 4: schema.v1alpha1.ChassisPowerSupplyType
	(ChassisPowerSupplyStatus)(0),      // 5: schema.v1alpha1.ChassisPowerSupplyStatus
	(ChassisLEDState)(0),               // 6: schema.v1alpha1.ChassisLEDState
	(ChassisLEDType)(0),                // 7: schema.v1alpha1.ChassisLEDType
	(ChassisControlAction)(0),          // 8: schema.v1alpha1.ChassisControlAction
	(*Chassis)(nil),                    // 9: schema.v1alpha1.Chassis
	(*ChassisPowerInfo)(nil),           // 10: schema.v1alpha1.ChassisPowerInfo
	(*ChassisPowerSupply)(nil),         // 11: schema.v1alpha1.ChassisPowerSupply
	(*ChassisPowerDistribution)(nil),   // 12: schema.v1alpha1.ChassisPowerDistribution
	(*PowerCircuit)(nil),               // 13: schema.v1alpha1.PowerCircuit
	(*ChassisPowerRedundancy)(nil),     // 14: schema.v1alpha1.ChassisPowerRedundancy
	(*ChassisPowerBudget)(nil),         // 15: schema.v1alpha1.ChassisPowerBudget
	(*ChassisLED)(nil),                 // 16: schema.v1alpha1.ChassisLED
	(*ChassisIntrusion)(nil),           // 17: schema.v1alpha1.ChassisIntrusion
	(*ExpansionBay)(nil),               // 18: schema.v1alpha1.ExpansionBay
	(*Slot)(nil),                       // 19: schema.v1alpha1.Slot
	(*GetChassisRequest)(nil),          // 20: schema.v1alpha1.GetChassisRequest
	(*GetChassisResponse)(nil),         // 21: schema.v1alpha1.GetChassisResponse
	(*ListChassisRequest)(nil),         // 22: schema.v1alpha1.ListChassisRequest
	(*ListChassisResponse)(nil),        // 23: schema.v1alpha1.ListChassisResponse
	(*UpdateChassisRequest)(nil),       // 24: schema.v1alpha1.UpdateChassisRequest
	(*UpdateChassisResponse)(nil),      // 25: schema.v1alpha1.UpdateChassisResponse
	(*ChassisChangeStateRequest)(nil),  // 26: schema.v1alpha1.ChassisChangeStateRequest
	(*ChassisChangeStateResponse)(nil), // 27: schema.v1alpha1.ChassisChangeStateResponse
	(*ChassisControlRequest)(nil),      // 28: schema.v1alpha1.ChassisControlRequest
	(*ChassisControlResponse)(nil),     // 29: schema.v1alpha1.ChassisControlResponse
	nil,                                // 30: schema.v1alpha1.Chassis.MetadataEntry
	nil,                                // 31: schema.v1alpha1.ChassisChangeStateRequest.MetadataEntry
	nil,                                // 32: schema.v1alpha1.ChassisChangeStateResponse.MetadataEntry
	nil,                                // 33: schema.v1alpha1.ChassisControlRequest.ParametersEntry
	(*AssetInfo)(nil),                  // 34: schema.v1alpha1.AssetInfo
	(*Location)(nil),                   // 35: schema.v1alpha1.Location
	(*PhysicalDimensions)(nil),         // 36: schema.v1alpha1.PhysicalDimensions
	(*Sensor)(nil),                     // 37: schema.v1alpha1.Sensor
	(*ThermalZone)(nil),                // 38: schema.v1alpha1.ThermalZone
	(*CoolingDevice)(nil),              // 39: schema.v1alpha1.CoolingDevice
	(*timestamppb.Timestamp)(nil),      // 40: google.protobuf.Timestamp
	(*fieldmaskpb.FieldMask)(nil),      // 41: google.protobuf.FieldMask
}
var file_schema_v1alpha1_chassis_proto_depIdxs = []int32{
	34, // 0: schema.v1alpha1.Chassis.asset:type_name -> schema.v1alpha1.AssetInfo
	0,  // 1: schema.v1alpha1.Chassis.type:type_name -> schema.v1alpha1.ChassisType
	1,  // 2: schema.v1alpha1.Chassis.form_factor:type_name -> schema.v1alpha1.ChassisFormFactor
	2,  // 3: schema.v1alpha1.Chassis.status:type_name -> schema.v1alpha1.ChassisStatus
	3,  // 4: schema.v1alpha1.Chassis.requested_transition:type_name -> schema.v1alpha1.ChassisTransition
	35, // 5: schema.v1alpha1.Chassis.location:type_name -> schema.v1alpha1.Location
	36, // 6: schema.v1alpha1.Chassis.dimensions:type_name -> schema.v1alpha1.PhysicalDimensions
	10, // 7: schema.v1alpha1.Chassis.power_info:type_name -> schema.v1alpha1.ChassisPowerInfo
	37, // 8: schema.v1alpha1.Chassis.sensors:type_name -> schema.v1alpha1.Sensor
	38, // 9: schema.v1alpha1.Chassis.thermal_zones:type_name -> schema.v1alpha1.ThermalZone
	39, // 10: schema.v1alpha1.Chassis.cooling_devices:type_name -> schema.v1alpha1.CoolingDevice
	16, // 11: schema.v1alpha1.Chassis.leds:type_name -> schema.v1alpha1.ChassisLED
	17, // 12: schema.v1alpha1.Chassis.intrusion:type_name -> schema.v1alpha1.ChassisIntrusion
	34, // 13: schema.v1alpha1.Chassis.contained_assets:type_name -> schema.v1alpha1.AssetInfo
	40, // 14: schema.v1alpha1.Chassis.updated_at:type_name -> google.protobuf.Timestamp
	30, // 15: schema.v1alpha1.Chassis.metadata:type_name -> schema.v1alpha1.Chassis.MetadataEntry
	11, // 16: schema.v1alpha1.ChassisPowerInfo.power_supplies:type_name -> schema.v1alpha1.ChassisPowerSupply
	12, // 17: schema.v1alpha1.ChassisPowerInfo.power_distribution:type_name -> schema.v1alpha1.ChassisPowerDistribution
	14, // 18: schema.v1alpha1.ChassisPowerInfo.redundancy:type_name -> schema.v1alpha1.ChassisPowerRedundancy
	15, // 19: schema.v1alpha1.ChassisPowerInfo.power_budgets:type_name -> schema.v1alpha1.ChassisPowerBudget
	34, // 20: schema.v1alpha1.ChassisPowerSupply.asset:type_name -> schema.v1alpha1.AssetInfo
	4,  // 21: schema.v1alpha1.ChassisPowerSupply.type:type_name -> schema.v1alpha1.ChassisPowerSupplyType
	5,  // 22: schema.v1alpha1.ChassisPowerSupply.status:type_name -> schema.v1alpha1.ChassisPowerSupplyStatus
	35, // 23: schema.v1alpha1.ChassisPowerSupply.location:type_name -> schema.v1alpha1.Location
	13, // 24: schema.v1alpha1.ChassisPowerDistribution.circuits:type_name -> schema.v1alpha1.PowerCircuit
	7,  // 25: schema.v1alpha1.ChassisLED.type:type_name -> schema.v1alpha1.ChassisLEDType
	6,  // 26: schema.v1alpha1.ChassisLED.state:type_name -> schema.v1alpha1.ChassisLEDState
	40, // 27: schema.v1alpha1.ChassisIntrusion.last_intrusion:type_name -> google.protobuf.Timestamp
	35, // 28: schema.v1alpha1.ExpansionBay.location:type_name -> schema.v1alpha1.Location
	35, // 29: schema.v1alpha1.Slot.location:type_name -> schema.v1alpha1.Location
	0,  // 30: schema.v1alpha1.GetChassisRequest.type:type_name -> schema.v1alpha1.ChassisType
	2,  // 31: schema.v1alpha1.GetChassisRequest.status:type_name -> schema.v1alpha1.ChassisStatus
	35, // 32: schema.v1alpha1.GetChassisRequest.location:type_name -> schema.v1alpha1.Location
	41, // 33: schema.v1alpha1.GetChassisRequest.field_mask:type_name -> google.protobuf.FieldMask
	9,  // 34: schema.v1alpha1.GetChassisResponse.chassis:type_name -> schema.v1alpha1.Chassis
	0,  // 35: schema.v1alpha1.ListChassisRequest.type:type_name -> schema.v1alpha1.ChassisType
	2,  // 36: schema.v1alpha1.ListChassisRequest.status:type_name -> schema.v1alpha1.ChassisStatus
	41, // 37: schema.v1alpha1.ListChassisRequest.field_mask:type_name -> google.protobuf.FieldMask
	9,  // 38: schema.v1alpha1.ListChassisResponse.chassis:type_name -> schema.v1alpha1.Chassis
	9,  // 39: schema.v1alpha1.UpdateChassisRequest.chassis:type_name -> schema.v1alpha1.Chassis
	41, // 40: schema.v1alpha1.UpdateChassisRequest.field_mask:type_name -> google.protobuf.FieldMask
	9,  // 41: schema.v1alpha1.UpdateChassisResponse.chassis:type_name -> schema.v1alpha1.Chassis
	3,  // 42: schema.v1alpha1.ChassisChangeStateRequest.transition:type_name -> schema.v1alpha1.ChassisTransition
	41, // 43: schema.v1alpha1.ChassisChangeStateRequest.field_mask:type_name -> google.protobuf.FieldMask
	31, // 44: schema.v1alpha1.ChassisChangeStateRequest.metadata:type_name -> schema.v1alpha1.ChassisChangeStateRequest.MetadataEntry
	2,  // 45: schema.v1alpha1.ChassisChangeStateResponse.status:type_name -> schema.v1alpha1.ChassisStatus
	40, // 46: schema.v1alpha1.ChassisChangeStateResponse.estimated_completion:type_name -> google.protobuf.Timestamp
	32, // 47: schema.v1alpha1.ChassisChangeStateResponse.metadata:type_name -> schema.v1alpha1.ChassisChangeStateResponse.MetadataEntry
	8,  // 48: schema.v1alpha1.ChassisControlRequest.action:type_name -> schema.v1alpha1.ChassisControlAction
	41, // 49: schema.v1alpha1.ChassisControlRequest.field_mask:type_name -> google.protobuf.FieldMask
	33, // 50: schema.v1alpha1.ChassisControlRequest.parameters:type_name -> schema.v1alpha1.ChassisControlRequest.ParametersEntry
	2,  // 51: schema.v1alpha1.ChassisControlResponse.status:type_name -> schema.v1alpha1.ChassisStatus
	52, // [52:52] is the sub-list for method output_type
	52, // [52:52] is the sub-list for method input_type
	52, // [52:52] is the sub-list for extension type_name
	52, // [52:52] is the sub-list for extension extendee
	0,  // [0:52] is the sub-list for field type_name
}

func init() { file_schema_v1alpha1_chassis_proto_init() }
func file_schema_v1alpha1_chassis_proto_init() {
	if File_schema_v1alpha1_chassis_proto != nil {
		return
	}
	file_schema_v1alpha1_asset_proto_init()
	file_schema_v1alpha1_location_proto_init()
	file_schema_v1alpha1_sensor_proto_init()
	file_schema_v1alpha1_specs_proto_init()
	file_schema_v1alpha1_thermal_proto_init()
	file_schema_v1alpha1_chassis_proto_msgTypes[0].OneofWrappers = []any{}
	file_schema_v1alpha1_chassis_proto_msgTypes[1].OneofWrappers = []any{}
	file_schema_v1alpha1_chassis_proto_msgTypes[2].OneofWrappers = []any{}
	file_schema_v1alpha1_chassis_proto_msgTypes[3].OneofWrappers = []any{}
	file_schema_v1alpha1_chassis_proto_msgTypes[4].OneofWrappers = []any{}
	file_schema_v1alpha1_chassis_proto_msgTypes[5].OneofWrappers = []any{}
	file_schema_v1alpha1_chassis_proto_msgTypes[6].OneofWrappers = []any{}
	file_schema_v1alpha1_chassis_proto_msgTypes[7].OneofWrappers = []any{}
	file_schema_v1alpha1_chassis_proto_msgTypes[8].OneofWrappers = []any{}
	file_schema_v1alpha1_chassis_proto_msgTypes[9].OneofWrappers = []any{}
	file_schema_v1alpha1_chassis_proto_msgTypes[10].OneofWrappers = []any{}
	file_schema_v1alpha1_chassis_proto_msgTypes[11].OneofWrappers = []any{
		(*GetChassisRequest_Name)(nil),
		(*GetChassisRequest_Type)(nil),
		(*GetChassisRequest_Status)(nil),
		(*GetChassisRequest_Location)(nil),
	}
	file_schema_v1alpha1_chassis_proto_msgTypes[13].OneofWrappers = []any{}
	file_schema_v1alpha1_chassis_proto_msgTypes[14].OneofWrappers = []any{}
	file_schema_v1alpha1_chassis_proto_msgTypes[17].OneofWrappers = []any{}
	file_schema_v1alpha1_chassis_proto_msgTypes[18].OneofWrappers = []any{}
	file_schema_v1alpha1_chassis_proto_msgTypes[19].OneofWrappers = []any{}
	file_schema_v1alpha1_chassis_proto_msgTypes[20].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_schema_v1alpha1_chassis_proto_rawDesc), len(file_schema_v1alpha1_chassis_proto_rawDesc)),
			NumEnums:      9,
			NumMessages:   25,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_schema_v1alpha1_chassis_proto_goTypes,
		DependencyIndexes: file_schema_v1alpha1_chassis_proto_depIdxs,
		EnumInfos:         file_schema_v1alpha1_chassis_proto_enumTypes,
		MessageInfos:      file_schema_v1alpha1_chassis_proto_msgTypes,
	}.Build()
	File_schema_v1alpha1_chassis_proto = out.File
	file_schema_v1alpha1_chassis_proto_goTypes = nil
	file_schema_v1alpha1_chassis_proto_depIdxs = nil
}
