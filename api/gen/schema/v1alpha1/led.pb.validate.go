// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: schema/v1alpha1/led.proto

package schemav1alpha1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on LEDControlRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *LEDControlRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LEDControlRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// LEDControlRequestMultiError, or nil if none found.
func (m *LEDControlRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *LEDControlRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ComponentName

	// no validation rules for LedType

	// no validation rules for LedState

	if m.Brightness != nil {
		// no validation rules for Brightness
	}

	if m.BlinkIntervalMs != nil {
		// no validation rules for BlinkIntervalMs
	}

	if len(errors) > 0 {
		return LEDControlRequestMultiError(errors)
	}

	return nil
}

// LEDControlRequestMultiError is an error wrapping multiple validation errors
// returned by LEDControlRequest.ValidateAll() if the designated constraints
// aren't met.
type LEDControlRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LEDControlRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LEDControlRequestMultiError) AllErrors() []error { return m }

// LEDControlRequestValidationError is the validation error returned by
// LEDControlRequest.Validate if the designated constraints aren't met.
type LEDControlRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LEDControlRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LEDControlRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LEDControlRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LEDControlRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LEDControlRequestValidationError) ErrorName() string {
	return "LEDControlRequestValidationError"
}

// Error satisfies the builtin error interface
func (e LEDControlRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLEDControlRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LEDControlRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LEDControlRequestValidationError{}

// Validate checks the field values on LEDControlResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *LEDControlResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LEDControlResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// LEDControlResponseMultiError, or nil if none found.
func (m *LEDControlResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *LEDControlResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CurrentState

	// no validation rules for Message

	// no validation rules for Success

	if len(errors) > 0 {
		return LEDControlResponseMultiError(errors)
	}

	return nil
}

// LEDControlResponseMultiError is an error wrapping multiple validation errors
// returned by LEDControlResponse.ValidateAll() if the designated constraints
// aren't met.
type LEDControlResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LEDControlResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LEDControlResponseMultiError) AllErrors() []error { return m }

// LEDControlResponseValidationError is the validation error returned by
// LEDControlResponse.Validate if the designated constraints aren't met.
type LEDControlResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LEDControlResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LEDControlResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LEDControlResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LEDControlResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LEDControlResponseValidationError) ErrorName() string {
	return "LEDControlResponseValidationError"
}

// Error satisfies the builtin error interface
func (e LEDControlResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLEDControlResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LEDControlResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LEDControlResponseValidationError{}

// Validate checks the field values on LEDStatusRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *LEDStatusRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LEDStatusRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// LEDStatusRequestMultiError, or nil if none found.
func (m *LEDStatusRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *LEDStatusRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ComponentName

	// no validation rules for LedType

	if len(errors) > 0 {
		return LEDStatusRequestMultiError(errors)
	}

	return nil
}

// LEDStatusRequestMultiError is an error wrapping multiple validation errors
// returned by LEDStatusRequest.ValidateAll() if the designated constraints
// aren't met.
type LEDStatusRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LEDStatusRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LEDStatusRequestMultiError) AllErrors() []error { return m }

// LEDStatusRequestValidationError is the validation error returned by
// LEDStatusRequest.Validate if the designated constraints aren't met.
type LEDStatusRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LEDStatusRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LEDStatusRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LEDStatusRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LEDStatusRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LEDStatusRequestValidationError) ErrorName() string { return "LEDStatusRequestValidationError" }

// Error satisfies the builtin error interface
func (e LEDStatusRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLEDStatusRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LEDStatusRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LEDStatusRequestValidationError{}

// Validate checks the field values on LEDStatusResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *LEDStatusResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LEDStatusResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// LEDStatusResponseMultiError, or nil if none found.
func (m *LEDStatusResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *LEDStatusResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CurrentState

	// no validation rules for IsBlinking

	// no validation rules for BlinkIntervalMs

	// no validation rules for Controllable

	if m.Brightness != nil {
		// no validation rules for Brightness
	}

	if m.HardwareInfo != nil {
		// no validation rules for HardwareInfo
	}

	if len(errors) > 0 {
		return LEDStatusResponseMultiError(errors)
	}

	return nil
}

// LEDStatusResponseMultiError is an error wrapping multiple validation errors
// returned by LEDStatusResponse.ValidateAll() if the designated constraints
// aren't met.
type LEDStatusResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LEDStatusResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LEDStatusResponseMultiError) AllErrors() []error { return m }

// LEDStatusResponseValidationError is the validation error returned by
// LEDStatusResponse.Validate if the designated constraints aren't met.
type LEDStatusResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LEDStatusResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LEDStatusResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LEDStatusResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LEDStatusResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LEDStatusResponseValidationError) ErrorName() string {
	return "LEDStatusResponseValidationError"
}

// Error satisfies the builtin error interface
func (e LEDStatusResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLEDStatusResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LEDStatusResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LEDStatusResponseValidationError{}

// Validate checks the field values on PowerOperationResult with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PowerOperationResult) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PowerOperationResult with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PowerOperationResultMultiError, or nil if none found.
func (m *PowerOperationResult) ValidateAll() error {
	return m.validate(true)
}

func (m *PowerOperationResult) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ComponentName

	// no validation rules for Operation

	// no validation rules for Success

	// no validation rules for ErrorMessage

	if all {
		switch v := interface{}(m.GetCompletedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PowerOperationResultValidationError{
					field:  "CompletedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PowerOperationResultValidationError{
					field:  "CompletedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCompletedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PowerOperationResultValidationError{
				field:  "CompletedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for DurationMs

	if m.PreviousState != nil {
		// no validation rules for PreviousState
	}

	if m.CurrentState != nil {
		// no validation rules for CurrentState
	}

	if len(errors) > 0 {
		return PowerOperationResultMultiError(errors)
	}

	return nil
}

// PowerOperationResultMultiError is an error wrapping multiple validation
// errors returned by PowerOperationResult.ValidateAll() if the designated
// constraints aren't met.
type PowerOperationResultMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PowerOperationResultMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PowerOperationResultMultiError) AllErrors() []error { return m }

// PowerOperationResultValidationError is the validation error returned by
// PowerOperationResult.Validate if the designated constraints aren't met.
type PowerOperationResultValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PowerOperationResultValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PowerOperationResultValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PowerOperationResultValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PowerOperationResultValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PowerOperationResultValidationError) ErrorName() string {
	return "PowerOperationResultValidationError"
}

// Error satisfies the builtin error interface
func (e PowerOperationResultValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPowerOperationResult.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PowerOperationResultValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PowerOperationResultValidationError{}

// Validate checks the field values on StateTransitionNotification with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *StateTransitionNotification) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StateTransitionNotification with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// StateTransitionNotificationMultiError, or nil if none found.
func (m *StateTransitionNotification) ValidateAll() error {
	return m.validate(true)
}

func (m *StateTransitionNotification) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ComponentName

	// no validation rules for ComponentType

	// no validation rules for PreviousState

	// no validation rules for CurrentState

	// no validation rules for Trigger

	// no validation rules for Success

	if all {
		switch v := interface{}(m.GetChangedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, StateTransitionNotificationValidationError{
					field:  "ChangedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, StateTransitionNotificationValidationError{
					field:  "ChangedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetChangedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return StateTransitionNotificationValidationError{
				field:  "ChangedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for TransitionDurationMs

	if m.Context != nil {
		// no validation rules for Context
	}

	if len(errors) > 0 {
		return StateTransitionNotificationMultiError(errors)
	}

	return nil
}

// StateTransitionNotificationMultiError is an error wrapping multiple
// validation errors returned by StateTransitionNotification.ValidateAll() if
// the designated constraints aren't met.
type StateTransitionNotificationMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StateTransitionNotificationMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StateTransitionNotificationMultiError) AllErrors() []error { return m }

// StateTransitionNotificationValidationError is the validation error returned
// by StateTransitionNotification.Validate if the designated constraints
// aren't met.
type StateTransitionNotificationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StateTransitionNotificationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StateTransitionNotificationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StateTransitionNotificationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StateTransitionNotificationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StateTransitionNotificationValidationError) ErrorName() string {
	return "StateTransitionNotificationValidationError"
}

// Error satisfies the builtin error interface
func (e StateTransitionNotificationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStateTransitionNotification.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StateTransitionNotificationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StateTransitionNotificationValidationError{}

// Validate checks the field values on PowerControlRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PowerControlRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PowerControlRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PowerControlRequestMultiError, or nil if none found.
func (m *PowerControlRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *PowerControlRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ComponentName

	// no validation rules for Action

	if m.TimeoutMs != nil {
		// no validation rules for TimeoutMs
	}

	if m.Force != nil {
		// no validation rules for Force
	}

	if m.RequestId != nil {
		// no validation rules for RequestId
	}

	if len(errors) > 0 {
		return PowerControlRequestMultiError(errors)
	}

	return nil
}

// PowerControlRequestMultiError is an error wrapping multiple validation
// errors returned by PowerControlRequest.ValidateAll() if the designated
// constraints aren't met.
type PowerControlRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PowerControlRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PowerControlRequestMultiError) AllErrors() []error { return m }

// PowerControlRequestValidationError is the validation error returned by
// PowerControlRequest.Validate if the designated constraints aren't met.
type PowerControlRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PowerControlRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PowerControlRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PowerControlRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PowerControlRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PowerControlRequestValidationError) ErrorName() string {
	return "PowerControlRequestValidationError"
}

// Error satisfies the builtin error interface
func (e PowerControlRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPowerControlRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PowerControlRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PowerControlRequestValidationError{}

// Validate checks the field values on PowerControlResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PowerControlResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PowerControlResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PowerControlResponseMultiError, or nil if none found.
func (m *PowerControlResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *PowerControlResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Accepted

	// no validation rules for Message

	if m.CurrentState != nil {
		// no validation rules for CurrentState
	}

	if m.EstimatedCompletion != nil {

		if all {
			switch v := interface{}(m.GetEstimatedCompletion()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PowerControlResponseValidationError{
						field:  "EstimatedCompletion",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PowerControlResponseValidationError{
						field:  "EstimatedCompletion",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetEstimatedCompletion()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PowerControlResponseValidationError{
					field:  "EstimatedCompletion",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.RequestId != nil {
		// no validation rules for RequestId
	}

	if len(errors) > 0 {
		return PowerControlResponseMultiError(errors)
	}

	return nil
}

// PowerControlResponseMultiError is an error wrapping multiple validation
// errors returned by PowerControlResponse.ValidateAll() if the designated
// constraints aren't met.
type PowerControlResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PowerControlResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PowerControlResponseMultiError) AllErrors() []error { return m }

// PowerControlResponseValidationError is the validation error returned by
// PowerControlResponse.Validate if the designated constraints aren't met.
type PowerControlResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PowerControlResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PowerControlResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PowerControlResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PowerControlResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PowerControlResponseValidationError) ErrorName() string {
	return "PowerControlResponseValidationError"
}

// Error satisfies the builtin error interface
func (e PowerControlResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPowerControlResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PowerControlResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PowerControlResponseValidationError{}
