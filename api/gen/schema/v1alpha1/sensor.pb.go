// SPDX-License-Identifier: BSD-3-Clause

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: schema/v1alpha1/sensor.proto

package schemav1alpha1

import (
	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// SensorContext defines the physical context of the sensor
type SensorContext int32

const (
	SensorContext_SENSOR_CONTEXT_UNSPECIFIED SensorContext = 0
	SensorContext_SENSOR_CONTEXT_TEMPERATURE SensorContext = 1
	SensorContext_SENSOR_CONTEXT_VOLTAGE     SensorContext = 2
	SensorContext_SENSOR_CONTEXT_CURRENT     SensorContext = 3
	SensorContext_SENSOR_CONTEXT_FAN         SensorContext = 4
	SensorContext_SENSOR_CONTEXT_POWER       SensorContext = 5
	SensorContext_SENSOR_CONTEXT_ENERGY      SensorContext = 6
	SensorContext_SENSOR_CONTEXT_PRESSURE    SensorContext = 7
	SensorContext_SENSOR_CONTEXT_HUMIDITY    SensorContext = 8
	SensorContext_SENSOR_CONTEXT_ALTITUDE    SensorContext = 9
)

// Enum value maps for SensorContext.
var (
	SensorContext_name = map[int32]string{
		0: "SENSOR_CONTEXT_UNSPECIFIED",
		1: "SENSOR_CONTEXT_TEMPERATURE",
		2: "SENSOR_CONTEXT_VOLTAGE",
		3: "SENSOR_CONTEXT_CURRENT",
		4: "SENSOR_CONTEXT_FAN",
		5: "SENSOR_CONTEXT_POWER",
		6: "SENSOR_CONTEXT_ENERGY",
		7: "SENSOR_CONTEXT_PRESSURE",
		8: "SENSOR_CONTEXT_HUMIDITY",
		9: "SENSOR_CONTEXT_ALTITUDE",
	}
	SensorContext_value = map[string]int32{
		"SENSOR_CONTEXT_UNSPECIFIED": 0,
		"SENSOR_CONTEXT_TEMPERATURE": 1,
		"SENSOR_CONTEXT_VOLTAGE":     2,
		"SENSOR_CONTEXT_CURRENT":     3,
		"SENSOR_CONTEXT_FAN":         4,
		"SENSOR_CONTEXT_POWER":       5,
		"SENSOR_CONTEXT_ENERGY":      6,
		"SENSOR_CONTEXT_PRESSURE":    7,
		"SENSOR_CONTEXT_HUMIDITY":    8,
		"SENSOR_CONTEXT_ALTITUDE":    9,
	}
)

func (x SensorContext) Enum() *SensorContext {
	p := new(SensorContext)
	*p = x
	return p
}

func (x SensorContext) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SensorContext) Descriptor() protoreflect.EnumDescriptor {
	return file_schema_v1alpha1_sensor_proto_enumTypes[0].Descriptor()
}

func (SensorContext) Type() protoreflect.EnumType {
	return &file_schema_v1alpha1_sensor_proto_enumTypes[0]
}

func (x SensorContext) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SensorContext.Descriptor instead.
func (SensorContext) EnumDescriptor() ([]byte, []int) {
	return file_schema_v1alpha1_sensor_proto_rawDescGZIP(), []int{0}
}

// SensorStatus represents the operational status of the sensor
type SensorStatus int32

const (
	SensorStatus_SENSOR_STATUS_UNSPECIFIED SensorStatus = 0
	SensorStatus_SENSOR_STATUS_ENABLED     SensorStatus = 1
	SensorStatus_SENSOR_STATUS_DISABLED    SensorStatus = 2
	SensorStatus_SENSOR_STATUS_ERROR       SensorStatus = 3
	SensorStatus_SENSOR_STATUS_NOT_PRESENT SensorStatus = 4
	SensorStatus_SENSOR_STATUS_UNKNOWN     SensorStatus = 5
)

// Enum value maps for SensorStatus.
var (
	SensorStatus_name = map[int32]string{
		0: "SENSOR_STATUS_UNSPECIFIED",
		1: "SENSOR_STATUS_ENABLED",
		2: "SENSOR_STATUS_DISABLED",
		3: "SENSOR_STATUS_ERROR",
		4: "SENSOR_STATUS_NOT_PRESENT",
		5: "SENSOR_STATUS_UNKNOWN",
	}
	SensorStatus_value = map[string]int32{
		"SENSOR_STATUS_UNSPECIFIED": 0,
		"SENSOR_STATUS_ENABLED":     1,
		"SENSOR_STATUS_DISABLED":    2,
		"SENSOR_STATUS_ERROR":       3,
		"SENSOR_STATUS_NOT_PRESENT": 4,
		"SENSOR_STATUS_UNKNOWN":     5,
	}
)

func (x SensorStatus) Enum() *SensorStatus {
	p := new(SensorStatus)
	*p = x
	return p
}

func (x SensorStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SensorStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_schema_v1alpha1_sensor_proto_enumTypes[1].Descriptor()
}

func (SensorStatus) Type() protoreflect.EnumType {
	return &file_schema_v1alpha1_sensor_proto_enumTypes[1]
}

func (x SensorStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SensorStatus.Descriptor instead.
func (SensorStatus) EnumDescriptor() ([]byte, []int) {
	return file_schema_v1alpha1_sensor_proto_rawDescGZIP(), []int{1}
}

// SensorUnit defines the unit of measurement for sensor readings
type SensorUnit int32

const (
	SensorUnit_SENSOR_UNIT_UNSPECIFIED SensorUnit = 0
	SensorUnit_SENSOR_UNIT_CELSIUS     SensorUnit = 1
	SensorUnit_SENSOR_UNIT_FAHRENHEIT  SensorUnit = 2
	SensorUnit_SENSOR_UNIT_KELVIN      SensorUnit = 3
	SensorUnit_SENSOR_UNIT_VOLTS       SensorUnit = 4
	SensorUnit_SENSOR_UNIT_AMPS        SensorUnit = 5
	SensorUnit_SENSOR_UNIT_WATTS       SensorUnit = 6
	SensorUnit_SENSOR_UNIT_JOULES      SensorUnit = 7
	SensorUnit_SENSOR_UNIT_PASCALS     SensorUnit = 8
	SensorUnit_SENSOR_UNIT_PERCENT     SensorUnit = 9
	SensorUnit_SENSOR_UNIT_RPM         SensorUnit = 10
	SensorUnit_SENSOR_UNIT_HERTZ       SensorUnit = 11
)

// Enum value maps for SensorUnit.
var (
	SensorUnit_name = map[int32]string{
		0:  "SENSOR_UNIT_UNSPECIFIED",
		1:  "SENSOR_UNIT_CELSIUS",
		2:  "SENSOR_UNIT_FAHRENHEIT",
		3:  "SENSOR_UNIT_KELVIN",
		4:  "SENSOR_UNIT_VOLTS",
		5:  "SENSOR_UNIT_AMPS",
		6:  "SENSOR_UNIT_WATTS",
		7:  "SENSOR_UNIT_JOULES",
		8:  "SENSOR_UNIT_PASCALS",
		9:  "SENSOR_UNIT_PERCENT",
		10: "SENSOR_UNIT_RPM",
		11: "SENSOR_UNIT_HERTZ",
	}
	SensorUnit_value = map[string]int32{
		"SENSOR_UNIT_UNSPECIFIED": 0,
		"SENSOR_UNIT_CELSIUS":     1,
		"SENSOR_UNIT_FAHRENHEIT":  2,
		"SENSOR_UNIT_KELVIN":      3,
		"SENSOR_UNIT_VOLTS":       4,
		"SENSOR_UNIT_AMPS":        5,
		"SENSOR_UNIT_WATTS":       6,
		"SENSOR_UNIT_JOULES":      7,
		"SENSOR_UNIT_PASCALS":     8,
		"SENSOR_UNIT_PERCENT":     9,
		"SENSOR_UNIT_RPM":         10,
		"SENSOR_UNIT_HERTZ":       11,
	}
)

func (x SensorUnit) Enum() *SensorUnit {
	p := new(SensorUnit)
	*p = x
	return p
}

func (x SensorUnit) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SensorUnit) Descriptor() protoreflect.EnumDescriptor {
	return file_schema_v1alpha1_sensor_proto_enumTypes[2].Descriptor()
}

func (SensorUnit) Type() protoreflect.EnumType {
	return &file_schema_v1alpha1_sensor_proto_enumTypes[2]
}

func (x SensorUnit) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SensorUnit.Descriptor instead.
func (SensorUnit) EnumDescriptor() ([]byte, []int) {
	return file_schema_v1alpha1_sensor_proto_rawDescGZIP(), []int{2}
}

// SensorState represents the discrete states a sensor can be in
type SensorState int32

const (
	SensorState_SENSOR_STATE_UNSPECIFIED   SensorState = 0
	SensorState_SENSOR_STATE_NORMAL        SensorState = 1
	SensorState_SENSOR_STATE_FAULT         SensorState = 2
	SensorState_SENSOR_STATE_WARNING       SensorState = 3
	SensorState_SENSOR_STATE_CRITICAL      SensorState = 4
	SensorState_SENSOR_STATE_UNKNOWN       SensorState = 5
	SensorState_SENSOR_STATE_NOT_AVAILABLE SensorState = 6
)

// Enum value maps for SensorState.
var (
	SensorState_name = map[int32]string{
		0: "SENSOR_STATE_UNSPECIFIED",
		1: "SENSOR_STATE_NORMAL",
		2: "SENSOR_STATE_FAULT",
		3: "SENSOR_STATE_WARNING",
		4: "SENSOR_STATE_CRITICAL",
		5: "SENSOR_STATE_UNKNOWN",
		6: "SENSOR_STATE_NOT_AVAILABLE",
	}
	SensorState_value = map[string]int32{
		"SENSOR_STATE_UNSPECIFIED":   0,
		"SENSOR_STATE_NORMAL":        1,
		"SENSOR_STATE_FAULT":         2,
		"SENSOR_STATE_WARNING":       3,
		"SENSOR_STATE_CRITICAL":      4,
		"SENSOR_STATE_UNKNOWN":       5,
		"SENSOR_STATE_NOT_AVAILABLE": 6,
	}
)

func (x SensorState) Enum() *SensorState {
	p := new(SensorState)
	*p = x
	return p
}

func (x SensorState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SensorState) Descriptor() protoreflect.EnumDescriptor {
	return file_schema_v1alpha1_sensor_proto_enumTypes[3].Descriptor()
}

func (SensorState) Type() protoreflect.EnumType {
	return &file_schema_v1alpha1_sensor_proto_enumTypes[3]
}

func (x SensorState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SensorState.Descriptor instead.
func (SensorState) EnumDescriptor() ([]byte, []int) {
	return file_schema_v1alpha1_sensor_proto_rawDescGZIP(), []int{3}
}

// Sensor represents a physical or virtual sensor device
type Sensor struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Unique identifier for the sensor
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Human-readable name of the sensor
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Physical context of the sensor (e.g., Temperature, Voltage, Fan)
	Context SensorContext `protobuf:"varint,3,opt,name=context,proto3,enum=schema.v1alpha1.SensorContext" json:"context,omitempty"`
	// Current status of the sensor
	Status SensorStatus `protobuf:"varint,4,opt,name=status,proto3,enum=schema.v1alpha1.SensorStatus" json:"status,omitempty"`
	// Unit of measurement for the sensor readings
	Unit SensorUnit `protobuf:"varint,5,opt,name=unit,proto3,enum=schema.v1alpha1.SensorUnit" json:"unit,omitempty"`
	// Sensor reading information - either analog with thresholds or discrete state
	//
	// Types that are valid to be assigned to Reading:
	//
	//	*Sensor_AnalogReading
	//	*Sensor_DiscreteReading
	Reading isSensor_Reading `protobuf_oneof:"reading"`
	// Physical location of the sensor
	PhysicalLocation string `protobuf:"bytes,8,opt,name=physical_location,json=physicalLocation,proto3" json:"physical_location,omitempty"`
	// Timestamp of the last reading
	LastReadingTimestamp int64 `protobuf:"varint,9,opt,name=last_reading_timestamp,json=lastReadingTimestamp,proto3" json:"last_reading_timestamp,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *Sensor) Reset() {
	*x = Sensor{}
	mi := &file_schema_v1alpha1_sensor_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Sensor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Sensor) ProtoMessage() {}

func (x *Sensor) ProtoReflect() protoreflect.Message {
	mi := &file_schema_v1alpha1_sensor_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Sensor.ProtoReflect.Descriptor instead.
func (*Sensor) Descriptor() ([]byte, []int) {
	return file_schema_v1alpha1_sensor_proto_rawDescGZIP(), []int{0}
}

func (x *Sensor) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Sensor) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Sensor) GetContext() SensorContext {
	if x != nil {
		return x.Context
	}
	return SensorContext_SENSOR_CONTEXT_UNSPECIFIED
}

func (x *Sensor) GetStatus() SensorStatus {
	if x != nil {
		return x.Status
	}
	return SensorStatus_SENSOR_STATUS_UNSPECIFIED
}

func (x *Sensor) GetUnit() SensorUnit {
	if x != nil {
		return x.Unit
	}
	return SensorUnit_SENSOR_UNIT_UNSPECIFIED
}

func (x *Sensor) GetReading() isSensor_Reading {
	if x != nil {
		return x.Reading
	}
	return nil
}

func (x *Sensor) GetAnalogReading() *AnalogSensorReading {
	if x != nil {
		if x, ok := x.Reading.(*Sensor_AnalogReading); ok {
			return x.AnalogReading
		}
	}
	return nil
}

func (x *Sensor) GetDiscreteReading() *DiscreteSensorReading {
	if x != nil {
		if x, ok := x.Reading.(*Sensor_DiscreteReading); ok {
			return x.DiscreteReading
		}
	}
	return nil
}

func (x *Sensor) GetPhysicalLocation() string {
	if x != nil {
		return x.PhysicalLocation
	}
	return ""
}

func (x *Sensor) GetLastReadingTimestamp() int64 {
	if x != nil {
		return x.LastReadingTimestamp
	}
	return 0
}

type isSensor_Reading interface {
	isSensor_Reading()
}

type Sensor_AnalogReading struct {
	// Analog sensor reading with thresholds
	AnalogReading *AnalogSensorReading `protobuf:"bytes,6,opt,name=analog_reading,json=analogReading,proto3,oneof"`
}

type Sensor_DiscreteReading struct {
	// Discrete sensor reading with state
	DiscreteReading *DiscreteSensorReading `protobuf:"bytes,7,opt,name=discrete_reading,json=discreteReading,proto3,oneof"`
}

func (*Sensor_AnalogReading) isSensor_Reading() {}

func (*Sensor_DiscreteReading) isSensor_Reading() {}

// AnalogSensorReading represents a sensor with continuous numerical readings and thresholds
type AnalogSensorReading struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Current measured value
	Value float64 `protobuf:"fixed64,1,opt,name=value,proto3" json:"value,omitempty"`
	// Upper threshold values for warning and critical levels
	UpperThresholds *Threshold `protobuf:"bytes,2,opt,name=upper_thresholds,json=upperThresholds,proto3" json:"upper_thresholds,omitempty"`
	// Lower threshold values for warning and critical levels
	LowerThresholds *Threshold `protobuf:"bytes,3,opt,name=lower_thresholds,json=lowerThresholds,proto3" json:"lower_thresholds,omitempty"`
	// Minimum and maximum values recorded
	MinMaxRecorded *MinMaxRecorded `protobuf:"bytes,4,opt,name=min_max_recorded,json=minMaxRecorded,proto3" json:"min_max_recorded,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *AnalogSensorReading) Reset() {
	*x = AnalogSensorReading{}
	mi := &file_schema_v1alpha1_sensor_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AnalogSensorReading) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnalogSensorReading) ProtoMessage() {}

func (x *AnalogSensorReading) ProtoReflect() protoreflect.Message {
	mi := &file_schema_v1alpha1_sensor_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnalogSensorReading.ProtoReflect.Descriptor instead.
func (*AnalogSensorReading) Descriptor() ([]byte, []int) {
	return file_schema_v1alpha1_sensor_proto_rawDescGZIP(), []int{1}
}

func (x *AnalogSensorReading) GetValue() float64 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *AnalogSensorReading) GetUpperThresholds() *Threshold {
	if x != nil {
		return x.UpperThresholds
	}
	return nil
}

func (x *AnalogSensorReading) GetLowerThresholds() *Threshold {
	if x != nil {
		return x.LowerThresholds
	}
	return nil
}

func (x *AnalogSensorReading) GetMinMaxRecorded() *MinMaxRecorded {
	if x != nil {
		return x.MinMaxRecorded
	}
	return nil
}

// DiscreteSensorReading represents a sensor with discrete states rather than numerical values
type DiscreteSensorReading struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Current state of the sensor
	State SensorState `protobuf:"varint,1,opt,name=state,proto3,enum=schema.v1alpha1.SensorState" json:"state,omitempty"`
	// Additional state information or description
	StateDescription string `protobuf:"bytes,2,opt,name=state_description,json=stateDescription,proto3" json:"state_description,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *DiscreteSensorReading) Reset() {
	*x = DiscreteSensorReading{}
	mi := &file_schema_v1alpha1_sensor_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DiscreteSensorReading) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DiscreteSensorReading) ProtoMessage() {}

func (x *DiscreteSensorReading) ProtoReflect() protoreflect.Message {
	mi := &file_schema_v1alpha1_sensor_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DiscreteSensorReading.ProtoReflect.Descriptor instead.
func (*DiscreteSensorReading) Descriptor() ([]byte, []int) {
	return file_schema_v1alpha1_sensor_proto_rawDescGZIP(), []int{2}
}

func (x *DiscreteSensorReading) GetState() SensorState {
	if x != nil {
		return x.State
	}
	return SensorState_SENSOR_STATE_UNSPECIFIED
}

func (x *DiscreteSensorReading) GetStateDescription() string {
	if x != nil {
		return x.StateDescription
	}
	return ""
}

// Threshold defines warning and critical thresholds for sensor readings
type Threshold struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Warning level threshold
	Warning float64 `protobuf:"fixed64,1,opt,name=warning,proto3" json:"warning,omitempty"`
	// Critical level threshold
	Critical      float64 `protobuf:"fixed64,2,opt,name=critical,proto3" json:"critical,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Threshold) Reset() {
	*x = Threshold{}
	mi := &file_schema_v1alpha1_sensor_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Threshold) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Threshold) ProtoMessage() {}

func (x *Threshold) ProtoReflect() protoreflect.Message {
	mi := &file_schema_v1alpha1_sensor_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Threshold.ProtoReflect.Descriptor instead.
func (*Threshold) Descriptor() ([]byte, []int) {
	return file_schema_v1alpha1_sensor_proto_rawDescGZIP(), []int{3}
}

func (x *Threshold) GetWarning() float64 {
	if x != nil {
		return x.Warning
	}
	return 0
}

func (x *Threshold) GetCritical() float64 {
	if x != nil {
		return x.Critical
	}
	return 0
}

// MinMaxRecorded tracks the minimum and maximum values recorded by the sensor
type MinMaxRecorded struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Minimum value recorded
	MinValue float64 `protobuf:"fixed64,1,opt,name=min_value,json=minValue,proto3" json:"min_value,omitempty"`
	// Maximum value recorded
	MaxValue float64 `protobuf:"fixed64,2,opt,name=max_value,json=maxValue,proto3" json:"max_value,omitempty"`
	// Timestamp when minimum value was recorded
	MinTimestamp int64 `protobuf:"varint,3,opt,name=min_timestamp,json=minTimestamp,proto3" json:"min_timestamp,omitempty"`
	// Timestamp when maximum value was recorded
	MaxTimestamp  int64 `protobuf:"varint,4,opt,name=max_timestamp,json=maxTimestamp,proto3" json:"max_timestamp,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MinMaxRecorded) Reset() {
	*x = MinMaxRecorded{}
	mi := &file_schema_v1alpha1_sensor_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MinMaxRecorded) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MinMaxRecorded) ProtoMessage() {}

func (x *MinMaxRecorded) ProtoReflect() protoreflect.Message {
	mi := &file_schema_v1alpha1_sensor_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MinMaxRecorded.ProtoReflect.Descriptor instead.
func (*MinMaxRecorded) Descriptor() ([]byte, []int) {
	return file_schema_v1alpha1_sensor_proto_rawDescGZIP(), []int{4}
}

func (x *MinMaxRecorded) GetMinValue() float64 {
	if x != nil {
		return x.MinValue
	}
	return 0
}

func (x *MinMaxRecorded) GetMaxValue() float64 {
	if x != nil {
		return x.MaxValue
	}
	return 0
}

func (x *MinMaxRecorded) GetMinTimestamp() int64 {
	if x != nil {
		return x.MinTimestamp
	}
	return 0
}

func (x *MinMaxRecorded) GetMaxTimestamp() int64 {
	if x != nil {
		return x.MaxTimestamp
	}
	return 0
}

// Request message for getting a single sensor by ID
type GetSensorRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetSensorRequest) Reset() {
	*x = GetSensorRequest{}
	mi := &file_schema_v1alpha1_sensor_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetSensorRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSensorRequest) ProtoMessage() {}

func (x *GetSensorRequest) ProtoReflect() protoreflect.Message {
	mi := &file_schema_v1alpha1_sensor_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSensorRequest.ProtoReflect.Descriptor instead.
func (*GetSensorRequest) Descriptor() ([]byte, []int) {
	return file_schema_v1alpha1_sensor_proto_rawDescGZIP(), []int{5}
}

func (x *GetSensorRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// Response message for getting a single sensor
type GetSensorResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Sensor        *Sensor                `protobuf:"bytes,1,opt,name=sensor,proto3" json:"sensor,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetSensorResponse) Reset() {
	*x = GetSensorResponse{}
	mi := &file_schema_v1alpha1_sensor_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetSensorResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSensorResponse) ProtoMessage() {}

func (x *GetSensorResponse) ProtoReflect() protoreflect.Message {
	mi := &file_schema_v1alpha1_sensor_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSensorResponse.ProtoReflect.Descriptor instead.
func (*GetSensorResponse) Descriptor() ([]byte, []int) {
	return file_schema_v1alpha1_sensor_proto_rawDescGZIP(), []int{6}
}

func (x *GetSensorResponse) GetSensor() *Sensor {
	if x != nil {
		return x.Sensor
	}
	return nil
}

// Request message for listing sensors with optional filtering
type ListSensorsRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Optional filter by sensor context
	Context SensorContext `protobuf:"varint,1,opt,name=context,proto3,enum=schema.v1alpha1.SensorContext" json:"context,omitempty"`
	// Optional filter by sensor status
	Status        SensorStatus `protobuf:"varint,2,opt,name=status,proto3,enum=schema.v1alpha1.SensorStatus" json:"status,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListSensorsRequest) Reset() {
	*x = ListSensorsRequest{}
	mi := &file_schema_v1alpha1_sensor_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListSensorsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSensorsRequest) ProtoMessage() {}

func (x *ListSensorsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_schema_v1alpha1_sensor_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSensorsRequest.ProtoReflect.Descriptor instead.
func (*ListSensorsRequest) Descriptor() ([]byte, []int) {
	return file_schema_v1alpha1_sensor_proto_rawDescGZIP(), []int{7}
}

func (x *ListSensorsRequest) GetContext() SensorContext {
	if x != nil {
		return x.Context
	}
	return SensorContext_SENSOR_CONTEXT_UNSPECIFIED
}

func (x *ListSensorsRequest) GetStatus() SensorStatus {
	if x != nil {
		return x.Status
	}
	return SensorStatus_SENSOR_STATUS_UNSPECIFIED
}

// Response message for listing sensors
type ListSensorsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Sensors       []*Sensor              `protobuf:"bytes,1,rep,name=sensors,proto3" json:"sensors,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListSensorsResponse) Reset() {
	*x = ListSensorsResponse{}
	mi := &file_schema_v1alpha1_sensor_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListSensorsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSensorsResponse) ProtoMessage() {}

func (x *ListSensorsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_schema_v1alpha1_sensor_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSensorsResponse.ProtoReflect.Descriptor instead.
func (*ListSensorsResponse) Descriptor() ([]byte, []int) {
	return file_schema_v1alpha1_sensor_proto_rawDescGZIP(), []int{8}
}

func (x *ListSensorsResponse) GetSensors() []*Sensor {
	if x != nil {
		return x.Sensors
	}
	return nil
}

var File_schema_v1alpha1_sensor_proto protoreflect.FileDescriptor

const file_schema_v1alpha1_sensor_proto_rawDesc = "" +
	"\n" +
	"\x1cschema/v1alpha1/sensor.proto\x12\x0fschema.v1alpha1\x1a\x1bbuf/validate/validate.proto\"\xf2\x03\n" +
	"\x06Sensor\x12\x17\n" +
	"\x02id\x18\x01 \x01(\tB\a\xbaH\x04r\x02\x10\x01R\x02id\x12\x1b\n" +
	"\x04name\x18\x02 \x01(\tB\a\xbaH\x04r\x02\x10\x01R\x04name\x128\n" +
	"\acontext\x18\x03 \x01(\x0e2\x1e.schema.v1alpha1.SensorContextR\acontext\x125\n" +
	"\x06status\x18\x04 \x01(\x0e2\x1d.schema.v1alpha1.SensorStatusR\x06status\x12/\n" +
	"\x04unit\x18\x05 \x01(\x0e2\x1b.schema.v1alpha1.SensorUnitR\x04unit\x12M\n" +
	"\x0eanalog_reading\x18\x06 \x01(\v2$.schema.v1alpha1.AnalogSensorReadingH\x00R\ranalogReading\x12S\n" +
	"\x10discrete_reading\x18\a \x01(\v2&.schema.v1alpha1.DiscreteSensorReadingH\x00R\x0fdiscreteReading\x12+\n" +
	"\x11physical_location\x18\b \x01(\tR\x10physicalLocation\x124\n" +
	"\x16last_reading_timestamp\x18\t \x01(\x03R\x14lastReadingTimestampB\t\n" +
	"\areading\"\x84\x02\n" +
	"\x13AnalogSensorReading\x12\x14\n" +
	"\x05value\x18\x01 \x01(\x01R\x05value\x12E\n" +
	"\x10upper_thresholds\x18\x02 \x01(\v2\x1a.schema.v1alpha1.ThresholdR\x0fupperThresholds\x12E\n" +
	"\x10lower_thresholds\x18\x03 \x01(\v2\x1a.schema.v1alpha1.ThresholdR\x0flowerThresholds\x12I\n" +
	"\x10min_max_recorded\x18\x04 \x01(\v2\x1f.schema.v1alpha1.MinMaxRecordedR\x0eminMaxRecorded\"x\n" +
	"\x15DiscreteSensorReading\x122\n" +
	"\x05state\x18\x01 \x01(\x0e2\x1c.schema.v1alpha1.SensorStateR\x05state\x12+\n" +
	"\x11state_description\x18\x02 \x01(\tR\x10stateDescription\"A\n" +
	"\tThreshold\x12\x18\n" +
	"\awarning\x18\x01 \x01(\x01R\awarning\x12\x1a\n" +
	"\bcritical\x18\x02 \x01(\x01R\bcritical\"\x94\x01\n" +
	"\x0eMinMaxRecorded\x12\x1b\n" +
	"\tmin_value\x18\x01 \x01(\x01R\bminValue\x12\x1b\n" +
	"\tmax_value\x18\x02 \x01(\x01R\bmaxValue\x12#\n" +
	"\rmin_timestamp\x18\x03 \x01(\x03R\fminTimestamp\x12#\n" +
	"\rmax_timestamp\x18\x04 \x01(\x03R\fmaxTimestamp\"+\n" +
	"\x10GetSensorRequest\x12\x17\n" +
	"\x02id\x18\x01 \x01(\tB\a\xbaH\x04r\x02\x10\x01R\x02id\"D\n" +
	"\x11GetSensorResponse\x12/\n" +
	"\x06sensor\x18\x01 \x01(\v2\x17.schema.v1alpha1.SensorR\x06sensor\"\x85\x01\n" +
	"\x12ListSensorsRequest\x128\n" +
	"\acontext\x18\x01 \x01(\x0e2\x1e.schema.v1alpha1.SensorContextR\acontext\x125\n" +
	"\x06status\x18\x02 \x01(\x0e2\x1d.schema.v1alpha1.SensorStatusR\x06status\"H\n" +
	"\x13ListSensorsResponse\x121\n" +
	"\asensors\x18\x01 \x03(\v2\x17.schema.v1alpha1.SensorR\asensors*\xab\x02\n" +
	"\rSensorContext\x12\x1e\n" +
	"\x1aSENSOR_CONTEXT_UNSPECIFIED\x10\x00\x12\x1e\n" +
	"\x1aSENSOR_CONTEXT_TEMPERATURE\x10\x01\x12\x1a\n" +
	"\x16SENSOR_CONTEXT_VOLTAGE\x10\x02\x12\x1a\n" +
	"\x16SENSOR_CONTEXT_CURRENT\x10\x03\x12\x16\n" +
	"\x12SENSOR_CONTEXT_FAN\x10\x04\x12\x18\n" +
	"\x14SENSOR_CONTEXT_POWER\x10\x05\x12\x19\n" +
	"\x15SENSOR_CONTEXT_ENERGY\x10\x06\x12\x1b\n" +
	"\x17SENSOR_CONTEXT_PRESSURE\x10\a\x12\x1b\n" +
	"\x17SENSOR_CONTEXT_HUMIDITY\x10\b\x12\x1b\n" +
	"\x17SENSOR_CONTEXT_ALTITUDE\x10\t*\xb7\x01\n" +
	"\fSensorStatus\x12\x1d\n" +
	"\x19SENSOR_STATUS_UNSPECIFIED\x10\x00\x12\x19\n" +
	"\x15SENSOR_STATUS_ENABLED\x10\x01\x12\x1a\n" +
	"\x16SENSOR_STATUS_DISABLED\x10\x02\x12\x17\n" +
	"\x13SENSOR_STATUS_ERROR\x10\x03\x12\x1d\n" +
	"\x19SENSOR_STATUS_NOT_PRESENT\x10\x04\x12\x19\n" +
	"\x15SENSOR_STATUS_UNKNOWN\x10\x05*\xb0\x02\n" +
	"\n" +
	"SensorUnit\x12\x1b\n" +
	"\x17SENSOR_UNIT_UNSPECIFIED\x10\x00\x12\x17\n" +
	"\x13SENSOR_UNIT_CELSIUS\x10\x01\x12\x1a\n" +
	"\x16SENSOR_UNIT_FAHRENHEIT\x10\x02\x12\x16\n" +
	"\x12SENSOR_UNIT_KELVIN\x10\x03\x12\x15\n" +
	"\x11SENSOR_UNIT_VOLTS\x10\x04\x12\x14\n" +
	"\x10SENSOR_UNIT_AMPS\x10\x05\x12\x15\n" +
	"\x11SENSOR_UNIT_WATTS\x10\x06\x12\x16\n" +
	"\x12SENSOR_UNIT_JOULES\x10\a\x12\x17\n" +
	"\x13SENSOR_UNIT_PASCALS\x10\b\x12\x17\n" +
	"\x13SENSOR_UNIT_PERCENT\x10\t\x12\x13\n" +
	"\x0fSENSOR_UNIT_RPM\x10\n" +
	"\x12\x15\n" +
	"\x11SENSOR_UNIT_HERTZ\x10\v*\xcb\x01\n" +
	"\vSensorState\x12\x1c\n" +
	"\x18SENSOR_STATE_UNSPECIFIED\x10\x00\x12\x17\n" +
	"\x13SENSOR_STATE_NORMAL\x10\x01\x12\x16\n" +
	"\x12SENSOR_STATE_FAULT\x10\x02\x12\x18\n" +
	"\x14SENSOR_STATE_WARNING\x10\x03\x12\x19\n" +
	"\x15SENSOR_STATE_CRITICAL\x10\x04\x12\x18\n" +
	"\x14SENSOR_STATE_UNKNOWN\x10\x05\x12\x1e\n" +
	"\x1aSENSOR_STATE_NOT_AVAILABLE\x10\x062\xc1\x01\n" +
	"\rSensorService\x12T\n" +
	"\tGetSensor\x12!.schema.v1alpha1.GetSensorRequest\x1a\".schema.v1alpha1.GetSensorResponse\"\x00\x12Z\n" +
	"\vListSensors\x12#.schema.v1alpha1.ListSensorsRequest\x1a$.schema.v1alpha1.ListSensorsResponse\"\x00B\xbe\x01\n" +
	"\x13com.schema.v1alpha1B\vSensorProtoP\x01Z=github.com/u-bmc/u-bmc/api/gen/schema/v1alpha1;schemav1alpha1\xa2\x02\x03SXX\xaa\x02\x0fSchema.V1alpha1\xca\x02\x0fSchema\\V1alpha1\xe2\x02\x1bSchema\\V1alpha1\\GPBMetadata\xea\x02\x10Schema::V1alpha1b\x06proto3"

var (
	file_schema_v1alpha1_sensor_proto_rawDescOnce sync.Once
	file_schema_v1alpha1_sensor_proto_rawDescData []byte
)

func file_schema_v1alpha1_sensor_proto_rawDescGZIP() []byte {
	file_schema_v1alpha1_sensor_proto_rawDescOnce.Do(func() {
		file_schema_v1alpha1_sensor_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_schema_v1alpha1_sensor_proto_rawDesc), len(file_schema_v1alpha1_sensor_proto_rawDesc)))
	})
	return file_schema_v1alpha1_sensor_proto_rawDescData
}

var file_schema_v1alpha1_sensor_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_schema_v1alpha1_sensor_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_schema_v1alpha1_sensor_proto_goTypes = []any{
	(SensorContext)(0),            // 0: schema.v1alpha1.SensorContext
	(SensorStatus)(0),             // 1: schema.v1alpha1.SensorStatus
	(SensorUnit)(0),               // 2: schema.v1alpha1.SensorUnit
	(SensorState)(0),              // 3: schema.v1alpha1.SensorState
	(*Sensor)(nil),                // 4: schema.v1alpha1.Sensor
	(*AnalogSensorReading)(nil),   // 5: schema.v1alpha1.AnalogSensorReading
	(*DiscreteSensorReading)(nil), // 6: schema.v1alpha1.DiscreteSensorReading
	(*Threshold)(nil),             // 7: schema.v1alpha1.Threshold
	(*MinMaxRecorded)(nil),        // 8: schema.v1alpha1.MinMaxRecorded
	(*GetSensorRequest)(nil),      // 9: schema.v1alpha1.GetSensorRequest
	(*GetSensorResponse)(nil),     // 10: schema.v1alpha1.GetSensorResponse
	(*ListSensorsRequest)(nil),    // 11: schema.v1alpha1.ListSensorsRequest
	(*ListSensorsResponse)(nil),   // 12: schema.v1alpha1.ListSensorsResponse
}
var file_schema_v1alpha1_sensor_proto_depIdxs = []int32{
	0,  // 0: schema.v1alpha1.Sensor.context:type_name -> schema.v1alpha1.SensorContext
	1,  // 1: schema.v1alpha1.Sensor.status:type_name -> schema.v1alpha1.SensorStatus
	2,  // 2: schema.v1alpha1.Sensor.unit:type_name -> schema.v1alpha1.SensorUnit
	5,  // 3: schema.v1alpha1.Sensor.analog_reading:type_name -> schema.v1alpha1.AnalogSensorReading
	6,  // 4: schema.v1alpha1.Sensor.discrete_reading:type_name -> schema.v1alpha1.DiscreteSensorReading
	7,  // 5: schema.v1alpha1.AnalogSensorReading.upper_thresholds:type_name -> schema.v1alpha1.Threshold
	7,  // 6: schema.v1alpha1.AnalogSensorReading.lower_thresholds:type_name -> schema.v1alpha1.Threshold
	8,  // 7: schema.v1alpha1.AnalogSensorReading.min_max_recorded:type_name -> schema.v1alpha1.MinMaxRecorded
	3,  // 8: schema.v1alpha1.DiscreteSensorReading.state:type_name -> schema.v1alpha1.SensorState
	4,  // 9: schema.v1alpha1.GetSensorResponse.sensor:type_name -> schema.v1alpha1.Sensor
	0,  // 10: schema.v1alpha1.ListSensorsRequest.context:type_name -> schema.v1alpha1.SensorContext
	1,  // 11: schema.v1alpha1.ListSensorsRequest.status:type_name -> schema.v1alpha1.SensorStatus
	4,  // 12: schema.v1alpha1.ListSensorsResponse.sensors:type_name -> schema.v1alpha1.Sensor
	9,  // 13: schema.v1alpha1.SensorService.GetSensor:input_type -> schema.v1alpha1.GetSensorRequest
	11, // 14: schema.v1alpha1.SensorService.ListSensors:input_type -> schema.v1alpha1.ListSensorsRequest
	10, // 15: schema.v1alpha1.SensorService.GetSensor:output_type -> schema.v1alpha1.GetSensorResponse
	12, // 16: schema.v1alpha1.SensorService.ListSensors:output_type -> schema.v1alpha1.ListSensorsResponse
	15, // [15:17] is the sub-list for method output_type
	13, // [13:15] is the sub-list for method input_type
	13, // [13:13] is the sub-list for extension type_name
	13, // [13:13] is the sub-list for extension extendee
	0,  // [0:13] is the sub-list for field type_name
}

func init() { file_schema_v1alpha1_sensor_proto_init() }
func file_schema_v1alpha1_sensor_proto_init() {
	if File_schema_v1alpha1_sensor_proto != nil {
		return
	}
	file_schema_v1alpha1_sensor_proto_msgTypes[0].OneofWrappers = []any{
		(*Sensor_AnalogReading)(nil),
		(*Sensor_DiscreteReading)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_schema_v1alpha1_sensor_proto_rawDesc), len(file_schema_v1alpha1_sensor_proto_rawDesc)),
			NumEnums:      4,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_schema_v1alpha1_sensor_proto_goTypes,
		DependencyIndexes: file_schema_v1alpha1_sensor_proto_depIdxs,
		EnumInfos:         file_schema_v1alpha1_sensor_proto_enumTypes,
		MessageInfos:      file_schema_v1alpha1_sensor_proto_msgTypes,
	}.Build()
	File_schema_v1alpha1_sensor_proto = out.File
	file_schema_v1alpha1_sensor_proto_goTypes = nil
	file_schema_v1alpha1_sensor_proto_depIdxs = nil
}
