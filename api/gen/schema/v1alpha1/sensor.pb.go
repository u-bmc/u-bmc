// SPDX-License-Identifier: BSD-3-Clause

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: schema/v1alpha1/sensor.proto

package schemav1alpha1

import (
	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	fieldmaskpb "google.golang.org/protobuf/types/known/fieldmaskpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type SensorContext int32

const (
	SensorContext_SENSOR_CONTEXT_UNSPECIFIED SensorContext = 0
	SensorContext_SENSOR_CONTEXT_TEMPERATURE SensorContext = 1
	SensorContext_SENSOR_CONTEXT_VOLTAGE     SensorContext = 2
	SensorContext_SENSOR_CONTEXT_CURRENT     SensorContext = 3
	SensorContext_SENSOR_CONTEXT_TACH        SensorContext = 4
	SensorContext_SENSOR_CONTEXT_POWER       SensorContext = 5
	SensorContext_SENSOR_CONTEXT_ENERGY      SensorContext = 6
	SensorContext_SENSOR_CONTEXT_PRESSURE    SensorContext = 7
	SensorContext_SENSOR_CONTEXT_HUMIDITY    SensorContext = 8
	SensorContext_SENSOR_CONTEXT_ALTITUDE    SensorContext = 9
	SensorContext_SENSOR_CONTEXT_FLOW_RATE   SensorContext = 10
)

// Enum value maps for SensorContext.
var (
	SensorContext_name = map[int32]string{
		0:  "SENSOR_CONTEXT_UNSPECIFIED",
		1:  "SENSOR_CONTEXT_TEMPERATURE",
		2:  "SENSOR_CONTEXT_VOLTAGE",
		3:  "SENSOR_CONTEXT_CURRENT",
		4:  "SENSOR_CONTEXT_TACH",
		5:  "SENSOR_CONTEXT_POWER",
		6:  "SENSOR_CONTEXT_ENERGY",
		7:  "SENSOR_CONTEXT_PRESSURE",
		8:  "SENSOR_CONTEXT_HUMIDITY",
		9:  "SENSOR_CONTEXT_ALTITUDE",
		10: "SENSOR_CONTEXT_FLOW_RATE",
	}
	SensorContext_value = map[string]int32{
		"SENSOR_CONTEXT_UNSPECIFIED": 0,
		"SENSOR_CONTEXT_TEMPERATURE": 1,
		"SENSOR_CONTEXT_VOLTAGE":     2,
		"SENSOR_CONTEXT_CURRENT":     3,
		"SENSOR_CONTEXT_TACH":        4,
		"SENSOR_CONTEXT_POWER":       5,
		"SENSOR_CONTEXT_ENERGY":      6,
		"SENSOR_CONTEXT_PRESSURE":    7,
		"SENSOR_CONTEXT_HUMIDITY":    8,
		"SENSOR_CONTEXT_ALTITUDE":    9,
		"SENSOR_CONTEXT_FLOW_RATE":   10,
	}
)

func (x SensorContext) Enum() *SensorContext {
	p := new(SensorContext)
	*p = x
	return p
}

func (x SensorContext) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SensorContext) Descriptor() protoreflect.EnumDescriptor {
	return file_schema_v1alpha1_sensor_proto_enumTypes[0].Descriptor()
}

func (SensorContext) Type() protoreflect.EnumType {
	return &file_schema_v1alpha1_sensor_proto_enumTypes[0]
}

func (x SensorContext) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SensorContext.Descriptor instead.
func (SensorContext) EnumDescriptor() ([]byte, []int) {
	return file_schema_v1alpha1_sensor_proto_rawDescGZIP(), []int{0}
}

type SensorStatus int32

const (
	SensorStatus_SENSOR_STATUS_UNSPECIFIED SensorStatus = 0
	SensorStatus_SENSOR_STATUS_ENABLED     SensorStatus = 1
	SensorStatus_SENSOR_STATUS_DISABLED    SensorStatus = 2
	SensorStatus_SENSOR_STATUS_NOT_PRESENT SensorStatus = 3
	SensorStatus_SENSOR_STATUS_WARNING     SensorStatus = 4
	SensorStatus_SENSOR_STATUS_CRITICAL    SensorStatus = 5
	SensorStatus_SENSOR_STATUS_ERROR       SensorStatus = 6
	SensorStatus_SENSOR_STATUS_UNKNOWN     SensorStatus = 7
)

// Enum value maps for SensorStatus.
var (
	SensorStatus_name = map[int32]string{
		0: "SENSOR_STATUS_UNSPECIFIED",
		1: "SENSOR_STATUS_ENABLED",
		2: "SENSOR_STATUS_DISABLED",
		3: "SENSOR_STATUS_NOT_PRESENT",
		4: "SENSOR_STATUS_WARNING",
		5: "SENSOR_STATUS_CRITICAL",
		6: "SENSOR_STATUS_ERROR",
		7: "SENSOR_STATUS_UNKNOWN",
	}
	SensorStatus_value = map[string]int32{
		"SENSOR_STATUS_UNSPECIFIED": 0,
		"SENSOR_STATUS_ENABLED":     1,
		"SENSOR_STATUS_DISABLED":    2,
		"SENSOR_STATUS_NOT_PRESENT": 3,
		"SENSOR_STATUS_WARNING":     4,
		"SENSOR_STATUS_CRITICAL":    5,
		"SENSOR_STATUS_ERROR":       6,
		"SENSOR_STATUS_UNKNOWN":     7,
	}
)

func (x SensorStatus) Enum() *SensorStatus {
	p := new(SensorStatus)
	*p = x
	return p
}

func (x SensorStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SensorStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_schema_v1alpha1_sensor_proto_enumTypes[1].Descriptor()
}

func (SensorStatus) Type() protoreflect.EnumType {
	return &file_schema_v1alpha1_sensor_proto_enumTypes[1]
}

func (x SensorStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SensorStatus.Descriptor instead.
func (SensorStatus) EnumDescriptor() ([]byte, []int) {
	return file_schema_v1alpha1_sensor_proto_rawDescGZIP(), []int{1}
}

type SensorUnit int32

const (
	SensorUnit_SENSOR_UNIT_UNSPECIFIED       SensorUnit = 0
	SensorUnit_SENSOR_UNIT_CELSIUS           SensorUnit = 1
	SensorUnit_SENSOR_UNIT_FAHRENHEIT        SensorUnit = 2
	SensorUnit_SENSOR_UNIT_KELVIN            SensorUnit = 3
	SensorUnit_SENSOR_UNIT_VOLTS             SensorUnit = 4
	SensorUnit_SENSOR_UNIT_AMPS              SensorUnit = 5
	SensorUnit_SENSOR_UNIT_WATTS             SensorUnit = 6
	SensorUnit_SENSOR_UNIT_JOULES            SensorUnit = 7
	SensorUnit_SENSOR_UNIT_PASCALS           SensorUnit = 8
	SensorUnit_SENSOR_UNIT_PERCENT           SensorUnit = 9
	SensorUnit_SENSOR_UNIT_RPM               SensorUnit = 10
	SensorUnit_SENSOR_UNIT_HERTZ             SensorUnit = 11
	SensorUnit_SENSOR_UNIT_METERS            SensorUnit = 12
	SensorUnit_SENSOR_UNIT_LITERS_PER_MINUTE SensorUnit = 13
)

// Enum value maps for SensorUnit.
var (
	SensorUnit_name = map[int32]string{
		0:  "SENSOR_UNIT_UNSPECIFIED",
		1:  "SENSOR_UNIT_CELSIUS",
		2:  "SENSOR_UNIT_FAHRENHEIT",
		3:  "SENSOR_UNIT_KELVIN",
		4:  "SENSOR_UNIT_VOLTS",
		5:  "SENSOR_UNIT_AMPS",
		6:  "SENSOR_UNIT_WATTS",
		7:  "SENSOR_UNIT_JOULES",
		8:  "SENSOR_UNIT_PASCALS",
		9:  "SENSOR_UNIT_PERCENT",
		10: "SENSOR_UNIT_RPM",
		11: "SENSOR_UNIT_HERTZ",
		12: "SENSOR_UNIT_METERS",
		13: "SENSOR_UNIT_LITERS_PER_MINUTE",
	}
	SensorUnit_value = map[string]int32{
		"SENSOR_UNIT_UNSPECIFIED":       0,
		"SENSOR_UNIT_CELSIUS":           1,
		"SENSOR_UNIT_FAHRENHEIT":        2,
		"SENSOR_UNIT_KELVIN":            3,
		"SENSOR_UNIT_VOLTS":             4,
		"SENSOR_UNIT_AMPS":              5,
		"SENSOR_UNIT_WATTS":             6,
		"SENSOR_UNIT_JOULES":            7,
		"SENSOR_UNIT_PASCALS":           8,
		"SENSOR_UNIT_PERCENT":           9,
		"SENSOR_UNIT_RPM":               10,
		"SENSOR_UNIT_HERTZ":             11,
		"SENSOR_UNIT_METERS":            12,
		"SENSOR_UNIT_LITERS_PER_MINUTE": 13,
	}
)

func (x SensorUnit) Enum() *SensorUnit {
	p := new(SensorUnit)
	*p = x
	return p
}

func (x SensorUnit) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SensorUnit) Descriptor() protoreflect.EnumDescriptor {
	return file_schema_v1alpha1_sensor_proto_enumTypes[2].Descriptor()
}

func (SensorUnit) Type() protoreflect.EnumType {
	return &file_schema_v1alpha1_sensor_proto_enumTypes[2]
}

func (x SensorUnit) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SensorUnit.Descriptor instead.
func (SensorUnit) EnumDescriptor() ([]byte, []int) {
	return file_schema_v1alpha1_sensor_proto_rawDescGZIP(), []int{2}
}

type Sensor struct {
	state   protoimpl.MessageState `protogen:"open.v1"`
	Id      string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name    string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Context *SensorContext         `protobuf:"varint,3,opt,name=context,proto3,enum=schema.v1alpha1.SensorContext,oneof" json:"context,omitempty"`
	Status  *SensorStatus          `protobuf:"varint,4,opt,name=status,proto3,enum=schema.v1alpha1.SensorStatus,oneof" json:"status,omitempty"`
	Unit    *SensorUnit            `protobuf:"varint,5,opt,name=unit,proto3,enum=schema.v1alpha1.SensorUnit,oneof" json:"unit,omitempty"`
	// Types that are valid to be assigned to Reading:
	//
	//	*Sensor_AnalogReading
	//	*Sensor_DiscreteReading
	Reading              isSensor_Reading       `protobuf_oneof:"reading"`
	Location             *Location              `protobuf:"bytes,8,opt,name=location,proto3,oneof" json:"location,omitempty"`
	LastReadingTimestamp *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=last_reading_timestamp,json=lastReadingTimestamp,proto3,oneof" json:"last_reading_timestamp,omitempty"`
	CustomAttributes     map[string]string      `protobuf:"bytes,10,rep,name=custom_attributes,json=customAttributes,proto3" json:"custom_attributes,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *Sensor) Reset() {
	*x = Sensor{}
	mi := &file_schema_v1alpha1_sensor_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Sensor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Sensor) ProtoMessage() {}

func (x *Sensor) ProtoReflect() protoreflect.Message {
	mi := &file_schema_v1alpha1_sensor_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Sensor.ProtoReflect.Descriptor instead.
func (*Sensor) Descriptor() ([]byte, []int) {
	return file_schema_v1alpha1_sensor_proto_rawDescGZIP(), []int{0}
}

func (x *Sensor) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Sensor) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Sensor) GetContext() SensorContext {
	if x != nil && x.Context != nil {
		return *x.Context
	}
	return SensorContext_SENSOR_CONTEXT_UNSPECIFIED
}

func (x *Sensor) GetStatus() SensorStatus {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return SensorStatus_SENSOR_STATUS_UNSPECIFIED
}

func (x *Sensor) GetUnit() SensorUnit {
	if x != nil && x.Unit != nil {
		return *x.Unit
	}
	return SensorUnit_SENSOR_UNIT_UNSPECIFIED
}

func (x *Sensor) GetReading() isSensor_Reading {
	if x != nil {
		return x.Reading
	}
	return nil
}

func (x *Sensor) GetAnalogReading() *AnalogSensorReading {
	if x != nil {
		if x, ok := x.Reading.(*Sensor_AnalogReading); ok {
			return x.AnalogReading
		}
	}
	return nil
}

func (x *Sensor) GetDiscreteReading() *DiscreteSensorReading {
	if x != nil {
		if x, ok := x.Reading.(*Sensor_DiscreteReading); ok {
			return x.DiscreteReading
		}
	}
	return nil
}

func (x *Sensor) GetLocation() *Location {
	if x != nil {
		return x.Location
	}
	return nil
}

func (x *Sensor) GetLastReadingTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.LastReadingTimestamp
	}
	return nil
}

func (x *Sensor) GetCustomAttributes() map[string]string {
	if x != nil {
		return x.CustomAttributes
	}
	return nil
}

type isSensor_Reading interface {
	isSensor_Reading()
}

type Sensor_AnalogReading struct {
	AnalogReading *AnalogSensorReading `protobuf:"bytes,6,opt,name=analog_reading,json=analogReading,proto3,oneof"`
}

type Sensor_DiscreteReading struct {
	DiscreteReading *DiscreteSensorReading `protobuf:"bytes,7,opt,name=discrete_reading,json=discreteReading,proto3,oneof"`
}

func (*Sensor_AnalogReading) isSensor_Reading() {}

func (*Sensor_DiscreteReading) isSensor_Reading() {}

type AnalogSensorReading struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	Value           float64                `protobuf:"fixed64,1,opt,name=value,proto3" json:"value,omitempty"`
	UpperThresholds *Threshold             `protobuf:"bytes,2,opt,name=upper_thresholds,json=upperThresholds,proto3,oneof" json:"upper_thresholds,omitempty"`
	LowerThresholds *Threshold             `protobuf:"bytes,3,opt,name=lower_thresholds,json=lowerThresholds,proto3,oneof" json:"lower_thresholds,omitempty"`
	MinMaxRecorded  *MinMaxRecorded        `protobuf:"bytes,4,opt,name=min_max_recorded,json=minMaxRecorded,proto3,oneof" json:"min_max_recorded,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *AnalogSensorReading) Reset() {
	*x = AnalogSensorReading{}
	mi := &file_schema_v1alpha1_sensor_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AnalogSensorReading) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnalogSensorReading) ProtoMessage() {}

func (x *AnalogSensorReading) ProtoReflect() protoreflect.Message {
	mi := &file_schema_v1alpha1_sensor_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnalogSensorReading.ProtoReflect.Descriptor instead.
func (*AnalogSensorReading) Descriptor() ([]byte, []int) {
	return file_schema_v1alpha1_sensor_proto_rawDescGZIP(), []int{1}
}

func (x *AnalogSensorReading) GetValue() float64 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *AnalogSensorReading) GetUpperThresholds() *Threshold {
	if x != nil {
		return x.UpperThresholds
	}
	return nil
}

func (x *AnalogSensorReading) GetLowerThresholds() *Threshold {
	if x != nil {
		return x.LowerThresholds
	}
	return nil
}

func (x *AnalogSensorReading) GetMinMaxRecorded() *MinMaxRecorded {
	if x != nil {
		return x.MinMaxRecorded
	}
	return nil
}

type DiscreteSensorReading struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	State            string                 `protobuf:"bytes,1,opt,name=state,proto3" json:"state,omitempty"`
	StateDescription *string                `protobuf:"bytes,2,opt,name=state_description,json=stateDescription,proto3,oneof" json:"state_description,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *DiscreteSensorReading) Reset() {
	*x = DiscreteSensorReading{}
	mi := &file_schema_v1alpha1_sensor_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DiscreteSensorReading) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DiscreteSensorReading) ProtoMessage() {}

func (x *DiscreteSensorReading) ProtoReflect() protoreflect.Message {
	mi := &file_schema_v1alpha1_sensor_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DiscreteSensorReading.ProtoReflect.Descriptor instead.
func (*DiscreteSensorReading) Descriptor() ([]byte, []int) {
	return file_schema_v1alpha1_sensor_proto_rawDescGZIP(), []int{2}
}

func (x *DiscreteSensorReading) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *DiscreteSensorReading) GetStateDescription() string {
	if x != nil && x.StateDescription != nil {
		return *x.StateDescription
	}
	return ""
}

type Threshold struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Warning       *float64               `protobuf:"fixed64,1,opt,name=warning,proto3,oneof" json:"warning,omitempty"`
	Critical      *float64               `protobuf:"fixed64,2,opt,name=critical,proto3,oneof" json:"critical,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Threshold) Reset() {
	*x = Threshold{}
	mi := &file_schema_v1alpha1_sensor_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Threshold) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Threshold) ProtoMessage() {}

func (x *Threshold) ProtoReflect() protoreflect.Message {
	mi := &file_schema_v1alpha1_sensor_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Threshold.ProtoReflect.Descriptor instead.
func (*Threshold) Descriptor() ([]byte, []int) {
	return file_schema_v1alpha1_sensor_proto_rawDescGZIP(), []int{3}
}

func (x *Threshold) GetWarning() float64 {
	if x != nil && x.Warning != nil {
		return *x.Warning
	}
	return 0
}

func (x *Threshold) GetCritical() float64 {
	if x != nil && x.Critical != nil {
		return *x.Critical
	}
	return 0
}

type MinMaxRecorded struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	MinValue      float64                `protobuf:"fixed64,1,opt,name=min_value,json=minValue,proto3" json:"min_value,omitempty"`
	MaxValue      float64                `protobuf:"fixed64,2,opt,name=max_value,json=maxValue,proto3" json:"max_value,omitempty"`
	MinTimestamp  *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=min_timestamp,json=minTimestamp,proto3,oneof" json:"min_timestamp,omitempty"`
	MaxTimestamp  *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=max_timestamp,json=maxTimestamp,proto3,oneof" json:"max_timestamp,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MinMaxRecorded) Reset() {
	*x = MinMaxRecorded{}
	mi := &file_schema_v1alpha1_sensor_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MinMaxRecorded) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MinMaxRecorded) ProtoMessage() {}

func (x *MinMaxRecorded) ProtoReflect() protoreflect.Message {
	mi := &file_schema_v1alpha1_sensor_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MinMaxRecorded.ProtoReflect.Descriptor instead.
func (*MinMaxRecorded) Descriptor() ([]byte, []int) {
	return file_schema_v1alpha1_sensor_proto_rawDescGZIP(), []int{4}
}

func (x *MinMaxRecorded) GetMinValue() float64 {
	if x != nil {
		return x.MinValue
	}
	return 0
}

func (x *MinMaxRecorded) GetMaxValue() float64 {
	if x != nil {
		return x.MaxValue
	}
	return 0
}

func (x *MinMaxRecorded) GetMinTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.MinTimestamp
	}
	return nil
}

func (x *MinMaxRecorded) GetMaxTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.MaxTimestamp
	}
	return nil
}

type ListSensorsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	FieldMask     *fieldmaskpb.FieldMask `protobuf:"bytes,1,opt,name=field_mask,json=fieldMask,proto3" json:"field_mask,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListSensorsRequest) Reset() {
	*x = ListSensorsRequest{}
	mi := &file_schema_v1alpha1_sensor_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListSensorsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSensorsRequest) ProtoMessage() {}

func (x *ListSensorsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_schema_v1alpha1_sensor_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSensorsRequest.ProtoReflect.Descriptor instead.
func (*ListSensorsRequest) Descriptor() ([]byte, []int) {
	return file_schema_v1alpha1_sensor_proto_rawDescGZIP(), []int{5}
}

func (x *ListSensorsRequest) GetFieldMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.FieldMask
	}
	return nil
}

type ListSensorsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Sensor        []*Sensor              `protobuf:"bytes,1,rep,name=sensor,proto3" json:"sensor,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListSensorsResponse) Reset() {
	*x = ListSensorsResponse{}
	mi := &file_schema_v1alpha1_sensor_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListSensorsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSensorsResponse) ProtoMessage() {}

func (x *ListSensorsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_schema_v1alpha1_sensor_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSensorsResponse.ProtoReflect.Descriptor instead.
func (*ListSensorsResponse) Descriptor() ([]byte, []int) {
	return file_schema_v1alpha1_sensor_proto_rawDescGZIP(), []int{6}
}

func (x *ListSensorsResponse) GetSensor() []*Sensor {
	if x != nil {
		return x.Sensor
	}
	return nil
}

type GetSensorRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Identifier:
	//
	//	*GetSensorRequest_Id
	//	*GetSensorRequest_Name
	//	*GetSensorRequest_Context
	//	*GetSensorRequest_Status
	//	*GetSensorRequest_Location
	Identifier    isGetSensorRequest_Identifier `protobuf_oneof:"identifier"`
	FieldMask     *fieldmaskpb.FieldMask        `protobuf:"bytes,6,opt,name=field_mask,json=fieldMask,proto3" json:"field_mask,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetSensorRequest) Reset() {
	*x = GetSensorRequest{}
	mi := &file_schema_v1alpha1_sensor_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetSensorRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSensorRequest) ProtoMessage() {}

func (x *GetSensorRequest) ProtoReflect() protoreflect.Message {
	mi := &file_schema_v1alpha1_sensor_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSensorRequest.ProtoReflect.Descriptor instead.
func (*GetSensorRequest) Descriptor() ([]byte, []int) {
	return file_schema_v1alpha1_sensor_proto_rawDescGZIP(), []int{7}
}

func (x *GetSensorRequest) GetIdentifier() isGetSensorRequest_Identifier {
	if x != nil {
		return x.Identifier
	}
	return nil
}

func (x *GetSensorRequest) GetId() string {
	if x != nil {
		if x, ok := x.Identifier.(*GetSensorRequest_Id); ok {
			return x.Id
		}
	}
	return ""
}

func (x *GetSensorRequest) GetName() string {
	if x != nil {
		if x, ok := x.Identifier.(*GetSensorRequest_Name); ok {
			return x.Name
		}
	}
	return ""
}

func (x *GetSensorRequest) GetContext() SensorContext {
	if x != nil {
		if x, ok := x.Identifier.(*GetSensorRequest_Context); ok {
			return x.Context
		}
	}
	return SensorContext_SENSOR_CONTEXT_UNSPECIFIED
}

func (x *GetSensorRequest) GetStatus() SensorStatus {
	if x != nil {
		if x, ok := x.Identifier.(*GetSensorRequest_Status); ok {
			return x.Status
		}
	}
	return SensorStatus_SENSOR_STATUS_UNSPECIFIED
}

func (x *GetSensorRequest) GetLocation() *Location {
	if x != nil {
		if x, ok := x.Identifier.(*GetSensorRequest_Location); ok {
			return x.Location
		}
	}
	return nil
}

func (x *GetSensorRequest) GetFieldMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.FieldMask
	}
	return nil
}

type isGetSensorRequest_Identifier interface {
	isGetSensorRequest_Identifier()
}

type GetSensorRequest_Id struct {
	Id string `protobuf:"bytes,1,opt,name=id,proto3,oneof"`
}

type GetSensorRequest_Name struct {
	Name string `protobuf:"bytes,2,opt,name=name,proto3,oneof"`
}

type GetSensorRequest_Context struct {
	Context SensorContext `protobuf:"varint,3,opt,name=context,proto3,enum=schema.v1alpha1.SensorContext,oneof"`
}

type GetSensorRequest_Status struct {
	Status SensorStatus `protobuf:"varint,4,opt,name=status,proto3,enum=schema.v1alpha1.SensorStatus,oneof"`
}

type GetSensorRequest_Location struct {
	Location *Location `protobuf:"bytes,5,opt,name=location,proto3,oneof"`
}

func (*GetSensorRequest_Id) isGetSensorRequest_Identifier() {}

func (*GetSensorRequest_Name) isGetSensorRequest_Identifier() {}

func (*GetSensorRequest_Context) isGetSensorRequest_Identifier() {}

func (*GetSensorRequest_Status) isGetSensorRequest_Identifier() {}

func (*GetSensorRequest_Location) isGetSensorRequest_Identifier() {}

type GetSensorResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Sensors       []*Sensor              `protobuf:"bytes,1,rep,name=sensors,proto3" json:"sensors,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetSensorResponse) Reset() {
	*x = GetSensorResponse{}
	mi := &file_schema_v1alpha1_sensor_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetSensorResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSensorResponse) ProtoMessage() {}

func (x *GetSensorResponse) ProtoReflect() protoreflect.Message {
	mi := &file_schema_v1alpha1_sensor_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSensorResponse.ProtoReflect.Descriptor instead.
func (*GetSensorResponse) Descriptor() ([]byte, []int) {
	return file_schema_v1alpha1_sensor_proto_rawDescGZIP(), []int{8}
}

func (x *GetSensorResponse) GetSensors() []*Sensor {
	if x != nil {
		return x.Sensors
	}
	return nil
}

type SensorAlert struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Type          string                 `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	SensorId      string                 `protobuf:"bytes,2,opt,name=sensor_id,json=sensorId,proto3" json:"sensor_id,omitempty"`
	SensorName    string                 `protobuf:"bytes,3,opt,name=sensor_name,json=sensorName,proto3" json:"sensor_name,omitempty"`
	Value         float64                `protobuf:"fixed64,4,opt,name=value,proto3" json:"value,omitempty"`
	Threshold     *float64               `protobuf:"fixed64,5,opt,name=threshold,proto3,oneof" json:"threshold,omitempty"`
	Severity      string                 `protobuf:"bytes,6,opt,name=severity,proto3" json:"severity,omitempty"`
	ZoneName      *string                `protobuf:"bytes,7,opt,name=zone_name,json=zoneName,proto3,oneof" json:"zone_name,omitempty"`
	Timestamp     *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Message       string                 `protobuf:"bytes,9,opt,name=message,proto3" json:"message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SensorAlert) Reset() {
	*x = SensorAlert{}
	mi := &file_schema_v1alpha1_sensor_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SensorAlert) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SensorAlert) ProtoMessage() {}

func (x *SensorAlert) ProtoReflect() protoreflect.Message {
	mi := &file_schema_v1alpha1_sensor_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SensorAlert.ProtoReflect.Descriptor instead.
func (*SensorAlert) Descriptor() ([]byte, []int) {
	return file_schema_v1alpha1_sensor_proto_rawDescGZIP(), []int{9}
}

func (x *SensorAlert) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *SensorAlert) GetSensorId() string {
	if x != nil {
		return x.SensorId
	}
	return ""
}

func (x *SensorAlert) GetSensorName() string {
	if x != nil {
		return x.SensorName
	}
	return ""
}

func (x *SensorAlert) GetValue() float64 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *SensorAlert) GetThreshold() float64 {
	if x != nil && x.Threshold != nil {
		return *x.Threshold
	}
	return 0
}

func (x *SensorAlert) GetSeverity() string {
	if x != nil {
		return x.Severity
	}
	return ""
}

func (x *SensorAlert) GetZoneName() string {
	if x != nil && x.ZoneName != nil {
		return *x.ZoneName
	}
	return ""
}

func (x *SensorAlert) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *SensorAlert) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type SensorReading struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SensorId      string                 `protobuf:"bytes,1,opt,name=sensor_id,json=sensorId,proto3" json:"sensor_id,omitempty"`
	SensorName    string                 `protobuf:"bytes,2,opt,name=sensor_name,json=sensorName,proto3" json:"sensor_name,omitempty"`
	Value         float64                `protobuf:"fixed64,3,opt,name=value,proto3" json:"value,omitempty"`
	Unit          string                 `protobuf:"bytes,4,opt,name=unit,proto3" json:"unit,omitempty"`
	Timestamp     *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Location      *string                `protobuf:"bytes,6,opt,name=location,proto3,oneof" json:"location,omitempty"`
	ZoneName      *string                `protobuf:"bytes,7,opt,name=zone_name,json=zoneName,proto3,oneof" json:"zone_name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SensorReading) Reset() {
	*x = SensorReading{}
	mi := &file_schema_v1alpha1_sensor_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SensorReading) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SensorReading) ProtoMessage() {}

func (x *SensorReading) ProtoReflect() protoreflect.Message {
	mi := &file_schema_v1alpha1_sensor_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SensorReading.ProtoReflect.Descriptor instead.
func (*SensorReading) Descriptor() ([]byte, []int) {
	return file_schema_v1alpha1_sensor_proto_rawDescGZIP(), []int{10}
}

func (x *SensorReading) GetSensorId() string {
	if x != nil {
		return x.SensorId
	}
	return ""
}

func (x *SensorReading) GetSensorName() string {
	if x != nil {
		return x.SensorName
	}
	return ""
}

func (x *SensorReading) GetValue() float64 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *SensorReading) GetUnit() string {
	if x != nil {
		return x.Unit
	}
	return ""
}

func (x *SensorReading) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *SensorReading) GetLocation() string {
	if x != nil && x.Location != nil {
		return *x.Location
	}
	return ""
}

func (x *SensorReading) GetZoneName() string {
	if x != nil && x.ZoneName != nil {
		return *x.ZoneName
	}
	return ""
}

type SensorDataRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SensorIds     []string               `protobuf:"bytes,1,rep,name=sensor_ids,json=sensorIds,proto3" json:"sensor_ids,omitempty"`
	ZoneName      *string                `protobuf:"bytes,2,opt,name=zone_name,json=zoneName,proto3,oneof" json:"zone_name,omitempty"`
	ContextFilter *SensorContext         `protobuf:"varint,3,opt,name=context_filter,json=contextFilter,proto3,enum=schema.v1alpha1.SensorContext,oneof" json:"context_filter,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SensorDataRequest) Reset() {
	*x = SensorDataRequest{}
	mi := &file_schema_v1alpha1_sensor_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SensorDataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SensorDataRequest) ProtoMessage() {}

func (x *SensorDataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_schema_v1alpha1_sensor_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SensorDataRequest.ProtoReflect.Descriptor instead.
func (*SensorDataRequest) Descriptor() ([]byte, []int) {
	return file_schema_v1alpha1_sensor_proto_rawDescGZIP(), []int{11}
}

func (x *SensorDataRequest) GetSensorIds() []string {
	if x != nil {
		return x.SensorIds
	}
	return nil
}

func (x *SensorDataRequest) GetZoneName() string {
	if x != nil && x.ZoneName != nil {
		return *x.ZoneName
	}
	return ""
}

func (x *SensorDataRequest) GetContextFilter() SensorContext {
	if x != nil && x.ContextFilter != nil {
		return *x.ContextFilter
	}
	return SensorContext_SENSOR_CONTEXT_UNSPECIFIED
}

type SensorDataResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Readings      []*SensorReading       `protobuf:"bytes,1,rep,name=readings,proto3" json:"readings,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SensorDataResponse) Reset() {
	*x = SensorDataResponse{}
	mi := &file_schema_v1alpha1_sensor_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SensorDataResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SensorDataResponse) ProtoMessage() {}

func (x *SensorDataResponse) ProtoReflect() protoreflect.Message {
	mi := &file_schema_v1alpha1_sensor_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SensorDataResponse.ProtoReflect.Descriptor instead.
func (*SensorDataResponse) Descriptor() ([]byte, []int) {
	return file_schema_v1alpha1_sensor_proto_rawDescGZIP(), []int{12}
}

func (x *SensorDataResponse) GetReadings() []*SensorReading {
	if x != nil {
		return x.Readings
	}
	return nil
}

type SensorConfigRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Action        string                 `protobuf:"bytes,1,opt,name=action,proto3" json:"action,omitempty"`
	SensorId      string                 `protobuf:"bytes,2,opt,name=sensor_id,json=sensorId,proto3" json:"sensor_id,omitempty"`
	ZoneName      *string                `protobuf:"bytes,3,opt,name=zone_name,json=zoneName,proto3,oneof" json:"zone_name,omitempty"`
	Attributes    map[string]string      `protobuf:"bytes,4,rep,name=attributes,proto3" json:"attributes,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SensorConfigRequest) Reset() {
	*x = SensorConfigRequest{}
	mi := &file_schema_v1alpha1_sensor_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SensorConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SensorConfigRequest) ProtoMessage() {}

func (x *SensorConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_schema_v1alpha1_sensor_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SensorConfigRequest.ProtoReflect.Descriptor instead.
func (*SensorConfigRequest) Descriptor() ([]byte, []int) {
	return file_schema_v1alpha1_sensor_proto_rawDescGZIP(), []int{13}
}

func (x *SensorConfigRequest) GetAction() string {
	if x != nil {
		return x.Action
	}
	return ""
}

func (x *SensorConfigRequest) GetSensorId() string {
	if x != nil {
		return x.SensorId
	}
	return ""
}

func (x *SensorConfigRequest) GetZoneName() string {
	if x != nil && x.ZoneName != nil {
		return *x.ZoneName
	}
	return ""
}

func (x *SensorConfigRequest) GetAttributes() map[string]string {
	if x != nil {
		return x.Attributes
	}
	return nil
}

type SensorConfigResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	ErrorMessage  *string                `protobuf:"bytes,2,opt,name=error_message,json=errorMessage,proto3,oneof" json:"error_message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SensorConfigResponse) Reset() {
	*x = SensorConfigResponse{}
	mi := &file_schema_v1alpha1_sensor_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SensorConfigResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SensorConfigResponse) ProtoMessage() {}

func (x *SensorConfigResponse) ProtoReflect() protoreflect.Message {
	mi := &file_schema_v1alpha1_sensor_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SensorConfigResponse.ProtoReflect.Descriptor instead.
func (*SensorConfigResponse) Descriptor() ([]byte, []int) {
	return file_schema_v1alpha1_sensor_proto_rawDescGZIP(), []int{14}
}

func (x *SensorConfigResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *SensorConfigResponse) GetErrorMessage() string {
	if x != nil && x.ErrorMessage != nil {
		return *x.ErrorMessage
	}
	return ""
}

var File_schema_v1alpha1_sensor_proto protoreflect.FileDescriptor

const file_schema_v1alpha1_sensor_proto_rawDesc = "" +
	"\n" +
	"\x1cschema/v1alpha1/sensor.proto\x12\x0fschema.v1alpha1\x1a\x1bbuf/validate/validate.proto\x1a google/protobuf/field_mask.proto\x1a\x1fgoogle/protobuf/timestamp.proto\x1a\x1eschema/v1alpha1/location.proto\"\x9e\v\n" +
	"\x06Sensor\x12\x17\n" +
	"\x02id\x18\x01 \x01(\tB\a\xbaH\x04r\x02\x10\x01R\x02id\x12\x1b\n" +
	"\x04name\x18\x02 \x01(\tB\a\xbaH\x04r\x02\x10\x01R\x04name\x12G\n" +
	"\acontext\x18\x03 \x01(\x0e2\x1e.schema.v1alpha1.SensorContextB\b\xbaH\x05\x82\x01\x02\x10\x01H\x01R\acontext\x88\x01\x01\x12D\n" +
	"\x06status\x18\x04 \x01(\x0e2\x1d.schema.v1alpha1.SensorStatusB\b\xbaH\x05\x82\x01\x02\x10\x01H\x02R\x06status\x88\x01\x01\x12>\n" +
	"\x04unit\x18\x05 \x01(\x0e2\x1b.schema.v1alpha1.SensorUnitB\b\xbaH\x05\x82\x01\x02\x10\x01H\x03R\x04unit\x88\x01\x01\x12M\n" +
	"\x0eanalog_reading\x18\x06 \x01(\v2$.schema.v1alpha1.AnalogSensorReadingH\x00R\ranalogReading\x12S\n" +
	"\x10discrete_reading\x18\a \x01(\v2&.schema.v1alpha1.DiscreteSensorReadingH\x00R\x0fdiscreteReading\x12:\n" +
	"\blocation\x18\b \x01(\v2\x19.schema.v1alpha1.LocationH\x04R\blocation\x88\x01\x01\x12U\n" +
	"\x16last_reading_timestamp\x18\t \x01(\v2\x1a.google.protobuf.TimestampH\x05R\x14lastReadingTimestamp\x88\x01\x01\x12Z\n" +
	"\x11custom_attributes\x18\n" +
	" \x03(\v2-.schema.v1alpha1.Sensor.CustomAttributesEntryR\x10customAttributes\x1aC\n" +
	"\x15CustomAttributesEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01:\xdc\x04\xbaH\xd8\x04\x1a\xd5\x04\n" +
	"!sensor_context_unit_compatibility\x122sensor unit must be compatible with sensor context\x1a\xfb\x03(this.context == 1 && (this.unit == 1 || this.unit == 2 || this.unit == 3)) || (this.context == 2 && this.unit == 4) || (this.context == 3 && this.unit == 5) || (this.context == 4 && (this.unit == 10 || this.unit == 9)) || (this.context == 5 && this.unit == 6) || (this.context == 6 && this.unit == 7) || (this.context == 7 && this.unit == 8) || (this.context == 8 && this.unit == 9) || (this.context == 9 && this.unit == 12) || (this.context == 10 && this.unit == 13) || this.context == 0 || this.unit == 0B\x10\n" +
	"\areading\x12\x05\xbaH\x02\b\x01B\n" +
	"\n" +
	"\b_contextB\t\n" +
	"\a_statusB\a\n" +
	"\x05_unitB\v\n" +
	"\t_locationB\x19\n" +
	"\x17_last_reading_timestamp\"\x81\f\n" +
	"\x13AnalogSensorReading\x12\x1c\n" +
	"\x05value\x18\x01 \x01(\x01B\x06\xbaH\x03\xc8\x01\x01R\x05value\x12J\n" +
	"\x10upper_thresholds\x18\x02 \x01(\v2\x1a.schema.v1alpha1.ThresholdH\x00R\x0fupperThresholds\x88\x01\x01\x12J\n" +
	"\x10lower_thresholds\x18\x03 \x01(\v2\x1a.schema.v1alpha1.ThresholdH\x01R\x0flowerThresholds\x88\x01\x01\x12N\n" +
	"\x10min_max_recorded\x18\x04 \x01(\v2\x1f.schema.v1alpha1.MinMaxRecordedH\x02R\x0eminMaxRecorded\x88\x01\x01:\xa4\t\xbaH\xa0\t\x1a\x93\x02\n" +
	"\x1eanalog_sensor_upper_thresholds\x12Bupper warning threshold must be less than upper critical threshold\x1a\xac\x01!has(this.upper_thresholds) || !has(this.upper_thresholds.warning) || !has(this.upper_thresholds.critical) || this.upper_thresholds.warning < this.upper_thresholds.critical\x1a\x93\x02\n" +
	"\x1eanalog_sensor_lower_thresholds\x12Blower critical threshold must be less than lower warning threshold\x1a\xac\x01!has(this.lower_thresholds) || !has(this.lower_thresholds.warning) || !has(this.lower_thresholds.critical) || this.lower_thresholds.critical < this.lower_thresholds.warning\x1a\xba\x03\n" +
	"\x1eanalog_sensor_threshold_bounds\x123lower thresholds must be less than upper thresholds\x1a\xe2\x02(!has(this.lower_thresholds) || !has(this.upper_thresholds)) || (!has(this.lower_thresholds.warning) || !has(this.upper_thresholds.warning) || this.lower_thresholds.warning < this.upper_thresholds.warning) && (!has(this.lower_thresholds.critical) || !has(this.upper_thresholds.critical) || this.lower_thresholds.critical < this.upper_thresholds.critical)\x1a\xb4\x01\n" +
	"\x1canalog_sensor_min_max_bounds\x121min_value must be less than or equal to max_value\x1aa!has(this.min_max_recorded) || this.min_max_recorded.min_value <= this.min_max_recorded.max_valueB\x13\n" +
	"\x11_upper_thresholdsB\x13\n" +
	"\x11_lower_thresholdsB\x13\n" +
	"\x11_min_max_recorded\"~\n" +
	"\x15DiscreteSensorReading\x12\x1d\n" +
	"\x05state\x18\x01 \x01(\tB\a\xbaH\x04r\x02\x10\x01R\x05state\x120\n" +
	"\x11state_description\x18\x02 \x01(\tH\x00R\x10stateDescription\x88\x01\x01B\x14\n" +
	"\x12_state_description\"\x9a\x02\n" +
	"\tThreshold\x12\x1d\n" +
	"\awarning\x18\x01 \x01(\x01H\x00R\awarning\x88\x01\x01\x12\x1f\n" +
	"\bcritical\x18\x02 \x01(\x01H\x01R\bcritical\x88\x01\x01:\xb3\x01\xbaH\xaf\x01\x1a\x95\x01\n" +
	"\x12threshold_ordering\x123warning threshold must not equal critical threshold\x1aJ!has(this.warning) || !has(this.critical) || this.warning != this.critical\"\x15\n" +
	"\awarning\n" +
	"\bcritical\x10\x01B\n" +
	"\n" +
	"\b_warningB\v\n" +
	"\t_critical\"\xe6\x02\n" +
	"\x0eMinMaxRecorded\x12\x1b\n" +
	"\tmin_value\x18\x01 \x01(\x01R\bminValue\x12\x1b\n" +
	"\tmax_value\x18\x02 \x01(\x01R\bmaxValue\x12D\n" +
	"\rmin_timestamp\x18\x03 \x01(\v2\x1a.google.protobuf.TimestampH\x00R\fminTimestamp\x88\x01\x01\x12D\n" +
	"\rmax_timestamp\x18\x04 \x01(\v2\x1a.google.protobuf.TimestampH\x01R\fmaxTimestamp\x88\x01\x01:j\xbaHg\x1ae\n" +
	"\x0emin_max_values\x121min_value must be less than or equal to max_value\x1a this.min_value <= this.max_valueB\x10\n" +
	"\x0e_min_timestampB\x10\n" +
	"\x0e_max_timestamp\"O\n" +
	"\x12ListSensorsRequest\x129\n" +
	"\n" +
	"field_mask\x18\x01 \x01(\v2\x1a.google.protobuf.FieldMaskR\tfieldMask\"F\n" +
	"\x13ListSensorsResponse\x12/\n" +
	"\x06sensor\x18\x01 \x03(\v2\x17.schema.v1alpha1.SensorR\x06sensor\"\xb8\x02\n" +
	"\x10GetSensorRequest\x12\x10\n" +
	"\x02id\x18\x01 \x01(\tH\x00R\x02id\x12\x14\n" +
	"\x04name\x18\x02 \x01(\tH\x00R\x04name\x12:\n" +
	"\acontext\x18\x03 \x01(\x0e2\x1e.schema.v1alpha1.SensorContextH\x00R\acontext\x127\n" +
	"\x06status\x18\x04 \x01(\x0e2\x1d.schema.v1alpha1.SensorStatusH\x00R\x06status\x127\n" +
	"\blocation\x18\x05 \x01(\v2\x19.schema.v1alpha1.LocationH\x00R\blocation\x129\n" +
	"\n" +
	"field_mask\x18\x06 \x01(\v2\x1a.google.protobuf.FieldMaskR\tfieldMaskB\x13\n" +
	"\n" +
	"identifier\x12\x05\xbaH\x02\b\x01\"F\n" +
	"\x11GetSensorResponse\x121\n" +
	"\asensors\x18\x01 \x03(\v2\x17.schema.v1alpha1.SensorR\asensors\"\xf3\x02\n" +
	"\vSensorAlert\x12\x1b\n" +
	"\x04type\x18\x01 \x01(\tB\a\xbaH\x04r\x02\x10\x01R\x04type\x12$\n" +
	"\tsensor_id\x18\x02 \x01(\tB\a\xbaH\x04r\x02\x10\x01R\bsensorId\x12(\n" +
	"\vsensor_name\x18\x03 \x01(\tB\a\xbaH\x04r\x02\x10\x01R\n" +
	"sensorName\x12\x14\n" +
	"\x05value\x18\x04 \x01(\x01R\x05value\x12!\n" +
	"\tthreshold\x18\x05 \x01(\x01H\x00R\tthreshold\x88\x01\x01\x12#\n" +
	"\bseverity\x18\x06 \x01(\tB\a\xbaH\x04r\x02\x10\x01R\bseverity\x12 \n" +
	"\tzone_name\x18\a \x01(\tH\x01R\bzoneName\x88\x01\x01\x128\n" +
	"\ttimestamp\x18\b \x01(\v2\x1a.google.protobuf.TimestampR\ttimestamp\x12!\n" +
	"\amessage\x18\t \x01(\tB\a\xbaH\x04r\x02\x10\x01R\amessageB\f\n" +
	"\n" +
	"_thresholdB\f\n" +
	"\n" +
	"_zone_name\"\xaa\x02\n" +
	"\rSensorReading\x12$\n" +
	"\tsensor_id\x18\x01 \x01(\tB\a\xbaH\x04r\x02\x10\x01R\bsensorId\x12(\n" +
	"\vsensor_name\x18\x02 \x01(\tB\a\xbaH\x04r\x02\x10\x01R\n" +
	"sensorName\x12\x14\n" +
	"\x05value\x18\x03 \x01(\x01R\x05value\x12\x1b\n" +
	"\x04unit\x18\x04 \x01(\tB\a\xbaH\x04r\x02\x10\x01R\x04unit\x128\n" +
	"\ttimestamp\x18\x05 \x01(\v2\x1a.google.protobuf.TimestampR\ttimestamp\x12\x1f\n" +
	"\blocation\x18\x06 \x01(\tH\x00R\blocation\x88\x01\x01\x12 \n" +
	"\tzone_name\x18\a \x01(\tH\x01R\bzoneName\x88\x01\x01B\v\n" +
	"\t_locationB\f\n" +
	"\n" +
	"_zone_name\"\xcb\x01\n" +
	"\x11SensorDataRequest\x12\x1d\n" +
	"\n" +
	"sensor_ids\x18\x01 \x03(\tR\tsensorIds\x12 \n" +
	"\tzone_name\x18\x02 \x01(\tH\x00R\bzoneName\x88\x01\x01\x12T\n" +
	"\x0econtext_filter\x18\x03 \x01(\x0e2\x1e.schema.v1alpha1.SensorContextB\b\xbaH\x05\x82\x01\x02\x10\x01H\x01R\rcontextFilter\x88\x01\x01B\f\n" +
	"\n" +
	"_zone_nameB\x11\n" +
	"\x0f_context_filter\"P\n" +
	"\x12SensorDataResponse\x12:\n" +
	"\breadings\x18\x01 \x03(\v2\x1e.schema.v1alpha1.SensorReadingR\breadings\"\xa1\x02\n" +
	"\x13SensorConfigRequest\x12\x1f\n" +
	"\x06action\x18\x01 \x01(\tB\a\xbaH\x04r\x02\x10\x01R\x06action\x12$\n" +
	"\tsensor_id\x18\x02 \x01(\tB\a\xbaH\x04r\x02\x10\x01R\bsensorId\x12 \n" +
	"\tzone_name\x18\x03 \x01(\tH\x00R\bzoneName\x88\x01\x01\x12T\n" +
	"\n" +
	"attributes\x18\x04 \x03(\v24.schema.v1alpha1.SensorConfigRequest.AttributesEntryR\n" +
	"attributes\x1a=\n" +
	"\x0fAttributesEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01B\f\n" +
	"\n" +
	"_zone_name\"l\n" +
	"\x14SensorConfigResponse\x12\x18\n" +
	"\asuccess\x18\x01 \x01(\bR\asuccess\x12(\n" +
	"\rerror_message\x18\x02 \x01(\tH\x00R\ferrorMessage\x88\x01\x01B\x10\n" +
	"\x0e_error_message*\xca\x02\n" +
	"\rSensorContext\x12\x1e\n" +
	"\x1aSENSOR_CONTEXT_UNSPECIFIED\x10\x00\x12\x1e\n" +
	"\x1aSENSOR_CONTEXT_TEMPERATURE\x10\x01\x12\x1a\n" +
	"\x16SENSOR_CONTEXT_VOLTAGE\x10\x02\x12\x1a\n" +
	"\x16SENSOR_CONTEXT_CURRENT\x10\x03\x12\x17\n" +
	"\x13SENSOR_CONTEXT_TACH\x10\x04\x12\x18\n" +
	"\x14SENSOR_CONTEXT_POWER\x10\x05\x12\x19\n" +
	"\x15SENSOR_CONTEXT_ENERGY\x10\x06\x12\x1b\n" +
	"\x17SENSOR_CONTEXT_PRESSURE\x10\a\x12\x1b\n" +
	"\x17SENSOR_CONTEXT_HUMIDITY\x10\b\x12\x1b\n" +
	"\x17SENSOR_CONTEXT_ALTITUDE\x10\t\x12\x1c\n" +
	"\x18SENSOR_CONTEXT_FLOW_RATE\x10\n" +
	"*\xee\x01\n" +
	"\fSensorStatus\x12\x1d\n" +
	"\x19SENSOR_STATUS_UNSPECIFIED\x10\x00\x12\x19\n" +
	"\x15SENSOR_STATUS_ENABLED\x10\x01\x12\x1a\n" +
	"\x16SENSOR_STATUS_DISABLED\x10\x02\x12\x1d\n" +
	"\x19SENSOR_STATUS_NOT_PRESENT\x10\x03\x12\x19\n" +
	"\x15SENSOR_STATUS_WARNING\x10\x04\x12\x1a\n" +
	"\x16SENSOR_STATUS_CRITICAL\x10\x05\x12\x17\n" +
	"\x13SENSOR_STATUS_ERROR\x10\x06\x12\x19\n" +
	"\x15SENSOR_STATUS_UNKNOWN\x10\a*\xeb\x02\n" +
	"\n" +
	"SensorUnit\x12\x1b\n" +
	"\x17SENSOR_UNIT_UNSPECIFIED\x10\x00\x12\x17\n" +
	"\x13SENSOR_UNIT_CELSIUS\x10\x01\x12\x1a\n" +
	"\x16SENSOR_UNIT_FAHRENHEIT\x10\x02\x12\x16\n" +
	"\x12SENSOR_UNIT_KELVIN\x10\x03\x12\x15\n" +
	"\x11SENSOR_UNIT_VOLTS\x10\x04\x12\x14\n" +
	"\x10SENSOR_UNIT_AMPS\x10\x05\x12\x15\n" +
	"\x11SENSOR_UNIT_WATTS\x10\x06\x12\x16\n" +
	"\x12SENSOR_UNIT_JOULES\x10\a\x12\x17\n" +
	"\x13SENSOR_UNIT_PASCALS\x10\b\x12\x17\n" +
	"\x13SENSOR_UNIT_PERCENT\x10\t\x12\x13\n" +
	"\x0fSENSOR_UNIT_RPM\x10\n" +
	"\x12\x15\n" +
	"\x11SENSOR_UNIT_HERTZ\x10\v\x12\x16\n" +
	"\x12SENSOR_UNIT_METERS\x10\f\x12!\n" +
	"\x1dSENSOR_UNIT_LITERS_PER_MINUTE\x10\rB\xbe\x01\n" +
	"\x13com.schema.v1alpha1B\vSensorProtoP\x01Z=github.com/u-bmc/u-bmc/api/gen/schema/v1alpha1;schemav1alpha1\xa2\x02\x03SXX\xaa\x02\x0fSchema.V1alpha1\xca\x02\x0fSchema\\V1alpha1\xe2\x02\x1bSchema\\V1alpha1\\GPBMetadata\xea\x02\x10Schema::V1alpha1b\x06proto3"

var (
	file_schema_v1alpha1_sensor_proto_rawDescOnce sync.Once
	file_schema_v1alpha1_sensor_proto_rawDescData []byte
)

func file_schema_v1alpha1_sensor_proto_rawDescGZIP() []byte {
	file_schema_v1alpha1_sensor_proto_rawDescOnce.Do(func() {
		file_schema_v1alpha1_sensor_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_schema_v1alpha1_sensor_proto_rawDesc), len(file_schema_v1alpha1_sensor_proto_rawDesc)))
	})
	return file_schema_v1alpha1_sensor_proto_rawDescData
}

var file_schema_v1alpha1_sensor_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_schema_v1alpha1_sensor_proto_msgTypes = make([]protoimpl.MessageInfo, 17)
var file_schema_v1alpha1_sensor_proto_goTypes = []any{
	(SensorContext)(0),            // 0: schema.v1alpha1.SensorContext
	(SensorStatus)(0),             // 1: schema.v1alpha1.SensorStatus
	(SensorUnit)(0),               // 2: schema.v1alpha1.SensorUnit
	(*Sensor)(nil),                // 3: schema.v1alpha1.Sensor
	(*AnalogSensorReading)(nil),   // 4: schema.v1alpha1.AnalogSensorReading
	(*DiscreteSensorReading)(nil), // 5: schema.v1alpha1.DiscreteSensorReading
	(*Threshold)(nil),             // 6: schema.v1alpha1.Threshold
	(*MinMaxRecorded)(nil),        // 7: schema.v1alpha1.MinMaxRecorded
	(*ListSensorsRequest)(nil),    // 8: schema.v1alpha1.ListSensorsRequest
	(*ListSensorsResponse)(nil),   // 9: schema.v1alpha1.ListSensorsResponse
	(*GetSensorRequest)(nil),      // 10: schema.v1alpha1.GetSensorRequest
	(*GetSensorResponse)(nil),     // 11: schema.v1alpha1.GetSensorResponse
	(*SensorAlert)(nil),           // 12: schema.v1alpha1.SensorAlert
	(*SensorReading)(nil),         // 13: schema.v1alpha1.SensorReading
	(*SensorDataRequest)(nil),     // 14: schema.v1alpha1.SensorDataRequest
	(*SensorDataResponse)(nil),    // 15: schema.v1alpha1.SensorDataResponse
	(*SensorConfigRequest)(nil),   // 16: schema.v1alpha1.SensorConfigRequest
	(*SensorConfigResponse)(nil),  // 17: schema.v1alpha1.SensorConfigResponse
	nil,                           // 18: schema.v1alpha1.Sensor.CustomAttributesEntry
	nil,                           // 19: schema.v1alpha1.SensorConfigRequest.AttributesEntry
	(*Location)(nil),              // 20: schema.v1alpha1.Location
	(*timestamppb.Timestamp)(nil), // 21: google.protobuf.Timestamp
	(*fieldmaskpb.FieldMask)(nil), // 22: google.protobuf.FieldMask
}
var file_schema_v1alpha1_sensor_proto_depIdxs = []int32{
	0,  // 0: schema.v1alpha1.Sensor.context:type_name -> schema.v1alpha1.SensorContext
	1,  // 1: schema.v1alpha1.Sensor.status:type_name -> schema.v1alpha1.SensorStatus
	2,  // 2: schema.v1alpha1.Sensor.unit:type_name -> schema.v1alpha1.SensorUnit
	4,  // 3: schema.v1alpha1.Sensor.analog_reading:type_name -> schema.v1alpha1.AnalogSensorReading
	5,  // 4: schema.v1alpha1.Sensor.discrete_reading:type_name -> schema.v1alpha1.DiscreteSensorReading
	20, // 5: schema.v1alpha1.Sensor.location:type_name -> schema.v1alpha1.Location
	21, // 6: schema.v1alpha1.Sensor.last_reading_timestamp:type_name -> google.protobuf.Timestamp
	18, // 7: schema.v1alpha1.Sensor.custom_attributes:type_name -> schema.v1alpha1.Sensor.CustomAttributesEntry
	6,  // 8: schema.v1alpha1.AnalogSensorReading.upper_thresholds:type_name -> schema.v1alpha1.Threshold
	6,  // 9: schema.v1alpha1.AnalogSensorReading.lower_thresholds:type_name -> schema.v1alpha1.Threshold
	7,  // 10: schema.v1alpha1.AnalogSensorReading.min_max_recorded:type_name -> schema.v1alpha1.MinMaxRecorded
	21, // 11: schema.v1alpha1.MinMaxRecorded.min_timestamp:type_name -> google.protobuf.Timestamp
	21, // 12: schema.v1alpha1.MinMaxRecorded.max_timestamp:type_name -> google.protobuf.Timestamp
	22, // 13: schema.v1alpha1.ListSensorsRequest.field_mask:type_name -> google.protobuf.FieldMask
	3,  // 14: schema.v1alpha1.ListSensorsResponse.sensor:type_name -> schema.v1alpha1.Sensor
	0,  // 15: schema.v1alpha1.GetSensorRequest.context:type_name -> schema.v1alpha1.SensorContext
	1,  // 16: schema.v1alpha1.GetSensorRequest.status:type_name -> schema.v1alpha1.SensorStatus
	20, // 17: schema.v1alpha1.GetSensorRequest.location:type_name -> schema.v1alpha1.Location
	22, // 18: schema.v1alpha1.GetSensorRequest.field_mask:type_name -> google.protobuf.FieldMask
	3,  // 19: schema.v1alpha1.GetSensorResponse.sensors:type_name -> schema.v1alpha1.Sensor
	21, // 20: schema.v1alpha1.SensorAlert.timestamp:type_name -> google.protobuf.Timestamp
	21, // 21: schema.v1alpha1.SensorReading.timestamp:type_name -> google.protobuf.Timestamp
	0,  // 22: schema.v1alpha1.SensorDataRequest.context_filter:type_name -> schema.v1alpha1.SensorContext
	13, // 23: schema.v1alpha1.SensorDataResponse.readings:type_name -> schema.v1alpha1.SensorReading
	19, // 24: schema.v1alpha1.SensorConfigRequest.attributes:type_name -> schema.v1alpha1.SensorConfigRequest.AttributesEntry
	25, // [25:25] is the sub-list for method output_type
	25, // [25:25] is the sub-list for method input_type
	25, // [25:25] is the sub-list for extension type_name
	25, // [25:25] is the sub-list for extension extendee
	0,  // [0:25] is the sub-list for field type_name
}

func init() { file_schema_v1alpha1_sensor_proto_init() }
func file_schema_v1alpha1_sensor_proto_init() {
	if File_schema_v1alpha1_sensor_proto != nil {
		return
	}
	file_schema_v1alpha1_location_proto_init()
	file_schema_v1alpha1_sensor_proto_msgTypes[0].OneofWrappers = []any{
		(*Sensor_AnalogReading)(nil),
		(*Sensor_DiscreteReading)(nil),
	}
	file_schema_v1alpha1_sensor_proto_msgTypes[1].OneofWrappers = []any{}
	file_schema_v1alpha1_sensor_proto_msgTypes[2].OneofWrappers = []any{}
	file_schema_v1alpha1_sensor_proto_msgTypes[3].OneofWrappers = []any{}
	file_schema_v1alpha1_sensor_proto_msgTypes[4].OneofWrappers = []any{}
	file_schema_v1alpha1_sensor_proto_msgTypes[7].OneofWrappers = []any{
		(*GetSensorRequest_Id)(nil),
		(*GetSensorRequest_Name)(nil),
		(*GetSensorRequest_Context)(nil),
		(*GetSensorRequest_Status)(nil),
		(*GetSensorRequest_Location)(nil),
	}
	file_schema_v1alpha1_sensor_proto_msgTypes[9].OneofWrappers = []any{}
	file_schema_v1alpha1_sensor_proto_msgTypes[10].OneofWrappers = []any{}
	file_schema_v1alpha1_sensor_proto_msgTypes[11].OneofWrappers = []any{}
	file_schema_v1alpha1_sensor_proto_msgTypes[13].OneofWrappers = []any{}
	file_schema_v1alpha1_sensor_proto_msgTypes[14].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_schema_v1alpha1_sensor_proto_rawDesc), len(file_schema_v1alpha1_sensor_proto_rawDesc)),
			NumEnums:      3,
			NumMessages:   17,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_schema_v1alpha1_sensor_proto_goTypes,
		DependencyIndexes: file_schema_v1alpha1_sensor_proto_depIdxs,
		EnumInfos:         file_schema_v1alpha1_sensor_proto_enumTypes,
		MessageInfos:      file_schema_v1alpha1_sensor_proto_msgTypes,
	}.Build()
	File_schema_v1alpha1_sensor_proto = out.File
	file_schema_v1alpha1_sensor_proto_goTypes = nil
	file_schema_v1alpha1_sensor_proto_depIdxs = nil
}
