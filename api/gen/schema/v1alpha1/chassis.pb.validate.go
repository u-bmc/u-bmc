// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: schema/v1alpha1/chassis.proto

package schemav1alpha1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Chassis with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Chassis) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Chassis with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in ChassisMultiError, or nil if none found.
func (m *Chassis) ValidateAll() error {
	return m.validate(true)
}

func (m *Chassis) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	if all {
		switch v := interface{}(m.GetAsset()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ChassisValidationError{
					field:  "Asset",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ChassisValidationError{
					field:  "Asset",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAsset()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ChassisValidationError{
				field:  "Asset",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetSensors() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ChassisValidationError{
						field:  fmt.Sprintf("Sensors[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ChassisValidationError{
						field:  fmt.Sprintf("Sensors[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ChassisValidationError{
					field:  fmt.Sprintf("Sensors[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetThermalZones() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ChassisValidationError{
						field:  fmt.Sprintf("ThermalZones[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ChassisValidationError{
						field:  fmt.Sprintf("ThermalZones[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ChassisValidationError{
					field:  fmt.Sprintf("ThermalZones[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetCoolingDevices() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ChassisValidationError{
						field:  fmt.Sprintf("CoolingDevices[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ChassisValidationError{
						field:  fmt.Sprintf("CoolingDevices[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ChassisValidationError{
					field:  fmt.Sprintf("CoolingDevices[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetLeds() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ChassisValidationError{
						field:  fmt.Sprintf("Leds[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ChassisValidationError{
						field:  fmt.Sprintf("Leds[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ChassisValidationError{
					field:  fmt.Sprintf("Leds[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetContainedAssets() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ChassisValidationError{
						field:  fmt.Sprintf("ContainedAssets[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ChassisValidationError{
						field:  fmt.Sprintf("ContainedAssets[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ChassisValidationError{
					field:  fmt.Sprintf("ContainedAssets[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Metadata

	if m.Description != nil {
		// no validation rules for Description
	}

	if m.Type != nil {
		// no validation rules for Type
	}

	if m.FormFactor != nil {
		// no validation rules for FormFactor
	}

	if m.Status != nil {
		// no validation rules for Status
	}

	if m.RequestedTransition != nil {
		// no validation rules for RequestedTransition
	}

	if m.Location != nil {

		if all {
			switch v := interface{}(m.GetLocation()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ChassisValidationError{
						field:  "Location",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ChassisValidationError{
						field:  "Location",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetLocation()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ChassisValidationError{
					field:  "Location",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.Dimensions != nil {

		if all {
			switch v := interface{}(m.GetDimensions()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ChassisValidationError{
						field:  "Dimensions",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ChassisValidationError{
						field:  "Dimensions",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetDimensions()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ChassisValidationError{
					field:  "Dimensions",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.PowerInfo != nil {

		if all {
			switch v := interface{}(m.GetPowerInfo()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ChassisValidationError{
						field:  "PowerInfo",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ChassisValidationError{
						field:  "PowerInfo",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetPowerInfo()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ChassisValidationError{
					field:  "PowerInfo",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.Intrusion != nil {

		if all {
			switch v := interface{}(m.GetIntrusion()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ChassisValidationError{
						field:  "Intrusion",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ChassisValidationError{
						field:  "Intrusion",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetIntrusion()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ChassisValidationError{
					field:  "Intrusion",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.UpdatedAt != nil {

		if all {
			switch v := interface{}(m.GetUpdatedAt()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ChassisValidationError{
						field:  "UpdatedAt",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ChassisValidationError{
						field:  "UpdatedAt",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ChassisValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ChassisMultiError(errors)
	}

	return nil
}

// ChassisMultiError is an error wrapping multiple validation errors returned
// by Chassis.ValidateAll() if the designated constraints aren't met.
type ChassisMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChassisMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChassisMultiError) AllErrors() []error { return m }

// ChassisValidationError is the validation error returned by Chassis.Validate
// if the designated constraints aren't met.
type ChassisValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChassisValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChassisValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChassisValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChassisValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChassisValidationError) ErrorName() string { return "ChassisValidationError" }

// Error satisfies the builtin error interface
func (e ChassisValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChassis.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChassisValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChassisValidationError{}

// Validate checks the field values on ChassisPowerInfo with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ChassisPowerInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ChassisPowerInfo with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ChassisPowerInfoMultiError, or nil if none found.
func (m *ChassisPowerInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *ChassisPowerInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetPowerSupplies() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ChassisPowerInfoValidationError{
						field:  fmt.Sprintf("PowerSupplies[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ChassisPowerInfoValidationError{
						field:  fmt.Sprintf("PowerSupplies[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ChassisPowerInfoValidationError{
					field:  fmt.Sprintf("PowerSupplies[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetPowerDistribution() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ChassisPowerInfoValidationError{
						field:  fmt.Sprintf("PowerDistribution[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ChassisPowerInfoValidationError{
						field:  fmt.Sprintf("PowerDistribution[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ChassisPowerInfoValidationError{
					field:  fmt.Sprintf("PowerDistribution[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetPowerBudgets() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ChassisPowerInfoValidationError{
						field:  fmt.Sprintf("PowerBudgets[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ChassisPowerInfoValidationError{
						field:  fmt.Sprintf("PowerBudgets[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ChassisPowerInfoValidationError{
					field:  fmt.Sprintf("PowerBudgets[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.PowerCapacityWatts != nil {
		// no validation rules for PowerCapacityWatts
	}

	if m.PowerConsumedWatts != nil {
		// no validation rules for PowerConsumedWatts
	}

	if m.Redundancy != nil {

		if all {
			switch v := interface{}(m.GetRedundancy()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ChassisPowerInfoValidationError{
						field:  "Redundancy",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ChassisPowerInfoValidationError{
						field:  "Redundancy",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetRedundancy()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ChassisPowerInfoValidationError{
					field:  "Redundancy",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ChassisPowerInfoMultiError(errors)
	}

	return nil
}

// ChassisPowerInfoMultiError is an error wrapping multiple validation errors
// returned by ChassisPowerInfo.ValidateAll() if the designated constraints
// aren't met.
type ChassisPowerInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChassisPowerInfoMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChassisPowerInfoMultiError) AllErrors() []error { return m }

// ChassisPowerInfoValidationError is the validation error returned by
// ChassisPowerInfo.Validate if the designated constraints aren't met.
type ChassisPowerInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChassisPowerInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChassisPowerInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChassisPowerInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChassisPowerInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChassisPowerInfoValidationError) ErrorName() string { return "ChassisPowerInfoValidationError" }

// Error satisfies the builtin error interface
func (e ChassisPowerInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChassisPowerInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChassisPowerInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChassisPowerInfoValidationError{}

// Validate checks the field values on ChassisPowerSupply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ChassisPowerSupply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ChassisPowerSupply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ChassisPowerSupplyMultiError, or nil if none found.
func (m *ChassisPowerSupply) ValidateAll() error {
	return m.validate(true)
}

func (m *ChassisPowerSupply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PsuId

	if all {
		switch v := interface{}(m.GetAsset()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ChassisPowerSupplyValidationError{
					field:  "Asset",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ChassisPowerSupplyValidationError{
					field:  "Asset",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAsset()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ChassisPowerSupplyValidationError{
				field:  "Asset",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.Type != nil {
		// no validation rules for Type
	}

	if m.Status != nil {
		// no validation rules for Status
	}

	if m.CapacityWatts != nil {
		// no validation rules for CapacityWatts
	}

	if m.OutputWatts != nil {
		// no validation rules for OutputWatts
	}

	if m.EfficiencyRating != nil {
		// no validation rules for EfficiencyRating
	}

	if m.InputVoltage != nil {
		// no validation rules for InputVoltage
	}

	if m.OutputVoltage != nil {
		// no validation rules for OutputVoltage
	}

	if m.InputCurrent != nil {
		// no validation rules for InputCurrent
	}

	if m.OutputCurrent != nil {
		// no validation rules for OutputCurrent
	}

	if m.TemperatureCelsius != nil {
		// no validation rules for TemperatureCelsius
	}

	if m.FanSpeedRpm != nil {
		// no validation rules for FanSpeedRpm
	}

	if m.HotSwappable != nil {
		// no validation rules for HotSwappable
	}

	if m.Redundant != nil {
		// no validation rules for Redundant
	}

	if m.Location != nil {

		if all {
			switch v := interface{}(m.GetLocation()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ChassisPowerSupplyValidationError{
						field:  "Location",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ChassisPowerSupplyValidationError{
						field:  "Location",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetLocation()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ChassisPowerSupplyValidationError{
					field:  "Location",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ChassisPowerSupplyMultiError(errors)
	}

	return nil
}

// ChassisPowerSupplyMultiError is an error wrapping multiple validation errors
// returned by ChassisPowerSupply.ValidateAll() if the designated constraints
// aren't met.
type ChassisPowerSupplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChassisPowerSupplyMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChassisPowerSupplyMultiError) AllErrors() []error { return m }

// ChassisPowerSupplyValidationError is the validation error returned by
// ChassisPowerSupply.Validate if the designated constraints aren't met.
type ChassisPowerSupplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChassisPowerSupplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChassisPowerSupplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChassisPowerSupplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChassisPowerSupplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChassisPowerSupplyValidationError) ErrorName() string {
	return "ChassisPowerSupplyValidationError"
}

// Error satisfies the builtin error interface
func (e ChassisPowerSupplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChassisPowerSupply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChassisPowerSupplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChassisPowerSupplyValidationError{}

// Validate checks the field values on ChassisPowerDistribution with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ChassisPowerDistribution) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ChassisPowerDistribution with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ChassisPowerDistributionMultiError, or nil if none found.
func (m *ChassisPowerDistribution) ValidateAll() error {
	return m.validate(true)
}

func (m *ChassisPowerDistribution) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PduId

	for idx, item := range m.GetCircuits() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ChassisPowerDistributionValidationError{
						field:  fmt.Sprintf("Circuits[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ChassisPowerDistributionValidationError{
						field:  fmt.Sprintf("Circuits[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ChassisPowerDistributionValidationError{
					field:  fmt.Sprintf("Circuits[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.Name != nil {
		// no validation rules for Name
	}

	if m.CapacityWatts != nil {
		// no validation rules for CapacityWatts
	}

	if m.LoadWatts != nil {
		// no validation rules for LoadWatts
	}

	if len(errors) > 0 {
		return ChassisPowerDistributionMultiError(errors)
	}

	return nil
}

// ChassisPowerDistributionMultiError is an error wrapping multiple validation
// errors returned by ChassisPowerDistribution.ValidateAll() if the designated
// constraints aren't met.
type ChassisPowerDistributionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChassisPowerDistributionMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChassisPowerDistributionMultiError) AllErrors() []error { return m }

// ChassisPowerDistributionValidationError is the validation error returned by
// ChassisPowerDistribution.Validate if the designated constraints aren't met.
type ChassisPowerDistributionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChassisPowerDistributionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChassisPowerDistributionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChassisPowerDistributionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChassisPowerDistributionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChassisPowerDistributionValidationError) ErrorName() string {
	return "ChassisPowerDistributionValidationError"
}

// Error satisfies the builtin error interface
func (e ChassisPowerDistributionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChassisPowerDistribution.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChassisPowerDistributionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChassisPowerDistributionValidationError{}

// Validate checks the field values on PowerCircuit with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PowerCircuit) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PowerCircuit with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PowerCircuitMultiError, or
// nil if none found.
func (m *PowerCircuit) ValidateAll() error {
	return m.validate(true)
}

func (m *PowerCircuit) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CircuitId

	if m.Name != nil {
		// no validation rules for Name
	}

	if m.Voltage != nil {
		// no validation rules for Voltage
	}

	if m.CurrentAmps != nil {
		// no validation rules for CurrentAmps
	}

	if m.PowerWatts != nil {
		// no validation rules for PowerWatts
	}

	if m.BreakerRatingAmps != nil {
		// no validation rules for BreakerRatingAmps
	}

	if len(errors) > 0 {
		return PowerCircuitMultiError(errors)
	}

	return nil
}

// PowerCircuitMultiError is an error wrapping multiple validation errors
// returned by PowerCircuit.ValidateAll() if the designated constraints aren't met.
type PowerCircuitMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PowerCircuitMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PowerCircuitMultiError) AllErrors() []error { return m }

// PowerCircuitValidationError is the validation error returned by
// PowerCircuit.Validate if the designated constraints aren't met.
type PowerCircuitValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PowerCircuitValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PowerCircuitValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PowerCircuitValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PowerCircuitValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PowerCircuitValidationError) ErrorName() string { return "PowerCircuitValidationError" }

// Error satisfies the builtin error interface
func (e PowerCircuitValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPowerCircuit.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PowerCircuitValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PowerCircuitValidationError{}

// Validate checks the field values on ChassisPowerRedundancy with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ChassisPowerRedundancy) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ChassisPowerRedundancy with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ChassisPowerRedundancyMultiError, or nil if none found.
func (m *ChassisPowerRedundancy) ValidateAll() error {
	return m.validate(true)
}

func (m *ChassisPowerRedundancy) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Enabled

	if m.Mode != nil {
		// no validation rules for Mode
	}

	if m.RequiredSupplies != nil {
		// no validation rules for RequiredSupplies
	}

	if m.AvailableSupplies != nil {
		// no validation rules for AvailableSupplies
	}

	if m.Status != nil {
		// no validation rules for Status
	}

	if len(errors) > 0 {
		return ChassisPowerRedundancyMultiError(errors)
	}

	return nil
}

// ChassisPowerRedundancyMultiError is an error wrapping multiple validation
// errors returned by ChassisPowerRedundancy.ValidateAll() if the designated
// constraints aren't met.
type ChassisPowerRedundancyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChassisPowerRedundancyMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChassisPowerRedundancyMultiError) AllErrors() []error { return m }

// ChassisPowerRedundancyValidationError is the validation error returned by
// ChassisPowerRedundancy.Validate if the designated constraints aren't met.
type ChassisPowerRedundancyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChassisPowerRedundancyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChassisPowerRedundancyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChassisPowerRedundancyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChassisPowerRedundancyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChassisPowerRedundancyValidationError) ErrorName() string {
	return "ChassisPowerRedundancyValidationError"
}

// Error satisfies the builtin error interface
func (e ChassisPowerRedundancyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChassisPowerRedundancy.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChassisPowerRedundancyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChassisPowerRedundancyValidationError{}

// Validate checks the field values on ChassisPowerBudget with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ChassisPowerBudget) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ChassisPowerBudget with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ChassisPowerBudgetMultiError, or nil if none found.
func (m *ChassisPowerBudget) ValidateAll() error {
	return m.validate(true)
}

func (m *ChassisPowerBudget) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AllocatedTo

	if m.AllocatedWatts != nil {
		// no validation rules for AllocatedWatts
	}

	if m.UsedWatts != nil {
		// no validation rules for UsedWatts
	}

	if m.MaxWatts != nil {
		// no validation rules for MaxWatts
	}

	if m.Priority != nil {
		// no validation rules for Priority
	}

	if len(errors) > 0 {
		return ChassisPowerBudgetMultiError(errors)
	}

	return nil
}

// ChassisPowerBudgetMultiError is an error wrapping multiple validation errors
// returned by ChassisPowerBudget.ValidateAll() if the designated constraints
// aren't met.
type ChassisPowerBudgetMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChassisPowerBudgetMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChassisPowerBudgetMultiError) AllErrors() []error { return m }

// ChassisPowerBudgetValidationError is the validation error returned by
// ChassisPowerBudget.Validate if the designated constraints aren't met.
type ChassisPowerBudgetValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChassisPowerBudgetValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChassisPowerBudgetValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChassisPowerBudgetValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChassisPowerBudgetValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChassisPowerBudgetValidationError) ErrorName() string {
	return "ChassisPowerBudgetValidationError"
}

// Error satisfies the builtin error interface
func (e ChassisPowerBudgetValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChassisPowerBudget.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChassisPowerBudgetValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChassisPowerBudgetValidationError{}

// Validate checks the field values on ChassisLED with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ChassisLED) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ChassisLED with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ChassisLEDMultiError, or
// nil if none found.
func (m *ChassisLED) ValidateAll() error {
	return m.validate(true)
}

func (m *ChassisLED) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for LedId

	if m.Name != nil {
		// no validation rules for Name
	}

	if m.Type != nil {
		// no validation rules for Type
	}

	if m.State != nil {
		// no validation rules for State
	}

	if m.Color != nil {
		// no validation rules for Color
	}

	if m.BlinkPattern != nil {
		// no validation rules for BlinkPattern
	}

	if m.Controllable != nil {
		// no validation rules for Controllable
	}

	if len(errors) > 0 {
		return ChassisLEDMultiError(errors)
	}

	return nil
}

// ChassisLEDMultiError is an error wrapping multiple validation errors
// returned by ChassisLED.ValidateAll() if the designated constraints aren't met.
type ChassisLEDMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChassisLEDMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChassisLEDMultiError) AllErrors() []error { return m }

// ChassisLEDValidationError is the validation error returned by
// ChassisLED.Validate if the designated constraints aren't met.
type ChassisLEDValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChassisLEDValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChassisLEDValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChassisLEDValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChassisLEDValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChassisLEDValidationError) ErrorName() string { return "ChassisLEDValidationError" }

// Error satisfies the builtin error interface
func (e ChassisLEDValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChassisLED.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChassisLEDValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChassisLEDValidationError{}

// Validate checks the field values on ChassisIntrusion with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ChassisIntrusion) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ChassisIntrusion with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ChassisIntrusionMultiError, or nil if none found.
func (m *ChassisIntrusion) ValidateAll() error {
	return m.validate(true)
}

func (m *ChassisIntrusion) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Enabled

	// no validation rules for IntrusionDetected

	if m.LastIntrusion != nil {

		if all {
			switch v := interface{}(m.GetLastIntrusion()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ChassisIntrusionValidationError{
						field:  "LastIntrusion",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ChassisIntrusionValidationError{
						field:  "LastIntrusion",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetLastIntrusion()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ChassisIntrusionValidationError{
					field:  "LastIntrusion",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.IntrusionCount != nil {
		// no validation rules for IntrusionCount
	}

	if m.ResetCount != nil {
		// no validation rules for ResetCount
	}

	if m.SensorStatus != nil {
		// no validation rules for SensorStatus
	}

	if len(errors) > 0 {
		return ChassisIntrusionMultiError(errors)
	}

	return nil
}

// ChassisIntrusionMultiError is an error wrapping multiple validation errors
// returned by ChassisIntrusion.ValidateAll() if the designated constraints
// aren't met.
type ChassisIntrusionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChassisIntrusionMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChassisIntrusionMultiError) AllErrors() []error { return m }

// ChassisIntrusionValidationError is the validation error returned by
// ChassisIntrusion.Validate if the designated constraints aren't met.
type ChassisIntrusionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChassisIntrusionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChassisIntrusionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChassisIntrusionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChassisIntrusionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChassisIntrusionValidationError) ErrorName() string { return "ChassisIntrusionValidationError" }

// Error satisfies the builtin error interface
func (e ChassisIntrusionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChassisIntrusion.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChassisIntrusionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChassisIntrusionValidationError{}

// Validate checks the field values on ExpansionBay with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ExpansionBay) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ExpansionBay with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ExpansionBayMultiError, or
// nil if none found.
func (m *ExpansionBay) ValidateAll() error {
	return m.validate(true)
}

func (m *ExpansionBay) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for BayId

	if m.Name != nil {
		// no validation rules for Name
	}

	if m.BayType != nil {
		// no validation rules for BayType
	}

	if m.Occupied != nil {
		// no validation rules for Occupied
	}

	if m.InstalledComponent != nil {
		// no validation rules for InstalledComponent
	}

	if m.Location != nil {

		if all {
			switch v := interface{}(m.GetLocation()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ExpansionBayValidationError{
						field:  "Location",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ExpansionBayValidationError{
						field:  "Location",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetLocation()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ExpansionBayValidationError{
					field:  "Location",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ExpansionBayMultiError(errors)
	}

	return nil
}

// ExpansionBayMultiError is an error wrapping multiple validation errors
// returned by ExpansionBay.ValidateAll() if the designated constraints aren't met.
type ExpansionBayMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ExpansionBayMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ExpansionBayMultiError) AllErrors() []error { return m }

// ExpansionBayValidationError is the validation error returned by
// ExpansionBay.Validate if the designated constraints aren't met.
type ExpansionBayValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExpansionBayValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExpansionBayValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExpansionBayValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExpansionBayValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExpansionBayValidationError) ErrorName() string { return "ExpansionBayValidationError" }

// Error satisfies the builtin error interface
func (e ExpansionBayValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExpansionBay.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExpansionBayValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExpansionBayValidationError{}

// Validate checks the field values on Slot with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Slot) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Slot with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in SlotMultiError, or nil if none found.
func (m *Slot) ValidateAll() error {
	return m.validate(true)
}

func (m *Slot) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for SlotId

	if m.Name != nil {
		// no validation rules for Name
	}

	if m.SlotType != nil {
		// no validation rules for SlotType
	}

	if m.Occupied != nil {
		// no validation rules for Occupied
	}

	if m.InstalledComponent != nil {
		// no validation rules for InstalledComponent
	}

	if m.Location != nil {

		if all {
			switch v := interface{}(m.GetLocation()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SlotValidationError{
						field:  "Location",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SlotValidationError{
						field:  "Location",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetLocation()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SlotValidationError{
					field:  "Location",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return SlotMultiError(errors)
	}

	return nil
}

// SlotMultiError is an error wrapping multiple validation errors returned by
// Slot.ValidateAll() if the designated constraints aren't met.
type SlotMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SlotMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SlotMultiError) AllErrors() []error { return m }

// SlotValidationError is the validation error returned by Slot.Validate if the
// designated constraints aren't met.
type SlotValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SlotValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SlotValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SlotValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SlotValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SlotValidationError) ErrorName() string { return "SlotValidationError" }

// Error satisfies the builtin error interface
func (e SlotValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSlot.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SlotValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SlotValidationError{}

// Validate checks the field values on GetChassisRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetChassisRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetChassisRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetChassisRequestMultiError, or nil if none found.
func (m *GetChassisRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetChassisRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch v := m.Identifier.(type) {
	case *GetChassisRequest_ChassisId:
		if v == nil {
			err := GetChassisRequestValidationError{
				field:  "Identifier",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for ChassisId
	case *GetChassisRequest_Name:
		if v == nil {
			err := GetChassisRequestValidationError{
				field:  "Identifier",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for Name
	case *GetChassisRequest_Type:
		if v == nil {
			err := GetChassisRequestValidationError{
				field:  "Identifier",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for Type
	case *GetChassisRequest_Status:
		if v == nil {
			err := GetChassisRequestValidationError{
				field:  "Identifier",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for Status
	case *GetChassisRequest_Location:
		if v == nil {
			err := GetChassisRequestValidationError{
				field:  "Identifier",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetLocation()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetChassisRequestValidationError{
						field:  "Location",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetChassisRequestValidationError{
						field:  "Location",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetLocation()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetChassisRequestValidationError{
					field:  "Location",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if m.FieldMask != nil {

		if all {
			switch v := interface{}(m.GetFieldMask()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetChassisRequestValidationError{
						field:  "FieldMask",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetChassisRequestValidationError{
						field:  "FieldMask",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetFieldMask()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetChassisRequestValidationError{
					field:  "FieldMask",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetChassisRequestMultiError(errors)
	}

	return nil
}

// GetChassisRequestMultiError is an error wrapping multiple validation errors
// returned by GetChassisRequest.ValidateAll() if the designated constraints
// aren't met.
type GetChassisRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetChassisRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetChassisRequestMultiError) AllErrors() []error { return m }

// GetChassisRequestValidationError is the validation error returned by
// GetChassisRequest.Validate if the designated constraints aren't met.
type GetChassisRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetChassisRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetChassisRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetChassisRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetChassisRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetChassisRequestValidationError) ErrorName() string {
	return "GetChassisRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetChassisRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetChassisRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetChassisRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetChassisRequestValidationError{}

// Validate checks the field values on GetChassisResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetChassisResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetChassisResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetChassisResponseMultiError, or nil if none found.
func (m *GetChassisResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetChassisResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetChassis() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetChassisResponseValidationError{
						field:  fmt.Sprintf("Chassis[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetChassisResponseValidationError{
						field:  fmt.Sprintf("Chassis[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetChassisResponseValidationError{
					field:  fmt.Sprintf("Chassis[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetChassisResponseMultiError(errors)
	}

	return nil
}

// GetChassisResponseMultiError is an error wrapping multiple validation errors
// returned by GetChassisResponse.ValidateAll() if the designated constraints
// aren't met.
type GetChassisResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetChassisResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetChassisResponseMultiError) AllErrors() []error { return m }

// GetChassisResponseValidationError is the validation error returned by
// GetChassisResponse.Validate if the designated constraints aren't met.
type GetChassisResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetChassisResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetChassisResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetChassisResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetChassisResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetChassisResponseValidationError) ErrorName() string {
	return "GetChassisResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetChassisResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetChassisResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetChassisResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetChassisResponseValidationError{}

// Validate checks the field values on ListChassisRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListChassisRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListChassisRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListChassisRequestMultiError, or nil if none found.
func (m *ListChassisRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListChassisRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.Type != nil {
		// no validation rules for Type
	}

	if m.Status != nil {
		// no validation rules for Status
	}

	if m.FieldMask != nil {

		if all {
			switch v := interface{}(m.GetFieldMask()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListChassisRequestValidationError{
						field:  "FieldMask",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListChassisRequestValidationError{
						field:  "FieldMask",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetFieldMask()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListChassisRequestValidationError{
					field:  "FieldMask",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.PageSize != nil {
		// no validation rules for PageSize
	}

	if m.PageToken != nil {
		// no validation rules for PageToken
	}

	if len(errors) > 0 {
		return ListChassisRequestMultiError(errors)
	}

	return nil
}

// ListChassisRequestMultiError is an error wrapping multiple validation errors
// returned by ListChassisRequest.ValidateAll() if the designated constraints
// aren't met.
type ListChassisRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListChassisRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListChassisRequestMultiError) AllErrors() []error { return m }

// ListChassisRequestValidationError is the validation error returned by
// ListChassisRequest.Validate if the designated constraints aren't met.
type ListChassisRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListChassisRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListChassisRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListChassisRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListChassisRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListChassisRequestValidationError) ErrorName() string {
	return "ListChassisRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListChassisRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListChassisRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListChassisRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListChassisRequestValidationError{}

// Validate checks the field values on ListChassisResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListChassisResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListChassisResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListChassisResponseMultiError, or nil if none found.
func (m *ListChassisResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListChassisResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetChassis() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListChassisResponseValidationError{
						field:  fmt.Sprintf("Chassis[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListChassisResponseValidationError{
						field:  fmt.Sprintf("Chassis[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListChassisResponseValidationError{
					field:  fmt.Sprintf("Chassis[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.NextPageToken != nil {
		// no validation rules for NextPageToken
	}

	if m.TotalSize != nil {
		// no validation rules for TotalSize
	}

	if len(errors) > 0 {
		return ListChassisResponseMultiError(errors)
	}

	return nil
}

// ListChassisResponseMultiError is an error wrapping multiple validation
// errors returned by ListChassisResponse.ValidateAll() if the designated
// constraints aren't met.
type ListChassisResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListChassisResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListChassisResponseMultiError) AllErrors() []error { return m }

// ListChassisResponseValidationError is the validation error returned by
// ListChassisResponse.Validate if the designated constraints aren't met.
type ListChassisResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListChassisResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListChassisResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListChassisResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListChassisResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListChassisResponseValidationError) ErrorName() string {
	return "ListChassisResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListChassisResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListChassisResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListChassisResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListChassisResponseValidationError{}

// Validate checks the field values on UpdateChassisRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateChassisRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateChassisRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateChassisRequestMultiError, or nil if none found.
func (m *UpdateChassisRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateChassisRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ChassisId

	if all {
		switch v := interface{}(m.GetChassis()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateChassisRequestValidationError{
					field:  "Chassis",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateChassisRequestValidationError{
					field:  "Chassis",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetChassis()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateChassisRequestValidationError{
				field:  "Chassis",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetFieldMask()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateChassisRequestValidationError{
					field:  "FieldMask",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateChassisRequestValidationError{
					field:  "FieldMask",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetFieldMask()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateChassisRequestValidationError{
				field:  "FieldMask",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateChassisRequestMultiError(errors)
	}

	return nil
}

// UpdateChassisRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateChassisRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateChassisRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateChassisRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateChassisRequestMultiError) AllErrors() []error { return m }

// UpdateChassisRequestValidationError is the validation error returned by
// UpdateChassisRequest.Validate if the designated constraints aren't met.
type UpdateChassisRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateChassisRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateChassisRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateChassisRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateChassisRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateChassisRequestValidationError) ErrorName() string {
	return "UpdateChassisRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateChassisRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateChassisRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateChassisRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateChassisRequestValidationError{}

// Validate checks the field values on UpdateChassisResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateChassisResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateChassisResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateChassisResponseMultiError, or nil if none found.
func (m *UpdateChassisResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateChassisResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetChassis()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateChassisResponseValidationError{
					field:  "Chassis",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateChassisResponseValidationError{
					field:  "Chassis",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetChassis()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateChassisResponseValidationError{
				field:  "Chassis",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateChassisResponseMultiError(errors)
	}

	return nil
}

// UpdateChassisResponseMultiError is an error wrapping multiple validation
// errors returned by UpdateChassisResponse.ValidateAll() if the designated
// constraints aren't met.
type UpdateChassisResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateChassisResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateChassisResponseMultiError) AllErrors() []error { return m }

// UpdateChassisResponseValidationError is the validation error returned by
// UpdateChassisResponse.Validate if the designated constraints aren't met.
type UpdateChassisResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateChassisResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateChassisResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateChassisResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateChassisResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateChassisResponseValidationError) ErrorName() string {
	return "UpdateChassisResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateChassisResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateChassisResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateChassisResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateChassisResponseValidationError{}

// Validate checks the field values on ChassisChangeStateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ChassisChangeStateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ChassisChangeStateRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ChassisChangeStateRequestMultiError, or nil if none found.
func (m *ChassisChangeStateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ChassisChangeStateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ChassisId

	// no validation rules for Transition

	// no validation rules for Metadata

	if m.Force != nil {
		// no validation rules for Force
	}

	if m.FieldMask != nil {

		if all {
			switch v := interface{}(m.GetFieldMask()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ChassisChangeStateRequestValidationError{
						field:  "FieldMask",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ChassisChangeStateRequestValidationError{
						field:  "FieldMask",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetFieldMask()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ChassisChangeStateRequestValidationError{
					field:  "FieldMask",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ChassisChangeStateRequestMultiError(errors)
	}

	return nil
}

// ChassisChangeStateRequestMultiError is an error wrapping multiple validation
// errors returned by ChassisChangeStateRequest.ValidateAll() if the
// designated constraints aren't met.
type ChassisChangeStateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChassisChangeStateRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChassisChangeStateRequestMultiError) AllErrors() []error { return m }

// ChassisChangeStateRequestValidationError is the validation error returned by
// ChassisChangeStateRequest.Validate if the designated constraints aren't met.
type ChassisChangeStateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChassisChangeStateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChassisChangeStateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChassisChangeStateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChassisChangeStateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChassisChangeStateRequestValidationError) ErrorName() string {
	return "ChassisChangeStateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ChassisChangeStateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChassisChangeStateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChassisChangeStateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChassisChangeStateRequestValidationError{}

// Validate checks the field values on ChassisChangeStateResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ChassisChangeStateResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ChassisChangeStateResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ChassisChangeStateResponseMultiError, or nil if none found.
func (m *ChassisChangeStateResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ChassisChangeStateResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	// no validation rules for Metadata

	if m.ErrorMessage != nil {
		// no validation rules for ErrorMessage
	}

	if m.Status != nil {
		// no validation rules for Status
	}

	if m.TransitionId != nil {
		// no validation rules for TransitionId
	}

	if m.EstimatedCompletion != nil {

		if all {
			switch v := interface{}(m.GetEstimatedCompletion()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ChassisChangeStateResponseValidationError{
						field:  "EstimatedCompletion",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ChassisChangeStateResponseValidationError{
						field:  "EstimatedCompletion",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetEstimatedCompletion()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ChassisChangeStateResponseValidationError{
					field:  "EstimatedCompletion",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ChassisChangeStateResponseMultiError(errors)
	}

	return nil
}

// ChassisChangeStateResponseMultiError is an error wrapping multiple
// validation errors returned by ChassisChangeStateResponse.ValidateAll() if
// the designated constraints aren't met.
type ChassisChangeStateResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChassisChangeStateResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChassisChangeStateResponseMultiError) AllErrors() []error { return m }

// ChassisChangeStateResponseValidationError is the validation error returned
// by ChassisChangeStateResponse.Validate if the designated constraints aren't met.
type ChassisChangeStateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChassisChangeStateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChassisChangeStateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChassisChangeStateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChassisChangeStateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChassisChangeStateResponseValidationError) ErrorName() string {
	return "ChassisChangeStateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ChassisChangeStateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChassisChangeStateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChassisChangeStateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChassisChangeStateResponseValidationError{}

// Validate checks the field values on ChassisControlRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ChassisControlRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ChassisControlRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ChassisControlRequestMultiError, or nil if none found.
func (m *ChassisControlRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ChassisControlRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ChassisId

	// no validation rules for Action

	// no validation rules for Parameters

	if m.Force != nil {
		// no validation rules for Force
	}

	if m.FieldMask != nil {

		if all {
			switch v := interface{}(m.GetFieldMask()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ChassisControlRequestValidationError{
						field:  "FieldMask",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ChassisControlRequestValidationError{
						field:  "FieldMask",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetFieldMask()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ChassisControlRequestValidationError{
					field:  "FieldMask",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ChassisControlRequestMultiError(errors)
	}

	return nil
}

// ChassisControlRequestMultiError is an error wrapping multiple validation
// errors returned by ChassisControlRequest.ValidateAll() if the designated
// constraints aren't met.
type ChassisControlRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChassisControlRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChassisControlRequestMultiError) AllErrors() []error { return m }

// ChassisControlRequestValidationError is the validation error returned by
// ChassisControlRequest.Validate if the designated constraints aren't met.
type ChassisControlRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChassisControlRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChassisControlRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChassisControlRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChassisControlRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChassisControlRequestValidationError) ErrorName() string {
	return "ChassisControlRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ChassisControlRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChassisControlRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChassisControlRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChassisControlRequestValidationError{}

// Validate checks the field values on ChassisControlResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ChassisControlResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ChassisControlResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ChassisControlResponseMultiError, or nil if none found.
func (m *ChassisControlResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ChassisControlResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	if m.ErrorMessage != nil {
		// no validation rules for ErrorMessage
	}

	if m.Status != nil {
		// no validation rules for Status
	}

	if len(errors) > 0 {
		return ChassisControlResponseMultiError(errors)
	}

	return nil
}

// ChassisControlResponseMultiError is an error wrapping multiple validation
// errors returned by ChassisControlResponse.ValidateAll() if the designated
// constraints aren't met.
type ChassisControlResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChassisControlResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChassisControlResponseMultiError) AllErrors() []error { return m }

// ChassisControlResponseValidationError is the validation error returned by
// ChassisControlResponse.Validate if the designated constraints aren't met.
type ChassisControlResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChassisControlResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChassisControlResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChassisControlResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChassisControlResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChassisControlResponseValidationError) ErrorName() string {
	return "ChassisControlResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ChassisControlResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChassisControlResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChassisControlResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChassisControlResponseValidationError{}
