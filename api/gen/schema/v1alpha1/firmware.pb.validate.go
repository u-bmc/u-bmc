// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: schema/v1alpha1/firmware.proto

package schemav1alpha1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Firmware with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Firmware) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Firmware with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in FirmwareMultiError, or nil
// if none found.
func (m *Firmware) ValidateAll() error {
	return m.validate(true)
}

func (m *Firmware) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetComponents() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, FirmwareValidationError{
						field:  fmt.Sprintf("Components[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, FirmwareValidationError{
						field:  fmt.Sprintf("Components[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return FirmwareValidationError{
					field:  fmt.Sprintf("Components[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.Version != nil {
		// no validation rules for Version
	}

	if m.BuildDate != nil {

		if all {
			switch v := interface{}(m.GetBuildDate()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, FirmwareValidationError{
						field:  "BuildDate",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, FirmwareValidationError{
						field:  "BuildDate",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetBuildDate()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return FirmwareValidationError{
					field:  "BuildDate",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.BuildNumber != nil {
		// no validation rules for BuildNumber
	}

	if m.FirmwareType != nil {
		// no validation rules for FirmwareType
	}

	if m.Vendor != nil {
		// no validation rules for Vendor
	}

	if m.BackupFirmware != nil {

		if all {
			switch v := interface{}(m.GetBackupFirmware()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, FirmwareValidationError{
						field:  "BackupFirmware",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, FirmwareValidationError{
						field:  "BackupFirmware",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetBackupFirmware()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return FirmwareValidationError{
					field:  "BackupFirmware",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.SecureBootEnabled != nil {
		// no validation rules for SecureBootEnabled
	}

	if m.Tpm != nil {

		if all {
			switch v := interface{}(m.GetTpm()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, FirmwareValidationError{
						field:  "Tpm",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, FirmwareValidationError{
						field:  "Tpm",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetTpm()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return FirmwareValidationError{
					field:  "Tpm",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return FirmwareMultiError(errors)
	}

	return nil
}

// FirmwareMultiError is an error wrapping multiple validation errors returned
// by Firmware.ValidateAll() if the designated constraints aren't met.
type FirmwareMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FirmwareMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FirmwareMultiError) AllErrors() []error { return m }

// FirmwareValidationError is the validation error returned by
// Firmware.Validate if the designated constraints aren't met.
type FirmwareValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FirmwareValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FirmwareValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FirmwareValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FirmwareValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FirmwareValidationError) ErrorName() string { return "FirmwareValidationError" }

// Error satisfies the builtin error interface
func (e FirmwareValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFirmware.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FirmwareValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FirmwareValidationError{}

// Validate checks the field values on FirmwareComponent with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *FirmwareComponent) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FirmwareComponent with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FirmwareComponentMultiError, or nil if none found.
func (m *FirmwareComponent) ValidateAll() error {
	return m.validate(true)
}

func (m *FirmwareComponent) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	if m.Type != nil {
		// no validation rules for Type
	}

	if m.Version != nil {
		// no validation rules for Version
	}

	if m.BuildDate != nil {

		if all {
			switch v := interface{}(m.GetBuildDate()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, FirmwareComponentValidationError{
						field:  "BuildDate",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, FirmwareComponentValidationError{
						field:  "BuildDate",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetBuildDate()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return FirmwareComponentValidationError{
					field:  "BuildDate",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.Status != nil {
		// no validation rules for Status
	}

	if len(errors) > 0 {
		return FirmwareComponentMultiError(errors)
	}

	return nil
}

// FirmwareComponentMultiError is an error wrapping multiple validation errors
// returned by FirmwareComponent.ValidateAll() if the designated constraints
// aren't met.
type FirmwareComponentMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FirmwareComponentMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FirmwareComponentMultiError) AllErrors() []error { return m }

// FirmwareComponentValidationError is the validation error returned by
// FirmwareComponent.Validate if the designated constraints aren't met.
type FirmwareComponentValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FirmwareComponentValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FirmwareComponentValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FirmwareComponentValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FirmwareComponentValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FirmwareComponentValidationError) ErrorName() string {
	return "FirmwareComponentValidationError"
}

// Error satisfies the builtin error interface
func (e FirmwareComponentValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFirmwareComponent.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FirmwareComponentValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FirmwareComponentValidationError{}

// Validate checks the field values on BackupFirmware with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *BackupFirmware) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BackupFirmware with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in BackupFirmwareMultiError,
// or nil if none found.
func (m *BackupFirmware) ValidateAll() error {
	return m.validate(true)
}

func (m *BackupFirmware) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Available

	if m.Version != nil {
		// no validation rules for Version
	}

	if m.BackupDate != nil {

		if all {
			switch v := interface{}(m.GetBackupDate()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, BackupFirmwareValidationError{
						field:  "BackupDate",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, BackupFirmwareValidationError{
						field:  "BackupDate",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetBackupDate()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return BackupFirmwareValidationError{
					field:  "BackupDate",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.Bootable != nil {
		// no validation rules for Bootable
	}

	if len(errors) > 0 {
		return BackupFirmwareMultiError(errors)
	}

	return nil
}

// BackupFirmwareMultiError is an error wrapping multiple validation errors
// returned by BackupFirmware.ValidateAll() if the designated constraints
// aren't met.
type BackupFirmwareMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BackupFirmwareMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BackupFirmwareMultiError) AllErrors() []error { return m }

// BackupFirmwareValidationError is the validation error returned by
// BackupFirmware.Validate if the designated constraints aren't met.
type BackupFirmwareValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BackupFirmwareValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BackupFirmwareValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BackupFirmwareValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BackupFirmwareValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BackupFirmwareValidationError) ErrorName() string { return "BackupFirmwareValidationError" }

// Error satisfies the builtin error interface
func (e BackupFirmwareValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBackupFirmware.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BackupFirmwareValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BackupFirmwareValidationError{}

// Validate checks the field values on TPM with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *TPM) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TPM with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in TPMMultiError, or nil if none found.
func (m *TPM) ValidateAll() error {
	return m.validate(true)
}

func (m *TPM) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Present

	if m.Version != nil {
		// no validation rules for Version
	}

	if m.Manufacturer != nil {
		// no validation rules for Manufacturer
	}

	if m.Enabled != nil {
		// no validation rules for Enabled
	}

	if m.Activated != nil {
		// no validation rules for Activated
	}

	if m.Owned != nil {
		// no validation rules for Owned
	}

	if len(errors) > 0 {
		return TPMMultiError(errors)
	}

	return nil
}

// TPMMultiError is an error wrapping multiple validation errors returned by
// TPM.ValidateAll() if the designated constraints aren't met.
type TPMMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TPMMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TPMMultiError) AllErrors() []error { return m }

// TPMValidationError is the validation error returned by TPM.Validate if the
// designated constraints aren't met.
type TPMValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TPMValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TPMValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TPMValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TPMValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TPMValidationError) ErrorName() string { return "TPMValidationError" }

// Error satisfies the builtin error interface
func (e TPMValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTPM.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TPMValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TPMValidationError{}
