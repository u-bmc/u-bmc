// SPDX-License-Identifier: BSD-3-Clause

// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: schema/v1alpha1/system.proto

package schemav1alpha1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1alpha1 "github.com/u-bmc/u-bmc/api/gen/schema/v1alpha1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// HostManagementServiceName is the fully-qualified name of the HostManagementService service.
	HostManagementServiceName = "schema.v1alpha1.HostManagementService"
	// ChassisServiceName is the fully-qualified name of the ChassisService service.
	ChassisServiceName = "schema.v1alpha1.ChassisService"
	// HostServiceName is the fully-qualified name of the HostService service.
	HostServiceName = "schema.v1alpha1.HostService"
	// ManagementControllerServiceName is the fully-qualified name of the ManagementControllerService
	// service.
	ManagementControllerServiceName = "schema.v1alpha1.ManagementControllerService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// HostManagementServiceGetHostManagementProcedure is the fully-qualified name of the
	// HostManagementService's GetHostManagement RPC.
	HostManagementServiceGetHostManagementProcedure = "/schema.v1alpha1.HostManagementService/GetHostManagement"
	// HostManagementServiceListHostManagementProcedure is the fully-qualified name of the
	// HostManagementService's ListHostManagement RPC.
	HostManagementServiceListHostManagementProcedure = "/schema.v1alpha1.HostManagementService/ListHostManagement"
	// ChassisServiceGetChassisProcedure is the fully-qualified name of the ChassisService's GetChassis
	// RPC.
	ChassisServiceGetChassisProcedure = "/schema.v1alpha1.ChassisService/GetChassis"
	// ChassisServiceListChassisProcedure is the fully-qualified name of the ChassisService's
	// ListChassis RPC.
	ChassisServiceListChassisProcedure = "/schema.v1alpha1.ChassisService/ListChassis"
	// HostServiceGetHostProcedure is the fully-qualified name of the HostService's GetHost RPC.
	HostServiceGetHostProcedure = "/schema.v1alpha1.HostService/GetHost"
	// HostServiceListHostsProcedure is the fully-qualified name of the HostService's ListHosts RPC.
	HostServiceListHostsProcedure = "/schema.v1alpha1.HostService/ListHosts"
	// ManagementControllerServiceGetManagementControllerProcedure is the fully-qualified name of the
	// ManagementControllerService's GetManagementController RPC.
	ManagementControllerServiceGetManagementControllerProcedure = "/schema.v1alpha1.ManagementControllerService/GetManagementController"
	// ManagementControllerServiceListManagementControllersProcedure is the fully-qualified name of the
	// ManagementControllerService's ListManagementControllers RPC.
	ManagementControllerServiceListManagementControllersProcedure = "/schema.v1alpha1.ManagementControllerService/ListManagementControllers"
)

// HostManagementServiceClient is a client for the schema.v1alpha1.HostManagementService service.
type HostManagementServiceClient interface {
	// Get a host management configuration by ID
	GetHostManagement(context.Context, *connect.Request[v1alpha1.GetHostManagementRequest]) (*connect.Response[v1alpha1.GetHostManagementResponse], error)
	// List all host management configurations
	ListHostManagement(context.Context, *connect.Request[v1alpha1.ListHostManagementRequest]) (*connect.Response[v1alpha1.ListHostManagementResponse], error)
}

// NewHostManagementServiceClient constructs a client for the schema.v1alpha1.HostManagementService
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewHostManagementServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) HostManagementServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	hostManagementServiceMethods := v1alpha1.File_schema_v1alpha1_system_proto.Services().ByName("HostManagementService").Methods()
	return &hostManagementServiceClient{
		getHostManagement: connect.NewClient[v1alpha1.GetHostManagementRequest, v1alpha1.GetHostManagementResponse](
			httpClient,
			baseURL+HostManagementServiceGetHostManagementProcedure,
			connect.WithSchema(hostManagementServiceMethods.ByName("GetHostManagement")),
			connect.WithClientOptions(opts...),
		),
		listHostManagement: connect.NewClient[v1alpha1.ListHostManagementRequest, v1alpha1.ListHostManagementResponse](
			httpClient,
			baseURL+HostManagementServiceListHostManagementProcedure,
			connect.WithSchema(hostManagementServiceMethods.ByName("ListHostManagement")),
			connect.WithClientOptions(opts...),
		),
	}
}

// hostManagementServiceClient implements HostManagementServiceClient.
type hostManagementServiceClient struct {
	getHostManagement  *connect.Client[v1alpha1.GetHostManagementRequest, v1alpha1.GetHostManagementResponse]
	listHostManagement *connect.Client[v1alpha1.ListHostManagementRequest, v1alpha1.ListHostManagementResponse]
}

// GetHostManagement calls schema.v1alpha1.HostManagementService.GetHostManagement.
func (c *hostManagementServiceClient) GetHostManagement(ctx context.Context, req *connect.Request[v1alpha1.GetHostManagementRequest]) (*connect.Response[v1alpha1.GetHostManagementResponse], error) {
	return c.getHostManagement.CallUnary(ctx, req)
}

// ListHostManagement calls schema.v1alpha1.HostManagementService.ListHostManagement.
func (c *hostManagementServiceClient) ListHostManagement(ctx context.Context, req *connect.Request[v1alpha1.ListHostManagementRequest]) (*connect.Response[v1alpha1.ListHostManagementResponse], error) {
	return c.listHostManagement.CallUnary(ctx, req)
}

// HostManagementServiceHandler is an implementation of the schema.v1alpha1.HostManagementService
// service.
type HostManagementServiceHandler interface {
	// Get a host management configuration by ID
	GetHostManagement(context.Context, *connect.Request[v1alpha1.GetHostManagementRequest]) (*connect.Response[v1alpha1.GetHostManagementResponse], error)
	// List all host management configurations
	ListHostManagement(context.Context, *connect.Request[v1alpha1.ListHostManagementRequest]) (*connect.Response[v1alpha1.ListHostManagementResponse], error)
}

// NewHostManagementServiceHandler builds an HTTP handler from the service implementation. It
// returns the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewHostManagementServiceHandler(svc HostManagementServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	hostManagementServiceMethods := v1alpha1.File_schema_v1alpha1_system_proto.Services().ByName("HostManagementService").Methods()
	hostManagementServiceGetHostManagementHandler := connect.NewUnaryHandler(
		HostManagementServiceGetHostManagementProcedure,
		svc.GetHostManagement,
		connect.WithSchema(hostManagementServiceMethods.ByName("GetHostManagement")),
		connect.WithHandlerOptions(opts...),
	)
	hostManagementServiceListHostManagementHandler := connect.NewUnaryHandler(
		HostManagementServiceListHostManagementProcedure,
		svc.ListHostManagement,
		connect.WithSchema(hostManagementServiceMethods.ByName("ListHostManagement")),
		connect.WithHandlerOptions(opts...),
	)
	return "/schema.v1alpha1.HostManagementService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case HostManagementServiceGetHostManagementProcedure:
			hostManagementServiceGetHostManagementHandler.ServeHTTP(w, r)
		case HostManagementServiceListHostManagementProcedure:
			hostManagementServiceListHostManagementHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedHostManagementServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedHostManagementServiceHandler struct{}

func (UnimplementedHostManagementServiceHandler) GetHostManagement(context.Context, *connect.Request[v1alpha1.GetHostManagementRequest]) (*connect.Response[v1alpha1.GetHostManagementResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("schema.v1alpha1.HostManagementService.GetHostManagement is not implemented"))
}

func (UnimplementedHostManagementServiceHandler) ListHostManagement(context.Context, *connect.Request[v1alpha1.ListHostManagementRequest]) (*connect.Response[v1alpha1.ListHostManagementResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("schema.v1alpha1.HostManagementService.ListHostManagement is not implemented"))
}

// ChassisServiceClient is a client for the schema.v1alpha1.ChassisService service.
type ChassisServiceClient interface {
	// Get a chassis by ID
	GetChassis(context.Context, *connect.Request[v1alpha1.GetChassisRequest]) (*connect.Response[v1alpha1.GetChassisResponse], error)
	// List all chassis with optional filtering
	ListChassis(context.Context, *connect.Request[v1alpha1.ListChassisRequest]) (*connect.Response[v1alpha1.ListChassisResponse], error)
}

// NewChassisServiceClient constructs a client for the schema.v1alpha1.ChassisService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewChassisServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) ChassisServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	chassisServiceMethods := v1alpha1.File_schema_v1alpha1_system_proto.Services().ByName("ChassisService").Methods()
	return &chassisServiceClient{
		getChassis: connect.NewClient[v1alpha1.GetChassisRequest, v1alpha1.GetChassisResponse](
			httpClient,
			baseURL+ChassisServiceGetChassisProcedure,
			connect.WithSchema(chassisServiceMethods.ByName("GetChassis")),
			connect.WithClientOptions(opts...),
		),
		listChassis: connect.NewClient[v1alpha1.ListChassisRequest, v1alpha1.ListChassisResponse](
			httpClient,
			baseURL+ChassisServiceListChassisProcedure,
			connect.WithSchema(chassisServiceMethods.ByName("ListChassis")),
			connect.WithClientOptions(opts...),
		),
	}
}

// chassisServiceClient implements ChassisServiceClient.
type chassisServiceClient struct {
	getChassis  *connect.Client[v1alpha1.GetChassisRequest, v1alpha1.GetChassisResponse]
	listChassis *connect.Client[v1alpha1.ListChassisRequest, v1alpha1.ListChassisResponse]
}

// GetChassis calls schema.v1alpha1.ChassisService.GetChassis.
func (c *chassisServiceClient) GetChassis(ctx context.Context, req *connect.Request[v1alpha1.GetChassisRequest]) (*connect.Response[v1alpha1.GetChassisResponse], error) {
	return c.getChassis.CallUnary(ctx, req)
}

// ListChassis calls schema.v1alpha1.ChassisService.ListChassis.
func (c *chassisServiceClient) ListChassis(ctx context.Context, req *connect.Request[v1alpha1.ListChassisRequest]) (*connect.Response[v1alpha1.ListChassisResponse], error) {
	return c.listChassis.CallUnary(ctx, req)
}

// ChassisServiceHandler is an implementation of the schema.v1alpha1.ChassisService service.
type ChassisServiceHandler interface {
	// Get a chassis by ID
	GetChassis(context.Context, *connect.Request[v1alpha1.GetChassisRequest]) (*connect.Response[v1alpha1.GetChassisResponse], error)
	// List all chassis with optional filtering
	ListChassis(context.Context, *connect.Request[v1alpha1.ListChassisRequest]) (*connect.Response[v1alpha1.ListChassisResponse], error)
}

// NewChassisServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewChassisServiceHandler(svc ChassisServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	chassisServiceMethods := v1alpha1.File_schema_v1alpha1_system_proto.Services().ByName("ChassisService").Methods()
	chassisServiceGetChassisHandler := connect.NewUnaryHandler(
		ChassisServiceGetChassisProcedure,
		svc.GetChassis,
		connect.WithSchema(chassisServiceMethods.ByName("GetChassis")),
		connect.WithHandlerOptions(opts...),
	)
	chassisServiceListChassisHandler := connect.NewUnaryHandler(
		ChassisServiceListChassisProcedure,
		svc.ListChassis,
		connect.WithSchema(chassisServiceMethods.ByName("ListChassis")),
		connect.WithHandlerOptions(opts...),
	)
	return "/schema.v1alpha1.ChassisService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ChassisServiceGetChassisProcedure:
			chassisServiceGetChassisHandler.ServeHTTP(w, r)
		case ChassisServiceListChassisProcedure:
			chassisServiceListChassisHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedChassisServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedChassisServiceHandler struct{}

func (UnimplementedChassisServiceHandler) GetChassis(context.Context, *connect.Request[v1alpha1.GetChassisRequest]) (*connect.Response[v1alpha1.GetChassisResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("schema.v1alpha1.ChassisService.GetChassis is not implemented"))
}

func (UnimplementedChassisServiceHandler) ListChassis(context.Context, *connect.Request[v1alpha1.ListChassisRequest]) (*connect.Response[v1alpha1.ListChassisResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("schema.v1alpha1.ChassisService.ListChassis is not implemented"))
}

// HostServiceClient is a client for the schema.v1alpha1.HostService service.
type HostServiceClient interface {
	// Get a host by ID
	GetHost(context.Context, *connect.Request[v1alpha1.GetHostRequest]) (*connect.Response[v1alpha1.GetHostResponse], error)
	// List all hosts with optional filtering
	ListHosts(context.Context, *connect.Request[v1alpha1.ListHostsRequest]) (*connect.Response[v1alpha1.ListHostsResponse], error)
}

// NewHostServiceClient constructs a client for the schema.v1alpha1.HostService service. By default,
// it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and
// sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC()
// or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewHostServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) HostServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	hostServiceMethods := v1alpha1.File_schema_v1alpha1_system_proto.Services().ByName("HostService").Methods()
	return &hostServiceClient{
		getHost: connect.NewClient[v1alpha1.GetHostRequest, v1alpha1.GetHostResponse](
			httpClient,
			baseURL+HostServiceGetHostProcedure,
			connect.WithSchema(hostServiceMethods.ByName("GetHost")),
			connect.WithClientOptions(opts...),
		),
		listHosts: connect.NewClient[v1alpha1.ListHostsRequest, v1alpha1.ListHostsResponse](
			httpClient,
			baseURL+HostServiceListHostsProcedure,
			connect.WithSchema(hostServiceMethods.ByName("ListHosts")),
			connect.WithClientOptions(opts...),
		),
	}
}

// hostServiceClient implements HostServiceClient.
type hostServiceClient struct {
	getHost   *connect.Client[v1alpha1.GetHostRequest, v1alpha1.GetHostResponse]
	listHosts *connect.Client[v1alpha1.ListHostsRequest, v1alpha1.ListHostsResponse]
}

// GetHost calls schema.v1alpha1.HostService.GetHost.
func (c *hostServiceClient) GetHost(ctx context.Context, req *connect.Request[v1alpha1.GetHostRequest]) (*connect.Response[v1alpha1.GetHostResponse], error) {
	return c.getHost.CallUnary(ctx, req)
}

// ListHosts calls schema.v1alpha1.HostService.ListHosts.
func (c *hostServiceClient) ListHosts(ctx context.Context, req *connect.Request[v1alpha1.ListHostsRequest]) (*connect.Response[v1alpha1.ListHostsResponse], error) {
	return c.listHosts.CallUnary(ctx, req)
}

// HostServiceHandler is an implementation of the schema.v1alpha1.HostService service.
type HostServiceHandler interface {
	// Get a host by ID
	GetHost(context.Context, *connect.Request[v1alpha1.GetHostRequest]) (*connect.Response[v1alpha1.GetHostResponse], error)
	// List all hosts with optional filtering
	ListHosts(context.Context, *connect.Request[v1alpha1.ListHostsRequest]) (*connect.Response[v1alpha1.ListHostsResponse], error)
}

// NewHostServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewHostServiceHandler(svc HostServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	hostServiceMethods := v1alpha1.File_schema_v1alpha1_system_proto.Services().ByName("HostService").Methods()
	hostServiceGetHostHandler := connect.NewUnaryHandler(
		HostServiceGetHostProcedure,
		svc.GetHost,
		connect.WithSchema(hostServiceMethods.ByName("GetHost")),
		connect.WithHandlerOptions(opts...),
	)
	hostServiceListHostsHandler := connect.NewUnaryHandler(
		HostServiceListHostsProcedure,
		svc.ListHosts,
		connect.WithSchema(hostServiceMethods.ByName("ListHosts")),
		connect.WithHandlerOptions(opts...),
	)
	return "/schema.v1alpha1.HostService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case HostServiceGetHostProcedure:
			hostServiceGetHostHandler.ServeHTTP(w, r)
		case HostServiceListHostsProcedure:
			hostServiceListHostsHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedHostServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedHostServiceHandler struct{}

func (UnimplementedHostServiceHandler) GetHost(context.Context, *connect.Request[v1alpha1.GetHostRequest]) (*connect.Response[v1alpha1.GetHostResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("schema.v1alpha1.HostService.GetHost is not implemented"))
}

func (UnimplementedHostServiceHandler) ListHosts(context.Context, *connect.Request[v1alpha1.ListHostsRequest]) (*connect.Response[v1alpha1.ListHostsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("schema.v1alpha1.HostService.ListHosts is not implemented"))
}

// ManagementControllerServiceClient is a client for the schema.v1alpha1.ManagementControllerService
// service.
type ManagementControllerServiceClient interface {
	// Get a management controller by ID
	GetManagementController(context.Context, *connect.Request[v1alpha1.GetManagementControllerRequest]) (*connect.Response[v1alpha1.GetManagementControllerResponse], error)
	// List all management controllers with optional filtering
	ListManagementControllers(context.Context, *connect.Request[v1alpha1.ListManagementControllersRequest]) (*connect.Response[v1alpha1.ListManagementControllersResponse], error)
}

// NewManagementControllerServiceClient constructs a client for the
// schema.v1alpha1.ManagementControllerService service. By default, it uses the Connect protocol
// with the binary Protobuf Codec, asks for gzipped responses, and sends uncompressed requests. To
// use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or connect.WithGRPCWeb()
// options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewManagementControllerServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) ManagementControllerServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	managementControllerServiceMethods := v1alpha1.File_schema_v1alpha1_system_proto.Services().ByName("ManagementControllerService").Methods()
	return &managementControllerServiceClient{
		getManagementController: connect.NewClient[v1alpha1.GetManagementControllerRequest, v1alpha1.GetManagementControllerResponse](
			httpClient,
			baseURL+ManagementControllerServiceGetManagementControllerProcedure,
			connect.WithSchema(managementControllerServiceMethods.ByName("GetManagementController")),
			connect.WithClientOptions(opts...),
		),
		listManagementControllers: connect.NewClient[v1alpha1.ListManagementControllersRequest, v1alpha1.ListManagementControllersResponse](
			httpClient,
			baseURL+ManagementControllerServiceListManagementControllersProcedure,
			connect.WithSchema(managementControllerServiceMethods.ByName("ListManagementControllers")),
			connect.WithClientOptions(opts...),
		),
	}
}

// managementControllerServiceClient implements ManagementControllerServiceClient.
type managementControllerServiceClient struct {
	getManagementController   *connect.Client[v1alpha1.GetManagementControllerRequest, v1alpha1.GetManagementControllerResponse]
	listManagementControllers *connect.Client[v1alpha1.ListManagementControllersRequest, v1alpha1.ListManagementControllersResponse]
}

// GetManagementController calls
// schema.v1alpha1.ManagementControllerService.GetManagementController.
func (c *managementControllerServiceClient) GetManagementController(ctx context.Context, req *connect.Request[v1alpha1.GetManagementControllerRequest]) (*connect.Response[v1alpha1.GetManagementControllerResponse], error) {
	return c.getManagementController.CallUnary(ctx, req)
}

// ListManagementControllers calls
// schema.v1alpha1.ManagementControllerService.ListManagementControllers.
func (c *managementControllerServiceClient) ListManagementControllers(ctx context.Context, req *connect.Request[v1alpha1.ListManagementControllersRequest]) (*connect.Response[v1alpha1.ListManagementControllersResponse], error) {
	return c.listManagementControllers.CallUnary(ctx, req)
}

// ManagementControllerServiceHandler is an implementation of the
// schema.v1alpha1.ManagementControllerService service.
type ManagementControllerServiceHandler interface {
	// Get a management controller by ID
	GetManagementController(context.Context, *connect.Request[v1alpha1.GetManagementControllerRequest]) (*connect.Response[v1alpha1.GetManagementControllerResponse], error)
	// List all management controllers with optional filtering
	ListManagementControllers(context.Context, *connect.Request[v1alpha1.ListManagementControllersRequest]) (*connect.Response[v1alpha1.ListManagementControllersResponse], error)
}

// NewManagementControllerServiceHandler builds an HTTP handler from the service implementation. It
// returns the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewManagementControllerServiceHandler(svc ManagementControllerServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	managementControllerServiceMethods := v1alpha1.File_schema_v1alpha1_system_proto.Services().ByName("ManagementControllerService").Methods()
	managementControllerServiceGetManagementControllerHandler := connect.NewUnaryHandler(
		ManagementControllerServiceGetManagementControllerProcedure,
		svc.GetManagementController,
		connect.WithSchema(managementControllerServiceMethods.ByName("GetManagementController")),
		connect.WithHandlerOptions(opts...),
	)
	managementControllerServiceListManagementControllersHandler := connect.NewUnaryHandler(
		ManagementControllerServiceListManagementControllersProcedure,
		svc.ListManagementControllers,
		connect.WithSchema(managementControllerServiceMethods.ByName("ListManagementControllers")),
		connect.WithHandlerOptions(opts...),
	)
	return "/schema.v1alpha1.ManagementControllerService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ManagementControllerServiceGetManagementControllerProcedure:
			managementControllerServiceGetManagementControllerHandler.ServeHTTP(w, r)
		case ManagementControllerServiceListManagementControllersProcedure:
			managementControllerServiceListManagementControllersHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedManagementControllerServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedManagementControllerServiceHandler struct{}

func (UnimplementedManagementControllerServiceHandler) GetManagementController(context.Context, *connect.Request[v1alpha1.GetManagementControllerRequest]) (*connect.Response[v1alpha1.GetManagementControllerResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("schema.v1alpha1.ManagementControllerService.GetManagementController is not implemented"))
}

func (UnimplementedManagementControllerServiceHandler) ListManagementControllers(context.Context, *connect.Request[v1alpha1.ListManagementControllersRequest]) (*connect.Response[v1alpha1.ListManagementControllersResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("schema.v1alpha1.ManagementControllerService.ListManagementControllers is not implemented"))
}
