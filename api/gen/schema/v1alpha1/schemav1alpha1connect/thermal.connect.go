// SPDX-License-Identifier: BSD-3-Clause

// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: schema/v1alpha1/thermal.proto

package schemav1alpha1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1alpha1 "github.com/u-bmc/u-bmc/api/gen/schema/v1alpha1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// ThermalManagementServiceName is the fully-qualified name of the ThermalManagementService service.
	ThermalManagementServiceName = "schema.v1alpha1.ThermalManagementService"
	// ThermalZoneServiceName is the fully-qualified name of the ThermalZoneService service.
	ThermalZoneServiceName = "schema.v1alpha1.ThermalZoneService"
	// CoolingDeviceServiceName is the fully-qualified name of the CoolingDeviceService service.
	CoolingDeviceServiceName = "schema.v1alpha1.CoolingDeviceService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ThermalManagementServiceGetThermalManagementProcedure is the fully-qualified name of the
	// ThermalManagementService's GetThermalManagement RPC.
	ThermalManagementServiceGetThermalManagementProcedure = "/schema.v1alpha1.ThermalManagementService/GetThermalManagement"
	// ThermalManagementServiceListThermalManagementProcedure is the fully-qualified name of the
	// ThermalManagementService's ListThermalManagement RPC.
	ThermalManagementServiceListThermalManagementProcedure = "/schema.v1alpha1.ThermalManagementService/ListThermalManagement"
	// ThermalZoneServiceGetThermalZoneProcedure is the fully-qualified name of the ThermalZoneService's
	// GetThermalZone RPC.
	ThermalZoneServiceGetThermalZoneProcedure = "/schema.v1alpha1.ThermalZoneService/GetThermalZone"
	// ThermalZoneServiceListThermalZonesProcedure is the fully-qualified name of the
	// ThermalZoneService's ListThermalZones RPC.
	ThermalZoneServiceListThermalZonesProcedure = "/schema.v1alpha1.ThermalZoneService/ListThermalZones"
	// CoolingDeviceServiceGetCoolingDeviceProcedure is the fully-qualified name of the
	// CoolingDeviceService's GetCoolingDevice RPC.
	CoolingDeviceServiceGetCoolingDeviceProcedure = "/schema.v1alpha1.CoolingDeviceService/GetCoolingDevice"
	// CoolingDeviceServiceListCoolingDevicesProcedure is the fully-qualified name of the
	// CoolingDeviceService's ListCoolingDevices RPC.
	CoolingDeviceServiceListCoolingDevicesProcedure = "/schema.v1alpha1.CoolingDeviceService/ListCoolingDevices"
)

// ThermalManagementServiceClient is a client for the schema.v1alpha1.ThermalManagementService
// service.
type ThermalManagementServiceClient interface {
	// Get a thermal management configuration by ID
	GetThermalManagement(context.Context, *connect.Request[v1alpha1.GetThermalManagementRequest]) (*connect.Response[v1alpha1.GetThermalManagementResponse], error)
	// List all thermal management configurations
	ListThermalManagement(context.Context, *connect.Request[v1alpha1.ListThermalManagementRequest]) (*connect.Response[v1alpha1.ListThermalManagementResponse], error)
}

// NewThermalManagementServiceClient constructs a client for the
// schema.v1alpha1.ThermalManagementService service. By default, it uses the Connect protocol with
// the binary Protobuf Codec, asks for gzipped responses, and sends uncompressed requests. To use
// the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewThermalManagementServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) ThermalManagementServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	thermalManagementServiceMethods := v1alpha1.File_schema_v1alpha1_thermal_proto.Services().ByName("ThermalManagementService").Methods()
	return &thermalManagementServiceClient{
		getThermalManagement: connect.NewClient[v1alpha1.GetThermalManagementRequest, v1alpha1.GetThermalManagementResponse](
			httpClient,
			baseURL+ThermalManagementServiceGetThermalManagementProcedure,
			connect.WithSchema(thermalManagementServiceMethods.ByName("GetThermalManagement")),
			connect.WithClientOptions(opts...),
		),
		listThermalManagement: connect.NewClient[v1alpha1.ListThermalManagementRequest, v1alpha1.ListThermalManagementResponse](
			httpClient,
			baseURL+ThermalManagementServiceListThermalManagementProcedure,
			connect.WithSchema(thermalManagementServiceMethods.ByName("ListThermalManagement")),
			connect.WithClientOptions(opts...),
		),
	}
}

// thermalManagementServiceClient implements ThermalManagementServiceClient.
type thermalManagementServiceClient struct {
	getThermalManagement  *connect.Client[v1alpha1.GetThermalManagementRequest, v1alpha1.GetThermalManagementResponse]
	listThermalManagement *connect.Client[v1alpha1.ListThermalManagementRequest, v1alpha1.ListThermalManagementResponse]
}

// GetThermalManagement calls schema.v1alpha1.ThermalManagementService.GetThermalManagement.
func (c *thermalManagementServiceClient) GetThermalManagement(ctx context.Context, req *connect.Request[v1alpha1.GetThermalManagementRequest]) (*connect.Response[v1alpha1.GetThermalManagementResponse], error) {
	return c.getThermalManagement.CallUnary(ctx, req)
}

// ListThermalManagement calls schema.v1alpha1.ThermalManagementService.ListThermalManagement.
func (c *thermalManagementServiceClient) ListThermalManagement(ctx context.Context, req *connect.Request[v1alpha1.ListThermalManagementRequest]) (*connect.Response[v1alpha1.ListThermalManagementResponse], error) {
	return c.listThermalManagement.CallUnary(ctx, req)
}

// ThermalManagementServiceHandler is an implementation of the
// schema.v1alpha1.ThermalManagementService service.
type ThermalManagementServiceHandler interface {
	// Get a thermal management configuration by ID
	GetThermalManagement(context.Context, *connect.Request[v1alpha1.GetThermalManagementRequest]) (*connect.Response[v1alpha1.GetThermalManagementResponse], error)
	// List all thermal management configurations
	ListThermalManagement(context.Context, *connect.Request[v1alpha1.ListThermalManagementRequest]) (*connect.Response[v1alpha1.ListThermalManagementResponse], error)
}

// NewThermalManagementServiceHandler builds an HTTP handler from the service implementation. It
// returns the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewThermalManagementServiceHandler(svc ThermalManagementServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	thermalManagementServiceMethods := v1alpha1.File_schema_v1alpha1_thermal_proto.Services().ByName("ThermalManagementService").Methods()
	thermalManagementServiceGetThermalManagementHandler := connect.NewUnaryHandler(
		ThermalManagementServiceGetThermalManagementProcedure,
		svc.GetThermalManagement,
		connect.WithSchema(thermalManagementServiceMethods.ByName("GetThermalManagement")),
		connect.WithHandlerOptions(opts...),
	)
	thermalManagementServiceListThermalManagementHandler := connect.NewUnaryHandler(
		ThermalManagementServiceListThermalManagementProcedure,
		svc.ListThermalManagement,
		connect.WithSchema(thermalManagementServiceMethods.ByName("ListThermalManagement")),
		connect.WithHandlerOptions(opts...),
	)
	return "/schema.v1alpha1.ThermalManagementService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ThermalManagementServiceGetThermalManagementProcedure:
			thermalManagementServiceGetThermalManagementHandler.ServeHTTP(w, r)
		case ThermalManagementServiceListThermalManagementProcedure:
			thermalManagementServiceListThermalManagementHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedThermalManagementServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedThermalManagementServiceHandler struct{}

func (UnimplementedThermalManagementServiceHandler) GetThermalManagement(context.Context, *connect.Request[v1alpha1.GetThermalManagementRequest]) (*connect.Response[v1alpha1.GetThermalManagementResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("schema.v1alpha1.ThermalManagementService.GetThermalManagement is not implemented"))
}

func (UnimplementedThermalManagementServiceHandler) ListThermalManagement(context.Context, *connect.Request[v1alpha1.ListThermalManagementRequest]) (*connect.Response[v1alpha1.ListThermalManagementResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("schema.v1alpha1.ThermalManagementService.ListThermalManagement is not implemented"))
}

// ThermalZoneServiceClient is a client for the schema.v1alpha1.ThermalZoneService service.
type ThermalZoneServiceClient interface {
	// Get a thermal zone by ID
	GetThermalZone(context.Context, *connect.Request[v1alpha1.GetThermalZoneRequest]) (*connect.Response[v1alpha1.GetThermalZoneResponse], error)
	// List all thermal zones with optional filtering
	ListThermalZones(context.Context, *connect.Request[v1alpha1.ListThermalZonesRequest]) (*connect.Response[v1alpha1.ListThermalZonesResponse], error)
}

// NewThermalZoneServiceClient constructs a client for the schema.v1alpha1.ThermalZoneService
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewThermalZoneServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) ThermalZoneServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	thermalZoneServiceMethods := v1alpha1.File_schema_v1alpha1_thermal_proto.Services().ByName("ThermalZoneService").Methods()
	return &thermalZoneServiceClient{
		getThermalZone: connect.NewClient[v1alpha1.GetThermalZoneRequest, v1alpha1.GetThermalZoneResponse](
			httpClient,
			baseURL+ThermalZoneServiceGetThermalZoneProcedure,
			connect.WithSchema(thermalZoneServiceMethods.ByName("GetThermalZone")),
			connect.WithClientOptions(opts...),
		),
		listThermalZones: connect.NewClient[v1alpha1.ListThermalZonesRequest, v1alpha1.ListThermalZonesResponse](
			httpClient,
			baseURL+ThermalZoneServiceListThermalZonesProcedure,
			connect.WithSchema(thermalZoneServiceMethods.ByName("ListThermalZones")),
			connect.WithClientOptions(opts...),
		),
	}
}

// thermalZoneServiceClient implements ThermalZoneServiceClient.
type thermalZoneServiceClient struct {
	getThermalZone   *connect.Client[v1alpha1.GetThermalZoneRequest, v1alpha1.GetThermalZoneResponse]
	listThermalZones *connect.Client[v1alpha1.ListThermalZonesRequest, v1alpha1.ListThermalZonesResponse]
}

// GetThermalZone calls schema.v1alpha1.ThermalZoneService.GetThermalZone.
func (c *thermalZoneServiceClient) GetThermalZone(ctx context.Context, req *connect.Request[v1alpha1.GetThermalZoneRequest]) (*connect.Response[v1alpha1.GetThermalZoneResponse], error) {
	return c.getThermalZone.CallUnary(ctx, req)
}

// ListThermalZones calls schema.v1alpha1.ThermalZoneService.ListThermalZones.
func (c *thermalZoneServiceClient) ListThermalZones(ctx context.Context, req *connect.Request[v1alpha1.ListThermalZonesRequest]) (*connect.Response[v1alpha1.ListThermalZonesResponse], error) {
	return c.listThermalZones.CallUnary(ctx, req)
}

// ThermalZoneServiceHandler is an implementation of the schema.v1alpha1.ThermalZoneService service.
type ThermalZoneServiceHandler interface {
	// Get a thermal zone by ID
	GetThermalZone(context.Context, *connect.Request[v1alpha1.GetThermalZoneRequest]) (*connect.Response[v1alpha1.GetThermalZoneResponse], error)
	// List all thermal zones with optional filtering
	ListThermalZones(context.Context, *connect.Request[v1alpha1.ListThermalZonesRequest]) (*connect.Response[v1alpha1.ListThermalZonesResponse], error)
}

// NewThermalZoneServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewThermalZoneServiceHandler(svc ThermalZoneServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	thermalZoneServiceMethods := v1alpha1.File_schema_v1alpha1_thermal_proto.Services().ByName("ThermalZoneService").Methods()
	thermalZoneServiceGetThermalZoneHandler := connect.NewUnaryHandler(
		ThermalZoneServiceGetThermalZoneProcedure,
		svc.GetThermalZone,
		connect.WithSchema(thermalZoneServiceMethods.ByName("GetThermalZone")),
		connect.WithHandlerOptions(opts...),
	)
	thermalZoneServiceListThermalZonesHandler := connect.NewUnaryHandler(
		ThermalZoneServiceListThermalZonesProcedure,
		svc.ListThermalZones,
		connect.WithSchema(thermalZoneServiceMethods.ByName("ListThermalZones")),
		connect.WithHandlerOptions(opts...),
	)
	return "/schema.v1alpha1.ThermalZoneService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ThermalZoneServiceGetThermalZoneProcedure:
			thermalZoneServiceGetThermalZoneHandler.ServeHTTP(w, r)
		case ThermalZoneServiceListThermalZonesProcedure:
			thermalZoneServiceListThermalZonesHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedThermalZoneServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedThermalZoneServiceHandler struct{}

func (UnimplementedThermalZoneServiceHandler) GetThermalZone(context.Context, *connect.Request[v1alpha1.GetThermalZoneRequest]) (*connect.Response[v1alpha1.GetThermalZoneResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("schema.v1alpha1.ThermalZoneService.GetThermalZone is not implemented"))
}

func (UnimplementedThermalZoneServiceHandler) ListThermalZones(context.Context, *connect.Request[v1alpha1.ListThermalZonesRequest]) (*connect.Response[v1alpha1.ListThermalZonesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("schema.v1alpha1.ThermalZoneService.ListThermalZones is not implemented"))
}

// CoolingDeviceServiceClient is a client for the schema.v1alpha1.CoolingDeviceService service.
type CoolingDeviceServiceClient interface {
	// Get a cooling device by ID
	GetCoolingDevice(context.Context, *connect.Request[v1alpha1.GetCoolingDeviceRequest]) (*connect.Response[v1alpha1.GetCoolingDeviceResponse], error)
	// List all cooling devices with optional filtering
	ListCoolingDevices(context.Context, *connect.Request[v1alpha1.ListCoolingDevicesRequest]) (*connect.Response[v1alpha1.ListCoolingDevicesResponse], error)
}

// NewCoolingDeviceServiceClient constructs a client for the schema.v1alpha1.CoolingDeviceService
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewCoolingDeviceServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) CoolingDeviceServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	coolingDeviceServiceMethods := v1alpha1.File_schema_v1alpha1_thermal_proto.Services().ByName("CoolingDeviceService").Methods()
	return &coolingDeviceServiceClient{
		getCoolingDevice: connect.NewClient[v1alpha1.GetCoolingDeviceRequest, v1alpha1.GetCoolingDeviceResponse](
			httpClient,
			baseURL+CoolingDeviceServiceGetCoolingDeviceProcedure,
			connect.WithSchema(coolingDeviceServiceMethods.ByName("GetCoolingDevice")),
			connect.WithClientOptions(opts...),
		),
		listCoolingDevices: connect.NewClient[v1alpha1.ListCoolingDevicesRequest, v1alpha1.ListCoolingDevicesResponse](
			httpClient,
			baseURL+CoolingDeviceServiceListCoolingDevicesProcedure,
			connect.WithSchema(coolingDeviceServiceMethods.ByName("ListCoolingDevices")),
			connect.WithClientOptions(opts...),
		),
	}
}

// coolingDeviceServiceClient implements CoolingDeviceServiceClient.
type coolingDeviceServiceClient struct {
	getCoolingDevice   *connect.Client[v1alpha1.GetCoolingDeviceRequest, v1alpha1.GetCoolingDeviceResponse]
	listCoolingDevices *connect.Client[v1alpha1.ListCoolingDevicesRequest, v1alpha1.ListCoolingDevicesResponse]
}

// GetCoolingDevice calls schema.v1alpha1.CoolingDeviceService.GetCoolingDevice.
func (c *coolingDeviceServiceClient) GetCoolingDevice(ctx context.Context, req *connect.Request[v1alpha1.GetCoolingDeviceRequest]) (*connect.Response[v1alpha1.GetCoolingDeviceResponse], error) {
	return c.getCoolingDevice.CallUnary(ctx, req)
}

// ListCoolingDevices calls schema.v1alpha1.CoolingDeviceService.ListCoolingDevices.
func (c *coolingDeviceServiceClient) ListCoolingDevices(ctx context.Context, req *connect.Request[v1alpha1.ListCoolingDevicesRequest]) (*connect.Response[v1alpha1.ListCoolingDevicesResponse], error) {
	return c.listCoolingDevices.CallUnary(ctx, req)
}

// CoolingDeviceServiceHandler is an implementation of the schema.v1alpha1.CoolingDeviceService
// service.
type CoolingDeviceServiceHandler interface {
	// Get a cooling device by ID
	GetCoolingDevice(context.Context, *connect.Request[v1alpha1.GetCoolingDeviceRequest]) (*connect.Response[v1alpha1.GetCoolingDeviceResponse], error)
	// List all cooling devices with optional filtering
	ListCoolingDevices(context.Context, *connect.Request[v1alpha1.ListCoolingDevicesRequest]) (*connect.Response[v1alpha1.ListCoolingDevicesResponse], error)
}

// NewCoolingDeviceServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewCoolingDeviceServiceHandler(svc CoolingDeviceServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	coolingDeviceServiceMethods := v1alpha1.File_schema_v1alpha1_thermal_proto.Services().ByName("CoolingDeviceService").Methods()
	coolingDeviceServiceGetCoolingDeviceHandler := connect.NewUnaryHandler(
		CoolingDeviceServiceGetCoolingDeviceProcedure,
		svc.GetCoolingDevice,
		connect.WithSchema(coolingDeviceServiceMethods.ByName("GetCoolingDevice")),
		connect.WithHandlerOptions(opts...),
	)
	coolingDeviceServiceListCoolingDevicesHandler := connect.NewUnaryHandler(
		CoolingDeviceServiceListCoolingDevicesProcedure,
		svc.ListCoolingDevices,
		connect.WithSchema(coolingDeviceServiceMethods.ByName("ListCoolingDevices")),
		connect.WithHandlerOptions(opts...),
	)
	return "/schema.v1alpha1.CoolingDeviceService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case CoolingDeviceServiceGetCoolingDeviceProcedure:
			coolingDeviceServiceGetCoolingDeviceHandler.ServeHTTP(w, r)
		case CoolingDeviceServiceListCoolingDevicesProcedure:
			coolingDeviceServiceListCoolingDevicesHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedCoolingDeviceServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedCoolingDeviceServiceHandler struct{}

func (UnimplementedCoolingDeviceServiceHandler) GetCoolingDevice(context.Context, *connect.Request[v1alpha1.GetCoolingDeviceRequest]) (*connect.Response[v1alpha1.GetCoolingDeviceResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("schema.v1alpha1.CoolingDeviceService.GetCoolingDevice is not implemented"))
}

func (UnimplementedCoolingDeviceServiceHandler) ListCoolingDevices(context.Context, *connect.Request[v1alpha1.ListCoolingDevicesRequest]) (*connect.Response[v1alpha1.ListCoolingDevicesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("schema.v1alpha1.CoolingDeviceService.ListCoolingDevices is not implemented"))
}
