// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: schema/v1alpha1/thermal.proto

package schemav1alpha1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on ThermalZone with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ThermalZone) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ThermalZone with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ThermalZoneMultiError, or
// nil if none found.
func (m *ThermalZone) ValidateAll() error {
	return m.validate(true)
}

func (m *ThermalZone) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for CurrentTemperature

	// no validation rules for Status

	// no validation rules for CustomAttributes

	if m.TargetTemperature != nil {
		// no validation rules for TargetTemperature
	}

	if m.PidSettings != nil {

		if all {
			switch v := interface{}(m.GetPidSettings()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ThermalZoneValidationError{
						field:  "PidSettings",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ThermalZoneValidationError{
						field:  "PidSettings",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetPidSettings()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ThermalZoneValidationError{
					field:  "PidSettings",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.Location != nil {

		if all {
			switch v := interface{}(m.GetLocation()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ThermalZoneValidationError{
						field:  "Location",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ThermalZoneValidationError{
						field:  "Location",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetLocation()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ThermalZoneValidationError{
					field:  "Location",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.LastUpdated != nil {

		if all {
			switch v := interface{}(m.GetLastUpdated()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ThermalZoneValidationError{
						field:  "LastUpdated",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ThermalZoneValidationError{
						field:  "LastUpdated",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetLastUpdated()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ThermalZoneValidationError{
					field:  "LastUpdated",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ThermalZoneMultiError(errors)
	}

	return nil
}

// ThermalZoneMultiError is an error wrapping multiple validation errors
// returned by ThermalZone.ValidateAll() if the designated constraints aren't met.
type ThermalZoneMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ThermalZoneMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ThermalZoneMultiError) AllErrors() []error { return m }

// ThermalZoneValidationError is the validation error returned by
// ThermalZone.Validate if the designated constraints aren't met.
type ThermalZoneValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ThermalZoneValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ThermalZoneValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ThermalZoneValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ThermalZoneValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ThermalZoneValidationError) ErrorName() string { return "ThermalZoneValidationError" }

// Error satisfies the builtin error interface
func (e ThermalZoneValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sThermalZone.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ThermalZoneValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ThermalZoneValidationError{}

// Validate checks the field values on CoolingDevice with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CoolingDevice) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CoolingDevice with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CoolingDeviceMultiError, or
// nil if none found.
func (m *CoolingDevice) ValidateAll() error {
	return m.validate(true)
}

func (m *CoolingDevice) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	for idx, item := range m.GetSensors() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CoolingDeviceValidationError{
						field:  fmt.Sprintf("Sensors[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CoolingDeviceValidationError{
						field:  fmt.Sprintf("Sensors[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CoolingDeviceValidationError{
					field:  fmt.Sprintf("Sensors[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for CustomAttributes

	if m.Type != nil {
		// no validation rules for Type
	}

	if m.CoolingPowerPercent != nil {
		// no validation rules for CoolingPowerPercent
	}

	if m.MinCoolingPowerPercent != nil {
		// no validation rules for MinCoolingPowerPercent
	}

	if m.MaxCoolingPowerPercent != nil {
		// no validation rules for MaxCoolingPowerPercent
	}

	if m.Status != nil {
		// no validation rules for Status
	}

	if m.ControlMode != nil {
		// no validation rules for ControlMode
	}

	if m.Location != nil {

		if all {
			switch v := interface{}(m.GetLocation()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CoolingDeviceValidationError{
						field:  "Location",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CoolingDeviceValidationError{
						field:  "Location",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetLocation()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CoolingDeviceValidationError{
					field:  "Location",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.LastUpdated != nil {

		if all {
			switch v := interface{}(m.GetLastUpdated()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CoolingDeviceValidationError{
						field:  "LastUpdated",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CoolingDeviceValidationError{
						field:  "LastUpdated",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetLastUpdated()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CoolingDeviceValidationError{
					field:  "LastUpdated",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return CoolingDeviceMultiError(errors)
	}

	return nil
}

// CoolingDeviceMultiError is an error wrapping multiple validation errors
// returned by CoolingDevice.ValidateAll() if the designated constraints
// aren't met.
type CoolingDeviceMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CoolingDeviceMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CoolingDeviceMultiError) AllErrors() []error { return m }

// CoolingDeviceValidationError is the validation error returned by
// CoolingDevice.Validate if the designated constraints aren't met.
type CoolingDeviceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CoolingDeviceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CoolingDeviceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CoolingDeviceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CoolingDeviceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CoolingDeviceValidationError) ErrorName() string { return "CoolingDeviceValidationError" }

// Error satisfies the builtin error interface
func (e CoolingDeviceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCoolingDevice.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CoolingDeviceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CoolingDeviceValidationError{}

// Validate checks the field values on ThermalProfile with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ThermalProfile) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ThermalProfile with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ThermalProfileMultiError,
// or nil if none found.
func (m *ThermalProfile) ValidateAll() error {
	return m.validate(true)
}

func (m *ThermalProfile) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Type

	if m.CustomSettings != nil {

		if all {
			switch v := interface{}(m.GetCustomSettings()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ThermalProfileValidationError{
						field:  "CustomSettings",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ThermalProfileValidationError{
						field:  "CustomSettings",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetCustomSettings()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ThermalProfileValidationError{
					field:  "CustomSettings",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.Description != nil {
		// no validation rules for Description
	}

	if len(errors) > 0 {
		return ThermalProfileMultiError(errors)
	}

	return nil
}

// ThermalProfileMultiError is an error wrapping multiple validation errors
// returned by ThermalProfile.ValidateAll() if the designated constraints
// aren't met.
type ThermalProfileMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ThermalProfileMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ThermalProfileMultiError) AllErrors() []error { return m }

// ThermalProfileValidationError is the validation error returned by
// ThermalProfile.Validate if the designated constraints aren't met.
type ThermalProfileValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ThermalProfileValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ThermalProfileValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ThermalProfileValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ThermalProfileValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ThermalProfileValidationError) ErrorName() string { return "ThermalProfileValidationError" }

// Error satisfies the builtin error interface
func (e ThermalProfileValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sThermalProfile.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ThermalProfileValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ThermalProfileValidationError{}

// Validate checks the field values on PIDSettings with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PIDSettings) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PIDSettings with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PIDSettingsMultiError, or
// nil if none found.
func (m *PIDSettings) ValidateAll() error {
	return m.validate(true)
}

func (m *PIDSettings) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Kp

	// no validation rules for Ki

	// no validation rules for Kd

	// no validation rules for SampleTime

	if m.OutputMin != nil {
		// no validation rules for OutputMin
	}

	if m.OutputMax != nil {
		// no validation rules for OutputMax
	}

	if len(errors) > 0 {
		return PIDSettingsMultiError(errors)
	}

	return nil
}

// PIDSettingsMultiError is an error wrapping multiple validation errors
// returned by PIDSettings.ValidateAll() if the designated constraints aren't met.
type PIDSettingsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PIDSettingsMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PIDSettingsMultiError) AllErrors() []error { return m }

// PIDSettingsValidationError is the validation error returned by
// PIDSettings.Validate if the designated constraints aren't met.
type PIDSettingsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PIDSettingsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PIDSettingsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PIDSettingsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PIDSettingsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PIDSettingsValidationError) ErrorName() string { return "PIDSettingsValidationError" }

// Error satisfies the builtin error interface
func (e PIDSettingsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPIDSettings.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PIDSettingsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PIDSettingsValidationError{}

// Validate checks the field values on GetThermalZoneRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetThermalZoneRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetThermalZoneRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetThermalZoneRequestMultiError, or nil if none found.
func (m *GetThermalZoneRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetThermalZoneRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetFieldMask()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetThermalZoneRequestValidationError{
					field:  "FieldMask",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetThermalZoneRequestValidationError{
					field:  "FieldMask",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetFieldMask()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetThermalZoneRequestValidationError{
				field:  "FieldMask",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	switch v := m.Identifier.(type) {
	case *GetThermalZoneRequest_Name:
		if v == nil {
			err := GetThermalZoneRequestValidationError{
				field:  "Identifier",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for Name
	case *GetThermalZoneRequest_Status:
		if v == nil {
			err := GetThermalZoneRequestValidationError{
				field:  "Identifier",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for Status
	case *GetThermalZoneRequest_Location:
		if v == nil {
			err := GetThermalZoneRequestValidationError{
				field:  "Identifier",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetLocation()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetThermalZoneRequestValidationError{
						field:  "Location",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetThermalZoneRequestValidationError{
						field:  "Location",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetLocation()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetThermalZoneRequestValidationError{
					field:  "Location",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return GetThermalZoneRequestMultiError(errors)
	}

	return nil
}

// GetThermalZoneRequestMultiError is an error wrapping multiple validation
// errors returned by GetThermalZoneRequest.ValidateAll() if the designated
// constraints aren't met.
type GetThermalZoneRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetThermalZoneRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetThermalZoneRequestMultiError) AllErrors() []error { return m }

// GetThermalZoneRequestValidationError is the validation error returned by
// GetThermalZoneRequest.Validate if the designated constraints aren't met.
type GetThermalZoneRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetThermalZoneRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetThermalZoneRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetThermalZoneRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetThermalZoneRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetThermalZoneRequestValidationError) ErrorName() string {
	return "GetThermalZoneRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetThermalZoneRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetThermalZoneRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetThermalZoneRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetThermalZoneRequestValidationError{}

// Validate checks the field values on GetThermalZoneResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetThermalZoneResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetThermalZoneResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetThermalZoneResponseMultiError, or nil if none found.
func (m *GetThermalZoneResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetThermalZoneResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetThermalZones() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetThermalZoneResponseValidationError{
						field:  fmt.Sprintf("ThermalZones[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetThermalZoneResponseValidationError{
						field:  fmt.Sprintf("ThermalZones[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetThermalZoneResponseValidationError{
					field:  fmt.Sprintf("ThermalZones[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetThermalZoneResponseMultiError(errors)
	}

	return nil
}

// GetThermalZoneResponseMultiError is an error wrapping multiple validation
// errors returned by GetThermalZoneResponse.ValidateAll() if the designated
// constraints aren't met.
type GetThermalZoneResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetThermalZoneResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetThermalZoneResponseMultiError) AllErrors() []error { return m }

// GetThermalZoneResponseValidationError is the validation error returned by
// GetThermalZoneResponse.Validate if the designated constraints aren't met.
type GetThermalZoneResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetThermalZoneResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetThermalZoneResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetThermalZoneResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetThermalZoneResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetThermalZoneResponseValidationError) ErrorName() string {
	return "GetThermalZoneResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetThermalZoneResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetThermalZoneResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetThermalZoneResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetThermalZoneResponseValidationError{}

// Validate checks the field values on SetThermalZoneRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SetThermalZoneRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetThermalZoneRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SetThermalZoneRequestMultiError, or nil if none found.
func (m *SetThermalZoneRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SetThermalZoneRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	if all {
		switch v := interface{}(m.GetFieldMask()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SetThermalZoneRequestValidationError{
					field:  "FieldMask",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SetThermalZoneRequestValidationError{
					field:  "FieldMask",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetFieldMask()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SetThermalZoneRequestValidationError{
				field:  "FieldMask",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.TargetTemperature != nil {
		// no validation rules for TargetTemperature
	}

	if m.PidSettings != nil {

		if all {
			switch v := interface{}(m.GetPidSettings()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SetThermalZoneRequestValidationError{
						field:  "PidSettings",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SetThermalZoneRequestValidationError{
						field:  "PidSettings",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetPidSettings()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SetThermalZoneRequestValidationError{
					field:  "PidSettings",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.Status != nil {
		// no validation rules for Status
	}

	if len(errors) > 0 {
		return SetThermalZoneRequestMultiError(errors)
	}

	return nil
}

// SetThermalZoneRequestMultiError is an error wrapping multiple validation
// errors returned by SetThermalZoneRequest.ValidateAll() if the designated
// constraints aren't met.
type SetThermalZoneRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetThermalZoneRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetThermalZoneRequestMultiError) AllErrors() []error { return m }

// SetThermalZoneRequestValidationError is the validation error returned by
// SetThermalZoneRequest.Validate if the designated constraints aren't met.
type SetThermalZoneRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetThermalZoneRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetThermalZoneRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetThermalZoneRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetThermalZoneRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetThermalZoneRequestValidationError) ErrorName() string {
	return "SetThermalZoneRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SetThermalZoneRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetThermalZoneRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetThermalZoneRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetThermalZoneRequestValidationError{}

// Validate checks the field values on SetThermalZoneResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SetThermalZoneResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetThermalZoneResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SetThermalZoneResponseMultiError, or nil if none found.
func (m *SetThermalZoneResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SetThermalZoneResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetThermalZone()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SetThermalZoneResponseValidationError{
					field:  "ThermalZone",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SetThermalZoneResponseValidationError{
					field:  "ThermalZone",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetThermalZone()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SetThermalZoneResponseValidationError{
				field:  "ThermalZone",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SetThermalZoneResponseMultiError(errors)
	}

	return nil
}

// SetThermalZoneResponseMultiError is an error wrapping multiple validation
// errors returned by SetThermalZoneResponse.ValidateAll() if the designated
// constraints aren't met.
type SetThermalZoneResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetThermalZoneResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetThermalZoneResponseMultiError) AllErrors() []error { return m }

// SetThermalZoneResponseValidationError is the validation error returned by
// SetThermalZoneResponse.Validate if the designated constraints aren't met.
type SetThermalZoneResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetThermalZoneResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetThermalZoneResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetThermalZoneResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetThermalZoneResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetThermalZoneResponseValidationError) ErrorName() string {
	return "SetThermalZoneResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SetThermalZoneResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetThermalZoneResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetThermalZoneResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetThermalZoneResponseValidationError{}

// Validate checks the field values on ListThermalZonesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListThermalZonesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListThermalZonesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListThermalZonesRequestMultiError, or nil if none found.
func (m *ListThermalZonesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListThermalZonesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetFieldMask()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListThermalZonesRequestValidationError{
					field:  "FieldMask",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListThermalZonesRequestValidationError{
					field:  "FieldMask",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetFieldMask()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListThermalZonesRequestValidationError{
				field:  "FieldMask",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ListThermalZonesRequestMultiError(errors)
	}

	return nil
}

// ListThermalZonesRequestMultiError is an error wrapping multiple validation
// errors returned by ListThermalZonesRequest.ValidateAll() if the designated
// constraints aren't met.
type ListThermalZonesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListThermalZonesRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListThermalZonesRequestMultiError) AllErrors() []error { return m }

// ListThermalZonesRequestValidationError is the validation error returned by
// ListThermalZonesRequest.Validate if the designated constraints aren't met.
type ListThermalZonesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListThermalZonesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListThermalZonesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListThermalZonesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListThermalZonesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListThermalZonesRequestValidationError) ErrorName() string {
	return "ListThermalZonesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListThermalZonesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListThermalZonesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListThermalZonesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListThermalZonesRequestValidationError{}

// Validate checks the field values on ListThermalZonesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListThermalZonesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListThermalZonesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListThermalZonesResponseMultiError, or nil if none found.
func (m *ListThermalZonesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListThermalZonesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetThermalZones() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListThermalZonesResponseValidationError{
						field:  fmt.Sprintf("ThermalZones[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListThermalZonesResponseValidationError{
						field:  fmt.Sprintf("ThermalZones[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListThermalZonesResponseValidationError{
					field:  fmt.Sprintf("ThermalZones[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListThermalZonesResponseMultiError(errors)
	}

	return nil
}

// ListThermalZonesResponseMultiError is an error wrapping multiple validation
// errors returned by ListThermalZonesResponse.ValidateAll() if the designated
// constraints aren't met.
type ListThermalZonesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListThermalZonesResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListThermalZonesResponseMultiError) AllErrors() []error { return m }

// ListThermalZonesResponseValidationError is the validation error returned by
// ListThermalZonesResponse.Validate if the designated constraints aren't met.
type ListThermalZonesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListThermalZonesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListThermalZonesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListThermalZonesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListThermalZonesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListThermalZonesResponseValidationError) ErrorName() string {
	return "ListThermalZonesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListThermalZonesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListThermalZonesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListThermalZonesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListThermalZonesResponseValidationError{}
