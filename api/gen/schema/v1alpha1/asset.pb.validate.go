// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: schema/v1alpha1/asset.proto

package schemav1alpha1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on AssetInfo with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AssetInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AssetInfo with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AssetInfoMultiError, or nil
// if none found.
func (m *AssetInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *AssetInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ProductName

	// no validation rules for CustomAttributes

	if m.AssetTag != nil {
		// no validation rules for AssetTag
	}

	if m.PartNumber != nil {
		// no validation rules for PartNumber
	}

	if m.SerialNumber != nil {
		// no validation rules for SerialNumber
	}

	if m.Manufacturer != nil {
		// no validation rules for Manufacturer
	}

	if m.Revision != nil {
		// no validation rules for Revision
	}

	if m.Uuid != nil {
		// no validation rules for Uuid
	}

	if m.Sku != nil {
		// no validation rules for Sku
	}

	if m.ManufacturingDate != nil {

		if all {
			switch v := interface{}(m.GetManufacturingDate()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AssetInfoValidationError{
						field:  "ManufacturingDate",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AssetInfoValidationError{
						field:  "ManufacturingDate",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetManufacturingDate()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AssetInfoValidationError{
					field:  "ManufacturingDate",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.PurchaseDate != nil {

		if all {
			switch v := interface{}(m.GetPurchaseDate()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AssetInfoValidationError{
						field:  "PurchaseDate",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AssetInfoValidationError{
						field:  "PurchaseDate",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetPurchaseDate()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AssetInfoValidationError{
					field:  "PurchaseDate",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.WarrantyExpires != nil {

		if all {
			switch v := interface{}(m.GetWarrantyExpires()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AssetInfoValidationError{
						field:  "WarrantyExpires",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AssetInfoValidationError{
						field:  "WarrantyExpires",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetWarrantyExpires()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AssetInfoValidationError{
					field:  "WarrantyExpires",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.InstallationDate != nil {

		if all {
			switch v := interface{}(m.GetInstallationDate()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AssetInfoValidationError{
						field:  "InstallationDate",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AssetInfoValidationError{
						field:  "InstallationDate",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetInstallationDate()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AssetInfoValidationError{
					field:  "InstallationDate",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.DecommissionDate != nil {

		if all {
			switch v := interface{}(m.GetDecommissionDate()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AssetInfoValidationError{
						field:  "DecommissionDate",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AssetInfoValidationError{
						field:  "DecommissionDate",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetDecommissionDate()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AssetInfoValidationError{
					field:  "DecommissionDate",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.Contact != nil {

		if all {
			switch v := interface{}(m.GetContact()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AssetInfoValidationError{
						field:  "Contact",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AssetInfoValidationError{
						field:  "Contact",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetContact()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AssetInfoValidationError{
					field:  "Contact",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return AssetInfoMultiError(errors)
	}

	return nil
}

// AssetInfoMultiError is an error wrapping multiple validation errors returned
// by AssetInfo.ValidateAll() if the designated constraints aren't met.
type AssetInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AssetInfoMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AssetInfoMultiError) AllErrors() []error { return m }

// AssetInfoValidationError is the validation error returned by
// AssetInfo.Validate if the designated constraints aren't met.
type AssetInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AssetInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AssetInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AssetInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AssetInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AssetInfoValidationError) ErrorName() string { return "AssetInfoValidationError" }

// Error satisfies the builtin error interface
func (e AssetInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAssetInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AssetInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AssetInfoValidationError{}

// Validate checks the field values on GetAssetInfoRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetAssetInfoRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAssetInfoRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAssetInfoRequestMultiError, or nil if none found.
func (m *GetAssetInfoRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAssetInfoRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetFieldMask()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetAssetInfoRequestValidationError{
					field:  "FieldMask",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetAssetInfoRequestValidationError{
					field:  "FieldMask",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetFieldMask()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetAssetInfoRequestValidationError{
				field:  "FieldMask",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	switch v := m.Identifier.(type) {
	case *GetAssetInfoRequest_ProductName:
		if v == nil {
			err := GetAssetInfoRequestValidationError{
				field:  "Identifier",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for ProductName
	case *GetAssetInfoRequest_AssetTag:
		if v == nil {
			err := GetAssetInfoRequestValidationError{
				field:  "Identifier",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for AssetTag
	case *GetAssetInfoRequest_PartNumber:
		if v == nil {
			err := GetAssetInfoRequestValidationError{
				field:  "Identifier",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for PartNumber
	case *GetAssetInfoRequest_SerialNumber:
		if v == nil {
			err := GetAssetInfoRequestValidationError{
				field:  "Identifier",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for SerialNumber
	case *GetAssetInfoRequest_Manufacturer:
		if v == nil {
			err := GetAssetInfoRequestValidationError{
				field:  "Identifier",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for Manufacturer
	case *GetAssetInfoRequest_Revision:
		if v == nil {
			err := GetAssetInfoRequestValidationError{
				field:  "Identifier",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for Revision
	case *GetAssetInfoRequest_Uuid:
		if v == nil {
			err := GetAssetInfoRequestValidationError{
				field:  "Identifier",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for Uuid
	case *GetAssetInfoRequest_Sku:
		if v == nil {
			err := GetAssetInfoRequestValidationError{
				field:  "Identifier",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for Sku
	case *GetAssetInfoRequest_ManufacturingDate:
		if v == nil {
			err := GetAssetInfoRequestValidationError{
				field:  "Identifier",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetManufacturingDate()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetAssetInfoRequestValidationError{
						field:  "ManufacturingDate",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetAssetInfoRequestValidationError{
						field:  "ManufacturingDate",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetManufacturingDate()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetAssetInfoRequestValidationError{
					field:  "ManufacturingDate",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *GetAssetInfoRequest_PurchaseDate:
		if v == nil {
			err := GetAssetInfoRequestValidationError{
				field:  "Identifier",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetPurchaseDate()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetAssetInfoRequestValidationError{
						field:  "PurchaseDate",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetAssetInfoRequestValidationError{
						field:  "PurchaseDate",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetPurchaseDate()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetAssetInfoRequestValidationError{
					field:  "PurchaseDate",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *GetAssetInfoRequest_WarrantyExpires:
		if v == nil {
			err := GetAssetInfoRequestValidationError{
				field:  "Identifier",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetWarrantyExpires()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetAssetInfoRequestValidationError{
						field:  "WarrantyExpires",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetAssetInfoRequestValidationError{
						field:  "WarrantyExpires",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetWarrantyExpires()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetAssetInfoRequestValidationError{
					field:  "WarrantyExpires",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *GetAssetInfoRequest_InstallationDate:
		if v == nil {
			err := GetAssetInfoRequestValidationError{
				field:  "Identifier",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetInstallationDate()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetAssetInfoRequestValidationError{
						field:  "InstallationDate",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetAssetInfoRequestValidationError{
						field:  "InstallationDate",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetInstallationDate()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetAssetInfoRequestValidationError{
					field:  "InstallationDate",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *GetAssetInfoRequest_DecommissionDate:
		if v == nil {
			err := GetAssetInfoRequestValidationError{
				field:  "Identifier",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetDecommissionDate()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetAssetInfoRequestValidationError{
						field:  "DecommissionDate",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetAssetInfoRequestValidationError{
						field:  "DecommissionDate",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetDecommissionDate()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetAssetInfoRequestValidationError{
					field:  "DecommissionDate",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *GetAssetInfoRequest_Contact:
		if v == nil {
			err := GetAssetInfoRequestValidationError{
				field:  "Identifier",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetContact()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetAssetInfoRequestValidationError{
						field:  "Contact",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetAssetInfoRequestValidationError{
						field:  "Contact",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetContact()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetAssetInfoRequestValidationError{
					field:  "Contact",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return GetAssetInfoRequestMultiError(errors)
	}

	return nil
}

// GetAssetInfoRequestMultiError is an error wrapping multiple validation
// errors returned by GetAssetInfoRequest.ValidateAll() if the designated
// constraints aren't met.
type GetAssetInfoRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAssetInfoRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAssetInfoRequestMultiError) AllErrors() []error { return m }

// GetAssetInfoRequestValidationError is the validation error returned by
// GetAssetInfoRequest.Validate if the designated constraints aren't met.
type GetAssetInfoRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAssetInfoRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAssetInfoRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAssetInfoRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAssetInfoRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAssetInfoRequestValidationError) ErrorName() string {
	return "GetAssetInfoRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetAssetInfoRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAssetInfoRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAssetInfoRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAssetInfoRequestValidationError{}

// Validate checks the field values on GetAssetInfoResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetAssetInfoResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAssetInfoResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAssetInfoResponseMultiError, or nil if none found.
func (m *GetAssetInfoResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAssetInfoResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetAssetInfo() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetAssetInfoResponseValidationError{
						field:  fmt.Sprintf("AssetInfo[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetAssetInfoResponseValidationError{
						field:  fmt.Sprintf("AssetInfo[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetAssetInfoResponseValidationError{
					field:  fmt.Sprintf("AssetInfo[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetAssetInfoResponseMultiError(errors)
	}

	return nil
}

// GetAssetInfoResponseMultiError is an error wrapping multiple validation
// errors returned by GetAssetInfoResponse.ValidateAll() if the designated
// constraints aren't met.
type GetAssetInfoResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAssetInfoResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAssetInfoResponseMultiError) AllErrors() []error { return m }

// GetAssetInfoResponseValidationError is the validation error returned by
// GetAssetInfoResponse.Validate if the designated constraints aren't met.
type GetAssetInfoResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAssetInfoResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAssetInfoResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAssetInfoResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAssetInfoResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAssetInfoResponseValidationError) ErrorName() string {
	return "GetAssetInfoResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetAssetInfoResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAssetInfoResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAssetInfoResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAssetInfoResponseValidationError{}

// Validate checks the field values on SetAssetInfoRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SetAssetInfoRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetAssetInfoRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SetAssetInfoRequestMultiError, or nil if none found.
func (m *SetAssetInfoRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SetAssetInfoRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetAssetInfo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SetAssetInfoRequestValidationError{
					field:  "AssetInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SetAssetInfoRequestValidationError{
					field:  "AssetInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAssetInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SetAssetInfoRequestValidationError{
				field:  "AssetInfo",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetFieldMask()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SetAssetInfoRequestValidationError{
					field:  "FieldMask",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SetAssetInfoRequestValidationError{
					field:  "FieldMask",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetFieldMask()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SetAssetInfoRequestValidationError{
				field:  "FieldMask",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	switch v := m.Identifier.(type) {
	case *SetAssetInfoRequest_ProductName:
		if v == nil {
			err := SetAssetInfoRequestValidationError{
				field:  "Identifier",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for ProductName
	case *SetAssetInfoRequest_AssetTag:
		if v == nil {
			err := SetAssetInfoRequestValidationError{
				field:  "Identifier",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for AssetTag
	case *SetAssetInfoRequest_PartNumber:
		if v == nil {
			err := SetAssetInfoRequestValidationError{
				field:  "Identifier",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for PartNumber
	case *SetAssetInfoRequest_SerialNumber:
		if v == nil {
			err := SetAssetInfoRequestValidationError{
				field:  "Identifier",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for SerialNumber
	case *SetAssetInfoRequest_Manufacturer:
		if v == nil {
			err := SetAssetInfoRequestValidationError{
				field:  "Identifier",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for Manufacturer
	case *SetAssetInfoRequest_Revision:
		if v == nil {
			err := SetAssetInfoRequestValidationError{
				field:  "Identifier",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for Revision
	case *SetAssetInfoRequest_Uuid:
		if v == nil {
			err := SetAssetInfoRequestValidationError{
				field:  "Identifier",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for Uuid
	case *SetAssetInfoRequest_Sku:
		if v == nil {
			err := SetAssetInfoRequestValidationError{
				field:  "Identifier",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for Sku
	case *SetAssetInfoRequest_ManufacturingDate:
		if v == nil {
			err := SetAssetInfoRequestValidationError{
				field:  "Identifier",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetManufacturingDate()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SetAssetInfoRequestValidationError{
						field:  "ManufacturingDate",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SetAssetInfoRequestValidationError{
						field:  "ManufacturingDate",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetManufacturingDate()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SetAssetInfoRequestValidationError{
					field:  "ManufacturingDate",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *SetAssetInfoRequest_PurchaseDate:
		if v == nil {
			err := SetAssetInfoRequestValidationError{
				field:  "Identifier",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetPurchaseDate()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SetAssetInfoRequestValidationError{
						field:  "PurchaseDate",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SetAssetInfoRequestValidationError{
						field:  "PurchaseDate",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetPurchaseDate()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SetAssetInfoRequestValidationError{
					field:  "PurchaseDate",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *SetAssetInfoRequest_WarrantyExpires:
		if v == nil {
			err := SetAssetInfoRequestValidationError{
				field:  "Identifier",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetWarrantyExpires()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SetAssetInfoRequestValidationError{
						field:  "WarrantyExpires",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SetAssetInfoRequestValidationError{
						field:  "WarrantyExpires",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetWarrantyExpires()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SetAssetInfoRequestValidationError{
					field:  "WarrantyExpires",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *SetAssetInfoRequest_InstallationDate:
		if v == nil {
			err := SetAssetInfoRequestValidationError{
				field:  "Identifier",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetInstallationDate()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SetAssetInfoRequestValidationError{
						field:  "InstallationDate",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SetAssetInfoRequestValidationError{
						field:  "InstallationDate",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetInstallationDate()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SetAssetInfoRequestValidationError{
					field:  "InstallationDate",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *SetAssetInfoRequest_DecommissionDate:
		if v == nil {
			err := SetAssetInfoRequestValidationError{
				field:  "Identifier",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetDecommissionDate()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SetAssetInfoRequestValidationError{
						field:  "DecommissionDate",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SetAssetInfoRequestValidationError{
						field:  "DecommissionDate",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetDecommissionDate()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SetAssetInfoRequestValidationError{
					field:  "DecommissionDate",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *SetAssetInfoRequest_Contact:
		if v == nil {
			err := SetAssetInfoRequestValidationError{
				field:  "Identifier",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetContact()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SetAssetInfoRequestValidationError{
						field:  "Contact",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SetAssetInfoRequestValidationError{
						field:  "Contact",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetContact()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SetAssetInfoRequestValidationError{
					field:  "Contact",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return SetAssetInfoRequestMultiError(errors)
	}

	return nil
}

// SetAssetInfoRequestMultiError is an error wrapping multiple validation
// errors returned by SetAssetInfoRequest.ValidateAll() if the designated
// constraints aren't met.
type SetAssetInfoRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetAssetInfoRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetAssetInfoRequestMultiError) AllErrors() []error { return m }

// SetAssetInfoRequestValidationError is the validation error returned by
// SetAssetInfoRequest.Validate if the designated constraints aren't met.
type SetAssetInfoRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetAssetInfoRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetAssetInfoRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetAssetInfoRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetAssetInfoRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetAssetInfoRequestValidationError) ErrorName() string {
	return "SetAssetInfoRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SetAssetInfoRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetAssetInfoRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetAssetInfoRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetAssetInfoRequestValidationError{}

// Validate checks the field values on SetAssetInfoResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SetAssetInfoResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetAssetInfoResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SetAssetInfoResponseMultiError, or nil if none found.
func (m *SetAssetInfoResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SetAssetInfoResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetAssetInfo() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SetAssetInfoResponseValidationError{
						field:  fmt.Sprintf("AssetInfo[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SetAssetInfoResponseValidationError{
						field:  fmt.Sprintf("AssetInfo[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SetAssetInfoResponseValidationError{
					field:  fmt.Sprintf("AssetInfo[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return SetAssetInfoResponseMultiError(errors)
	}

	return nil
}

// SetAssetInfoResponseMultiError is an error wrapping multiple validation
// errors returned by SetAssetInfoResponse.ValidateAll() if the designated
// constraints aren't met.
type SetAssetInfoResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetAssetInfoResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetAssetInfoResponseMultiError) AllErrors() []error { return m }

// SetAssetInfoResponseValidationError is the validation error returned by
// SetAssetInfoResponse.Validate if the designated constraints aren't met.
type SetAssetInfoResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetAssetInfoResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetAssetInfoResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetAssetInfoResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetAssetInfoResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetAssetInfoResponseValidationError) ErrorName() string {
	return "SetAssetInfoResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SetAssetInfoResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetAssetInfoResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetAssetInfoResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetAssetInfoResponseValidationError{}
